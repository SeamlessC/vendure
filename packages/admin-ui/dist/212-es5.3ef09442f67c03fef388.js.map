{"version":3,"mappings":"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","names":["e","ue","constructor","n","this","l","method","transactionId","ngOnInit","paymentMethods$","dataService","settings","getPaymentMethods","mapSingle","paymentMethods","items","submit","form","value","resolveWith","cancel","selectors","me","t","cancellationReasons","g","reasons","map","o","i18nService","translate","Object","values","lineQuantities","reduce","order","lines","id","quantity","radioChanged","cancelAll","_step","_step2","checkIfAllSelected","_Object$entries$_i","i","find","a","_i2","entries","select","orderId","getLineInputs","reason","cancelShipping","active","orderLineId","_ref2","filter","G","_e","availableCouponCodes$","it","couponCodeInput$","pipe","$e","h","promotion","getPromotions","couponCode","contains","single$","S","promotions","code","promotionName","name","at","control","couponCodes","lt","Ps","s","W","addressForm","formBuilder","group","fullName","currentAddress","company","streetLine1","c","streetLine2","_","p","city","x","v","province","b","C","postalCode","ie","oe","countryCode","le","ae","phoneNumber","de","ce","useExisting","customerId","addresses$","query","customer","F","O","addresses","Qe","selectedAddress","se","V","length","createNew","L","availableCountries$","getAvailableCountries","countries","trackByFn","addressIdFn","Qt","country","valid","ge","customerForm","title","firstName","lastName","emailAddress","customers$","input$","He","isLoading","getCustomerList","mapStream","customers","ut","selectedCustomer","fe","currentSelectionId","selectedMethod","eligibleShippingMethods","methodIdFn","an","call","ln","super","error","notifier","Be","_unsubscribe","errors","notifyNext","he","selectedState","J","transitionToPreModifyingState","getPreModifyingState","nextStates","message","state","cancellable","retry","transitionToStateOrThrow","manuallyTransitionToState","r","modalService","fromComponent","locals","closable","size","M","Error","cn","D","getOrderHistory","type","eq","sort","createdAt","history","data","to","from","transitionToState","transitionOrderToState","__typename","notificationService","transitionError","factory","ɵfac","xe","selectedVariant$","selectedVariantId$","product","getProductVariant","productVariant","orderLineCustomFields","_step3","customFieldsFormGroup","addControl","addItemClick","addItem","emit","productVariantId","customFields","next","reset","Y","getRefundedCount","payments","_toConsumableArray","refunds","line","refundId","cancelled","K","ngOnChanges","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","fulfillments","getFulfillments","summary","orderLine","count","fulfillment","oxw","remove","j","orderLineCustomFieldsVisible","getLineCustomFields","draftInputBlur","adjust","lineId","toggleOrderLineCustomFields","getLineDiscounts","discounts","config","formGroup","customFieldsForLine","_loop2","getPromotionLink","adjustmentSource","split","getCouponCodeForAdjustment","getShippingNames","shippingLines","shippingMethod","join","z","customFieldForm","customFieldsConfig","_step5","customFieldValues","onUpdateClick","updateClick","markAsPristine","editable","onCancelClick","dirty","dialog","buttons","label","returnValue","subscribe","ee","init","getCustomFieldConfig","eligibleShippingMethods$","entity$","getDraftOrderEligibleShippingMethods","eligibleShippingMethodsForDraftOrder","ngOnDestroy","destroy","addItemToOrder","addItemToDraftOrder","adjustOrderLine","adjustDraftOrderLine","removeOrderLine","removeDraftOrderLine","getOrderAddressLines","setCustomer","hasId","setCustomerForDraftOrder","input","setShippingAddress","shippingAddress","setDraftOrderShippingAddress","setBillingAddress","billingAddress","setDraftOrderBillingAddress","applyCouponCode","applyCouponCodeToDraftOrder","removeCouponCode","removeCouponCodeFromDraftOrder","setShippingMethod","Dt","currencyCode","setDraftOrderShippingMethod","updateCustomFields","updateOrderCustomFields","deleteOrder","deleteDraftOrder","result","success","entity","router","navigate","completeOrder","setFormValues","ve","getGlobalSettings","globalSettings","fulfillmentQuantities","getFulfillableCount","trackInventory","_defineProperty","fulfillCount","max","changeDetector","markForCheck","getShippingMethodOperations","fulfillmentHandlers","fulfillmentHandlerDef","fulfillmentHandlerCode","fulfillmentHandler","fulfillmentHandlerControl","patchValue","_n$productVariant","stockOnHand","getUnfulfilledCount","Math","min","flat","canSubmit","_ref15","_ref17","handler","Ze","chipColorType","$","te","customFieldConfig","serverConfigService","getCustomFieldsFor","buildCustomFieldsFormGroup","fulfillmentId","_step6","customFieldFormGroup","customFieldIsObject","Array","isArray","R","transitionState","Ce","nextSuggestedState","includes","nextOtherStates","ye","Map","getModifiedLines","added","_this$getModifiedLine","removed","addedItems","removedItems","getSurcharge","surcharges","getAddedItems","_ref19","getRemovedItems","_ref21","modification","orderItems","_step7","getOrderLineAndItem","item","get","set","_step8","tt","ne","et","isCancellable","node","active$","getPos","arguments","elementRef","nativeElement","getBoundingClientRect","querySelector","height","y","index","getStyle","Ae","asObservable","activeTarget$","abs","sqrt","transform","Te","nodes","setActiveState$","initialState","activeState$","populateNodes","ngAfterViewInit","setTimeout","populateEdges","onMouseOver","onMouseOut","getNodeFor","nodeComponents","states","_step9","_step11","push","_loop3","_step12","_iterator13","_step13","edges","be","getOrderProcessStates","Oe","refund","proratedUnitPriceWithTax","refundShipping","shippingWithTax","adjustment","settledPayments","amount","lineCanBeRefundedOrCancelled","selectedPayment","handleZeroQuantity","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","getOrderLineInput","shipping","paymentId","_ref23","_ref25","qe","re","updateNote","deleteNote","Ie","getDisplayType","getTimelineIcon","isFeatured","getFulfillment","getPayment","getCancelledItems","orderItemIds","_step14","_step15","_ref27","getModification","modifications","getName","administrator","addNoteToOrder","addNote","note","isPublic","noteIsPrivate","Le","Fe","settleRefund","we","refundHasMetadata","keys","metadata","payment","Se","relativeTo","route","history$","fetchHistory","nextStates$","defaultStates","openStateDiagram","activeState","orderTransitionService","transitionToModifying","settlePayment","getOrder","transitionPaymentState","cancelPayment","paymentErrorMessage","transitionPaymentToState","canAddFulfillment","hasUnsettledModifications","outstandingPaymentAmount","isSettled","getOutstandingModificationAmount","_step17","totalWithTax","addManualPayment","outstandingAmount","addManualPaymentToOrder","ze","refetchOrder","fulfillOrder","createFulfillment","addFulfillmentToOrder","fulfillmentHandlerError","JSON","stringify","transitionFulfillment","transitionFulfillmentToState","cancelOrRefund","orderHasSettledPayments","refundOrder","cancelOrder","displayPrivacyControls","updateOrderNote","noteId","isPrivate","body","deleteOrderNote","P","Me","priceDifference","originalTotalWithTax","refundNote","modifyOrderInput","Cancel","Payment","Refund","refundPaymentId","PriceUnchanged","Ne","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","addedVariants","price","priceWithTax","addressCustomFields","snapshot","paramMap","De","destroy$","couponCodesControl","setValue","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","addAddressCustomFieldsFormGroup","billingAddressForm","orderLineCustomFieldsFormArray","_step19","valueChanges","je","ma","_loop5","addItemCustomFieldsFormArray","addItemCustomFieldsForm","_step20","Zt","take","previousState","transitionToPriorState","canPreviewChanges","_this$modifyOrderInpu","isLineModified","updateLineQuantity","splice","indexOf","updateAddedItemQuantity","trackByProductVariantId","getSelectedItemPrice","isMatchingAddItemRow","_i3","_Object$entries2$_i","addItemSelectedVariant","removeAddedItem","removeAt","getSurchargePrices","round","addSurcharge","removeSurcharge","previewAndModify","mi","options","recalculateShipping","modifyOrder","_step21","_iterator21","Je","orderStates","getOrders","skip","refetchOnChannelChange","orders","createQueryOptions","searchControl","queryParamMap","localStorageService","setQueryParam","replaceUrl","canCreateDraftOrder","filterPresets","activePreset$","getActiveChannel","processingTime","activeChannel","Tt","rt","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","setItemsPerPage","refreshInterval","setInterval","audioElem","document","getElementById","muted","addEventListener","audioOn","once","play","then","items$","itemList","playAudio","toggleAudio","formatTime","At","format","formatDate","getNextState","toNextState","yt","_context2","toString","toPromise","selectFilterPreset","page","applyCustomFilters","in","orderPlacedAt","between","start","end","after","before","customerLastName","updatedAt","filterOperator","clearInterval","U","resolve","events","component","H","canActivate","url","createDraftOrder","_ref38","parseUrl","bt","path","breadcrumb","canDeactivate","Ye","Ot","breadcrumbKey","slice","link","concat","Pe"],"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/coupon-code-selector/coupon-code-selector.component.html","webpack:///src/lib/order/src/components/coupon-code-selector/coupon-code-selector.component.ts","webpack:///src/lib/order/src/components/select-address-dialog/select-address-dialog.graphql.ts","webpack:///src/lib/order/src/components/select-address-dialog/select-address-dialog.component.html","webpack:///src/lib/order/src/components/select-address-dialog/select-address-dialog.component.ts","webpack:///src/lib/order/src/components/select-customer-dialog/select-customer-dialog.component.html","webpack:///src/lib/order/src/components/select-customer-dialog/select-customer-dialog.component.ts","webpack:///src/lib/order/src/components/select-shipping-method-dialog/select-shipping-method-dialog.component.html","webpack:///src/lib/order/src/components/select-shipping-method-dialog/select-shipping-method-dialog.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/draft-order-variant-selector/draft-order-variant-selector.component.html","webpack:///src/lib/order/src/components/draft-order-variant-selector/draft-order-variant-selector.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///src/lib/order/src/components/draft-order-detail/draft-order-detail.component.html","webpack:///src/lib/order/src/components/draft-order-detail/draft-order-detail.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/providers/routing/order.guard.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\n<form [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\n        <ng-select\n            [items]=\"paymentMethods$ | async\"\n            bindLabel=\"code\"\n            autofocus\n            bindValue=\"code\"\n            [addTag]=\"true\"\n            formControlName=\"method\"\n        ></ng-select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\n    </vdr-form-field>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    CurrencyCode,\n    DataService,\n    Dialog,\n    GetPaymentMethodList,\n    ManualPaymentInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-add-manual-payment-dialog',\n    templateUrl: './add-manual-payment-dialog.component.html',\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\n    // populated by ModalService call\n    outstandingAmount: number;\n    currencyCode: CurrencyCode;\n\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\n    form = new FormGroup({\n        method: new FormControl('', Validators.required),\n        transactionId: new FormControl('', Validators.required),\n    });\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.paymentMethods$ = this.dataService.settings\n            .getPaymentMethods(999)\n            .mapSingle(data => data.paymentMethods.items);\n    }\n\n    submit() {\n        const formValue = this.form.value;\n        this.resolveWith({\n            method: formValue.method,\n            transactionId: formValue.transactionId,\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\n\n<div class=\"fulfillment-wrapper\">\n    <div class=\"order-lines\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.unit-price' | translate }}</th>\n                    <th>{{ 'order.cancel' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let line of order.lines\"\n                class=\"order-line\"\n                [class.is-disabled]=\"cancelAll\"\n                [class.is-cancelled]=\"line.quantity === 0\"\n            >\n                <td class=\"align-middle thumb\">\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\n                <td class=\"align-middle quantity\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\n                        [(ngModel)]=\"lineQuantities[line.id]\"\n                        (input)=\"checkIfAllSelected()\"\n                        [disabled]=\"cancelAll\"\n                        type=\"number\"\n                        [max]=\"line.quantity\"\n                        min=\"0\"\n                    />\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"cancellation-details\">\n        <ng-container *ngIf=\"order.active !== true\">\n            <clr-radio-wrapper>\n                <input\n                    type=\"radio\"\n                    clrRadio\n                    [value]=\"true\"\n                    [(ngModel)]=\"cancelAll\"\n                    name=\"options\"\n                    (ngModelChange)=\"radioChanged()\"\n                />\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\n            </clr-radio-wrapper>\n            <clr-radio-wrapper>\n                <input\n                    type=\"radio\"\n                    clrRadio\n                    [value]=\"false\"\n                    [(ngModel)]=\"cancelAll\"\n                    name=\"options\"\n                    (ngModelChange)=\"radioChanged()\"\n                />\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\n            </clr-radio-wrapper>\n        </ng-container>\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\n        <ng-select\n            [items]=\"reasons\"\n            bindLabel=\"name\"\n            autofocus\n            bindValue=\"id\"\n            [addTag]=\"true\"\n            [(ngModel)]=\"reason\"\n        ></ng-select>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\n        class=\"btn btn-primary\"\n    >\n        <ng-container *ngIf=\"!order.active\">\n            {{ 'order.cancel-selected-items' | translate }}\n        </ng-container>\n        <ng-container *ngIf=\"order.active\">\n            {{ 'order.cancel-order' | translate }}\n        </ng-container>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CancelOrderInput,\n    Dialog,\n    getAppConfig,\n    I18nService,\n    OrderDetailFragment,\n    OrderLineInput,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-cancel-order-dialog',\n    templateUrl: './cancel-order-dialog.component.html',\n    styleUrls: ['./cancel-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\n    order: OrderDetailFragment;\n    cancelAll = true;\n    resolveWith: (result?: CancelOrderInput) => void;\n    reason: string;\n    lineQuantities: { [lineId: string]: number } = {};\n    reasons: string[] = getAppConfig().cancellationReasons ?? [\n        _('order.cancel-reason-customer-request'),\n        _('order.cancel-reason-not-available'),\n    ];\n\n    get selectionCount(): number {\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\n    }\n\n    constructor(private i18nService: I18nService) {\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\n    }\n\n    ngOnInit() {\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\n            return { ...result, [line.id]: line.quantity };\n        }, {});\n    }\n\n    radioChanged() {\n        if (this.cancelAll) {\n            for (const line of this.order.lines) {\n                this.lineQuantities[line.id] = line.quantity;\n            }\n        } else {\n            for (const line of this.order.lines) {\n                this.lineQuantities[line.id] = 0;\n            }\n        }\n    }\n\n    checkIfAllSelected() {\n        for (const [lineId, quantity] of Object.entries(this.lineQuantities)) {\n            const quantityInOrder = this.order.lines.find(line => line.id === lineId)?.quantity;\n            if (quantityInOrder && quantity < quantityInOrder) {\n                return;\n            }\n        }\n        // If we got here, all of the selected quantities are equal to the order\n        // line quantities, i.e. everything is selected.\n        this.cancelAll = true;\n    }\n\n    select() {\n        this.resolveWith({\n            orderId: this.order.id,\n            lines: this.getLineInputs(),\n            reason: this.reason,\n            cancelShipping: this.cancelAll,\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private getLineInputs(): OrderLineInput[] | undefined {\n        if (this.order.active) {\n            return;\n        }\n        return Object.entries(this.lineQuantities)\n            .map(([orderLineId, quantity]) => ({\n                orderLineId,\n                quantity,\n            }))\n            .filter(l => 0 < l.quantity);\n    }\n}\n","<ng-select\n    [items]=\"availableCouponCodes$ | async\"\n    appendTo=\"body\"\n    bindLabel=\"code\"\n    bindValue=\"code\"\n    [addTag]=\"false\"\n    [multiple]=\"true\"\n    [hideSelected]=\"true\"\n    [minTermLength]=\"2\"\n    typeToSearchText=\"\"\n    [typeahead]=\"couponCodeInput$\"\n    [formControl]=\"control\"\n    (add)=\"addCouponCode.emit($event.code)\"\n    (remove)=\"removeCouponCode.emit($event.value?.code)\"\n>\n    <ng-template ng-option-tmp let-item=\"item\">\n        <vdr-chip>{{ item.code }}</vdr-chip>\n        {{ item.promotionName }}\n    </ng-template>\n</ng-select>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { concat, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-coupon-code-selector',\n    templateUrl: './coupon-code-selector.component.html',\n    styleUrls: ['./coupon-code-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CouponCodeSelectorComponent implements OnInit {\n    @Input() couponCodes: string[];\n    @Input() control: FormControl | undefined;\n    @Output() addCouponCode = new EventEmitter<string>();\n    @Output() removeCouponCode = new EventEmitter<string>();\n    availableCouponCodes$: Observable<Array<{ code: string; promotionName: string }>>;\n    couponCodeInput$ = new Subject<string>();\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.availableCouponCodes$ = concat(\n            this.couponCodeInput$.pipe(\n                distinctUntilChanged(),\n                switchMap(\n                    term =>\n                        this.dataService.promotion.getPromotions(10, 0, {\n                            couponCode: { contains: term },\n                        }).single$,\n                ),\n                map(({ promotions }) =>\n                    // tslint:disable-next-line:no-non-null-assertion\n                    promotions.items.map(p => ({ code: p.couponCode!, promotionName: p.name })),\n                ),\n                startWith([]),\n            ),\n        );\n        if (!this.control) {\n            this.control = new FormControl(this.couponCodes ?? []);\n        }\n    }\n}\n","import { ADDRESS_FRAGMENT } from '@vendure/admin-ui/core';\nimport { gql } from 'apollo-angular';\n\nexport const GET_CUSTOMER_ADDRESSES = gql`\n    query GetCustomerAddresses($customerId: ID!) {\n        customer(id: $customerId) {\n            id\n            addresses {\n                ...Address\n            }\n        }\n    }\n    ${ADDRESS_FRAGMENT}\n`;\n","<ng-template vdrDialogTitle>{{ 'order.select-address' | translate }}</ng-template>\n\n<clr-tabs *ngIf=\"addresses$ | async as addresses\">\n    <clr-tab *ngIf=\"customerId && addresses.length\">\n        <button clrTabLink>{{ 'order.existing-address' | translate }}</button>\n        <ng-template [(clrIfActive)]=\"useExisting\">\n            <clr-tab-content>\n                <vdr-radio-card-fieldset\n                    class=\"block mt4\"\n                    [idFn]=\"addressIdFn\"\n                    [selectedItemId]=\"selectedAddress && addressIdFn(selectedAddress)\"\n                    (selectItem)=\"selectedAddress = $event\"\n                >\n                    <vdr-radio-card *ngFor=\"let address of addresses\" [item]=\"address\">\n                        <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\n                    </vdr-radio-card>\n                </vdr-radio-card-fieldset>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n    <clr-tab>\n        <button clrTabLink>{{ 'customer.create-new-address' | translate }}</button>\n\n        <ng-template [(clrIfActive)]=\"createNew\">\n            <clr-tab-content>\n                <vdr-address-form\n                    [formGroup]=\"addressForm\"\n                    [availableCountries]=\"availableCountries$ | async\"\n                ></vdr-address-form>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n</clr-tabs>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"(useExisting && !selectedAddress) || (createNew && addressForm.invalid)\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.okay' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n    AddressFragment,\n    CreateAddressInput,\n    CreateCustomerInput,\n    DataService,\n    Dialog,\n    GetAvailableCountriesQuery,\n    GetCustomerAddressesQuery,\n    GetCustomerAddressesQueryVariables,\n    OrderAddressFragment,\n} from '@vendure/admin-ui/core';\nimport { pick } from '@vendure/common/lib/pick';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Customer } from '../select-customer-dialog/select-customer-dialog.component';\n\nimport { GET_CUSTOMER_ADDRESSES } from './select-address-dialog.graphql';\n\n@Component({\n    selector: 'vdr-select-address-dialog',\n    templateUrl: './select-address-dialog.component.html',\n    styleUrls: ['./select-address-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectAddressDialogComponent implements OnInit, Dialog<CreateAddressInput> {\n    resolveWith: (result?: CreateAddressInput) => void;\n    availableCountries$: Observable<GetAvailableCountriesQuery['countries']['items']>;\n    addresses$: Observable<AddressFragment[]>;\n    customerId: string | undefined;\n    currentAddress: OrderAddressFragment | undefined;\n    addressForm: FormGroup;\n    selectedAddress: AddressFragment | undefined;\n    useExisting = true;\n    createNew = false;\n\n    constructor(private dataService: DataService, private formBuilder: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.addressForm = this.formBuilder.group({\n            fullName: [this.currentAddress?.fullName ?? ''],\n            company: [this.currentAddress?.company ?? ''],\n            streetLine1: [this.currentAddress?.streetLine1 ?? '', Validators.required],\n            streetLine2: [this.currentAddress?.streetLine2 ?? ''],\n            city: [this.currentAddress?.city ?? '', Validators.required],\n            province: [this.currentAddress?.province ?? ''],\n            postalCode: [this.currentAddress?.postalCode ?? '', Validators.required],\n            countryCode: [this.currentAddress?.countryCode ?? '', Validators.required],\n            phoneNumber: [this.currentAddress?.phoneNumber ?? ''],\n        });\n        this.useExisting = !!this.customerId;\n        this.addresses$ = this.customerId\n            ? this.dataService\n                  .query<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>(\n                      GET_CUSTOMER_ADDRESSES,\n                      { customerId: this.customerId },\n                  )\n                  .mapSingle(({ customer }) => customer?.addresses ?? [])\n                  .pipe(\n                      tap(addresses => {\n                          if (this.currentAddress) {\n                              this.selectedAddress = addresses.find(\n                                  a =>\n                                      a.streetLine1 === this.currentAddress?.streetLine1 &&\n                                      a.postalCode === this.currentAddress?.postalCode,\n                              );\n                          }\n                          if (addresses.length === 0) {\n                              this.createNew = true;\n                              this.useExisting = false;\n                          }\n                      }),\n                  )\n            : of([]);\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(({ countries }) => countries.items);\n    }\n\n    trackByFn(item: Customer) {\n        return item.id;\n    }\n\n    addressIdFn(item: AddressFragment) {\n        return item.streetLine1 + item.postalCode;\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    select() {\n        if (this.useExisting && this.selectedAddress) {\n            this.resolveWith({\n                ...pick(this.selectedAddress, [\n                    'fullName',\n                    'company',\n                    'streetLine1',\n                    'streetLine2',\n                    'city',\n                    'province',\n                    'phoneNumber',\n                    'postalCode',\n                ]),\n                countryCode: this.selectedAddress.country.code,\n            });\n        }\n        if (this.createNew && this.addressForm.valid) {\n            const formValue = this.addressForm.value;\n            this.resolveWith(formValue);\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.set-customer-for-order' | translate }}</ng-template>\n\n<clr-tabs>\n    <clr-tab>\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\n\n        <ng-template [(clrIfActive)]=\"useExisting\">\n            <clr-tab-content>\n                <ng-select\n                    [items]=\"customers$ | async\"\n                    appendTo=\"body\"\n                    bindLabel=\"name\"\n                    [addTag]=\"false\"\n                    [multiple]=\"true\"\n                    [hideSelected]=\"true\"\n                    [trackByFn]=\"trackByFn\"\n                    [minTermLength]=\"2\"\n                    [loading]=\"isLoading\"\n                    [typeahead]=\"input$\"\n                    [(ngModel)]=\"selectedCustomer\"\n                    class=\"mt4\"\n                >\n                    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\n                        ><span class=\"ml2 mr2\">{{ item.firstName }} {{ item.lastName }}</span>\n                        <vdr-chip>{{ item.emailAddress }}</vdr-chip>\n                    </ng-template>\n                    <ng-template ng-option-tmp let-item=\"item\">\n                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\n                        ><span class=\"ml2 mr2\">{{ item.firstName }} {{ item.lastName }}</span>\n                        <vdr-chip>{{ item.emailAddress }}</vdr-chip>\n                    </ng-template>\n                </ng-select>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n    <clr-tab>\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\n\n        <ng-template [(clrIfActive)]=\"createNew\">\n            <clr-tab-content>\n                <form [formGroup]=\"customerForm\">\n                <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\n                    <input id=\"title\" type=\"text\" formControlName=\"title\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\n                    <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\n                    <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\n                    <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\n                    <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\n                </vdr-form-field>\n                </form>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n</clr-tabs>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.okay' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CreateCustomerInput, DataService, Dialog, GetCustomerListQuery } from '@vendure/admin-ui/core';\nimport { concat, Observable, of, Subject } from 'rxjs';\nimport { catchError, debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\n\nexport type Customer = GetCustomerListQuery['customers']['items'][number];\n\n@Component({\n    selector: 'vdr-select-customer-dialog',\n    templateUrl: './select-customer-dialog.component.html',\n    styleUrls: ['./select-customer-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectCustomerDialogComponent implements OnInit, Dialog<Customer | CreateCustomerInput> {\n    resolveWith: (result?: Customer | CreateCustomerInput) => void;\n    customerForm: FormGroup;\n    customers$: Observable<Customer[]>;\n    isLoading = false;\n    input$ = new Subject<string>();\n    selectedCustomer: Customer[] = [];\n    useExisting = true;\n    createNew = false;\n\n    constructor(private dataService: DataService, private formBuilder: FormBuilder) {\n        this.customerForm = this.formBuilder.group({\n            title: '',\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            phoneNumber: '',\n            emailAddress: ['', [Validators.required, Validators.email]],\n        });\n    }\n\n    ngOnInit(): void {\n        this.customers$ = concat(\n            of([]), // default items\n            this.input$.pipe(\n                debounceTime(200),\n                distinctUntilChanged(),\n                tap(() => (this.isLoading = true)),\n                switchMap(term =>\n                    this.dataService.customer\n                        .getCustomerList(10, 0, term)\n                        .mapStream(({ customers }) => customers.items)\n                        .pipe(\n                            catchError(() => of([])), // empty list on error\n                            tap(() => (this.isLoading = false)),\n                        ),\n                ),\n            ),\n        );\n    }\n\n    trackByFn(item: Customer) {\n        return item.id;\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    select() {\n        if (this.useExisting && this.selectedCustomer.length === 1) {\n            this.resolveWith(this.selectedCustomer[0]);\n        }\n        if (this.createNew && this.customerForm.valid) {\n            const formValue = this.customerForm.value;\n            this.resolveWith(formValue);\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.select-shipping-method' | translate }}</ng-template>\n<vdr-radio-card-fieldset\n    [idFn]=\"methodIdFn\"\n    [selectedItemId]=\"selectedMethod?.id\"\n    (selectItem)=\"selectedMethod = $event\"\n>\n    <vdr-radio-card *ngFor=\"let quote of eligibleShippingMethods\" [item]=\"quote\">\n        <div class=\"result-details\">\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\n                {{ quote.name }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\n                    {{ quote.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\n        </div>\n    </vdr-radio-card>\n</vdr-radio-card-fieldset>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"!selectedMethod\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.okay' | translate }}\n    </button>\n</ng-template>\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n    CreateAddressInput,\n    CurrencyCode,\n    Dialog,\n    DraftOrderEligibleShippingMethodsQuery,\n} from '@vendure/admin-ui/core';\n\ntype ShippingMethodQuote =\n    DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder'][number];\n\n@Component({\n    selector: 'vdr-select-shipping-method-dialog',\n    templateUrl: './select-shipping-method-dialog.component.html',\n    styleUrls: ['./select-shipping-method-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectShippingMethodDialogComponent implements OnInit, Dialog<string> {\n    resolveWith: (result?: string) => void;\n    eligibleShippingMethods: ShippingMethodQuote[];\n    currentSelectionId: string;\n    currencyCode: CurrencyCode;\n    selectedMethod: ShippingMethodQuote | undefined;\n    constructor() {}\n\n    ngOnInit(): void {\n        if (this.currentSelectionId) {\n            this.selectedMethod = this.eligibleShippingMethods.find(m => m.id === this.currentSelectionId);\n        }\n    }\n\n    methodIdFn(item: ShippingMethodQuote) {\n        return item.id;\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    select() {\n        if (this.selectedMethod) {\n            this.resolveWith(this.selectedMethod.id);\n        }\n    }\n}\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\n<p>{{ message | translate }}</p>\n<clr-select-container>\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\n            {{ state | stateI18nToken | translate }}\n        </option>\n    </select>\n</clr-select-container>\n<ng-template vdrDialogButtons>\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\n        {{ 'common.cancel' | translate }}\n    </button>\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-state-select-dialog',\n    templateUrl: './order-state-select-dialog.component.html',\n    styleUrls: ['./order-state-select-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    nextStates: string[] = [];\n    message = '';\n    cancellable: boolean;\n    selectedState = '';\n\n    select() {\n        if (this.selectedState) {\n            this.resolveWith(this.selectedState);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    HistoryEntryType,\n    I18nService,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\n\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderTransitionService {\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private i18nService: I18nService,\n    ) {}\n\n    /**\n     * Attempts to transition the Order to the last state it was in before it was transitioned\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\n     */\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\n        return this.getPreModifyingState(orderId).pipe(\n            switchMap(state => {\n                const manualTransitionOptions = {\n                    orderId,\n                    nextStates,\n                    message: this.i18nService.translate(\n                        _('order.unable-to-transition-to-state-try-another'),\n                        { state },\n                    ),\n                    cancellable: false,\n                    retry: 10,\n                };\n                if (state) {\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\n                    );\n                } else {\n                    return this.manuallyTransitionToState(manualTransitionOptions);\n                }\n            }),\n        );\n    }\n\n    /**\n     * Displays a modal for manually selecting the next state.\n     */\n    manuallyTransitionToState(options: {\n        orderId: string;\n        nextStates: string[];\n        message: string;\n        cancellable: boolean;\n        retry: number;\n    }) {\n        return this.modalService\n            .fromComponent(OrderStateSelectDialogComponent, {\n                locals: {\n                    nextStates: options.nextStates,\n                    cancellable: options.cancellable,\n                    message: options.message,\n                },\n                closable: false,\n                size: 'md',\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.transitionToStateOrThrow(options.orderId, result);\n                    } else {\n                        if (!options.cancellable) {\n                            throw new Error(`An order state must be selected`);\n                        } else {\n                            return EMPTY;\n                        }\n                    }\n                }),\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\n            );\n    }\n\n    /**\n     * Attempts to get the last state the Order was in before it was transitioned\n     * to the \"Modifying\" state.\n     */\n    private getPreModifyingState(orderId: string) {\n        return this.dataService.order\n            .getOrderHistory(orderId, {\n                filter: {\n                    type: {\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\n                    },\n                },\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n            })\n            .mapSingle(result => result.order)\n            .pipe(\n                map(result => {\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\n                    if (item) {\n                        return item.data.from as string;\n                    } else {\n                        return;\n                    }\n                }),\n            );\n    }\n\n    private transitionToStateOrThrow(orderId: string, state: string) {\n        return this.dataService.order.transitionToState(orderId, state).pipe(\n            map(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        return transitionOrderToState?.state;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState?.transitionError);\n                        throw new Error(transitionOrderToState?.transitionError);\n                }\n            }),\n        );\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-block\">\n        <h4 class=\"card-title\">{{ 'order.add-item-to-order' | translate }}</h4>\n        <vdr-product-selector\n            (productSelected)=\"selectedVariantId$.next($event.productVariantId)\"\n        ></vdr-product-selector>\n    </div>\n    <div class=\"card-block\" *ngIf=\"selectedVariant$ | async as selectedVariant\">\n        <div class=\"variant-details\">\n            <img class=\"mr2\" [src]=\"selectedVariant.featuredAsset || selectedVariant.product.featuredAsset | assetPreview: 32\">\n            <div class=\"details\">\n                <div>{{ selectedVariant?.name }}</div>\n                <div class=\"small\">{{ selectedVariant?.sku }}</div>\n            </div>\n            <div class=\"details ml4\">\n                <div class=\"small\">\n                    {{ 'catalog.stock-on-hand' | translate }}: {{ selectedVariant.stockOnHand }}\n                </div>\n                <div class=\"small\">\n                    {{ 'catalog.stock-allocated' | translate }}: {{ selectedVariant.stockAllocated }}\n                </div>\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <div class=\"details\">\n                <div>{{ selectedVariant?.priceWithTax | localeCurrency: currencyCode }}</div>\n                <div class=\"small\" [title]=\"'order.net-price' | translate\">\n                    {{ selectedVariant?.price | localeCurrency: currencyCode }}\n                </div>\n            </div>\n            <div>\n                <input [disabled]=\"!selectedVariant\" type=\"number\" min=\"0\" [(ngModel)]=\"quantity\" />\n            </div>\n            <button\n                [disabled]=\"!selectedVariant\"\n                class=\"btn btn-small btn-primary\"\n                (click)=\"addItemClick(selectedVariant)\"\n            >\n                {{ 'order.add-item-to-order' | translate }}\n            </button>\n        </div>\n        <ng-container *ngIf=\"orderLineCustomFields.length\">\n            <div class=\"custom-field\" *ngFor=\"let field of orderLineCustomFields\">\n                <vdr-custom-field-control\n                    [compact]=\"true\"\n                    [readonly]=\"false\"\n                    [customField]=\"field\"\n                    [customFieldsFormGroup]=\"customFieldsFormGroup\"\n                ></vdr-custom-field-control>\n            </div>\n        </ng-container>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n    CurrencyCode,\n    CustomFieldConfig,\n    DataService,\n    GetProductVariant,\n    GetProductVariantQuery,\n    ProductSelectorSearchQuery,\n} from '@vendure/admin-ui/core';\nimport { Observable, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-draft-order-variant-selector',\n    templateUrl: './draft-order-variant-selector.component.html',\n    styleUrls: ['./draft-order-variant-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DraftOrderVariantSelectorComponent implements OnInit {\n    @Input() currencyCode: CurrencyCode;\n    @Input() orderLineCustomFields: CustomFieldConfig[];\n    @Output() addItem = new EventEmitter<{ productVariantId: string; quantity: number; customFields: any }>();\n    customFieldsFormGroup = new FormGroup({});\n    selectedVariant$: Observable<GetProductVariantQuery['productVariant']>;\n    selectedVariantId$ = new Subject<string>();\n    quantity = 1;\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.selectedVariant$ = this.selectedVariantId$.pipe(\n            switchMap(id => {\n                if (id) {\n                    return this.dataService.product\n                        .getProductVariant(id)\n                        .mapSingle(({ productVariant }) => productVariant);\n                } else {\n                    return [undefined];\n                }\n            }),\n        );\n        for (const customField of this.orderLineCustomFields) {\n            this.customFieldsFormGroup.addControl(customField.name, new FormControl(''));\n        }\n    }\n\n    addItemClick(selectedVariant: GetProductVariantQuery['productVariant']) {\n        if (selectedVariant) {\n            this.addItem.emit({\n                productVariantId: selectedVariant.id,\n                quantity: this.quantity,\n                customFields: this.orderLineCustomFields.length\n                    ? this.customFieldsFormGroup.value\n                    : undefined,\n            });\n            this.selectedVariantId$.next(undefined);\n            this.customFieldsFormGroup.reset();\n        }\n    }\n}\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\n</span>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-line-refunds',\n    templateUrl: './line-refunds.component.html',\n    styleUrls: ['./line-refunds.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineRefundsComponent {\n    @Input() line: OrderDetail.Lines;\n    @Input() payments: OrderDetail.Payments[];\n\n    getRefundedCount(): number {\n        const refunds =\n            this.payments?.reduce(\n                (all, payment) => [...all, ...payment.refunds],\n                [] as OrderDetail.Refunds[],\n            ) ?? [];\n        return this.line.items.filter(i => {\n            if (i.refundId === null && !i.cancelled) {\n                return false;\n            }\n            if (i.refundId) {\n                const refund = refunds.find(r => r.id === i.refundId);\n                if (refund?.state === 'Failed') {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        }).length;\n    }\n}\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\n        <clr-icon\n            *ngIf=\"fulfillmentStatus === 'partial'\"\n            class=\"item-partially-fulfilled\"\n            shape=\"check-circle\"\n        ></clr-icon>\n        <clr-icon\n            *ngIf=\"fulfillmentStatus === 'none'\"\n            class=\"item-not-fulfilled\"\n            shape=\"exclamation-circle\"\n        ></clr-icon>\n    </button>\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\n            {{ 'order.line-fulfillment-all' | translate }}\n        </label>\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\n            {{\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\n            }}\n        </label>\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\n            {{ 'order.line-fulfillment-none' | translate }}\n        </label>\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\n            <div class=\"fulfillment-title\">\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\n                    'order.item-count' | translate: { count: item.count }\n                }})\n            </div>\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\n                {{ item.fulfillment.method }}\n            </vdr-labeled-data>\n            <vdr-labeled-data\n                *ngIf=\"item.fulfillment.trackingCode\"\n                [label]=\"'order.tracking-code' | translate\"\n            >\n                {{ item.fulfillment.trackingCode }}\n            </vdr-labeled-data>\n        </div>\n    </vdr-dropdown-menu>\n</vdr-dropdown>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\n\n@Component({\n    selector: 'vdr-line-fulfillment',\n    templateUrl: './line-fulfillment.component.html',\n    styleUrls: ['./line-fulfillment.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineFulfillmentComponent implements OnChanges {\n    @Input() line: OrderDetail.Lines;\n    @Input() orderState: string;\n    fulfilledCount = 0;\n    fulfillmentStatus: FulfillmentStatus;\n    fulfillments: Array<{\n        count: number;\n        fulfillment: NonNullable<OrderDetailFragment['fulfillments']>[number];\n    }> = [];\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.line) {\n            this.fulfilledCount = this.getDeliveredCount(this.line);\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\n            this.fulfillments = this.getFulfillments(this.line);\n        }\n    }\n\n    /**\n     * Returns the number of items in an OrderLine which are fulfilled.\n     */\n    private getDeliveredCount(line: OrderDetail.Lines): number {\n        return (\n            line.fulfillments?.reduce(\n                (sum, fulfillment) =>\n                    sum + (fulfillment.summary.find(s => s.orderLine.id === line.id)?.quantity ?? 0),\n                0,\n            ) ?? 0\n        );\n    }\n\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\n        if (fulfilledCount === lineQuantity) {\n            return 'full';\n        }\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\n            return 'partial';\n        }\n        return 'none';\n    }\n\n    private getFulfillments(\n        line: OrderDetail.Lines,\n    ): Array<{ count: number; fulfillment: NonNullable<OrderDetailFragment['fulfillments']>[number] }> {\n        return (\n            line.fulfillments?.map(fulfillment => {\n                const summaryLine = fulfillment.summary.find(s => s.orderLine.id === line.id);\n                return {\n                    count: summaryLine?.quantity ?? 0,\n                    fulfillment,\n                };\n            }) ?? []\n        );\n    }\n}\n","<table class=\"order-table table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'order.product-name' | translate }}</th>\n            <th>{{ 'order.product-sku' | translate }}</th>\n            <th>Is Cone</th>\n            <th>{{ 'order.quantity' | translate }}</th>\n            <th>{{ 'order.total' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngFor=\"let line of order.lines\">\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\n                <td class=\"align-middle thumb\">\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle unit-price\">\n                    {{ line.customFields.isCone ? 'Yes' : 'No' }}\n                    <!-- <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                    </div> -->\n                </td>\n                <td class=\"align-middle quantity\">\n                    <ng-container *ngIf=\"!isDraft; else draft\">\n                        {{ line.quantity }}\n                    </ng-container>\n                    <ng-template #draft>\n                        <div class=\"flex\">\n                            <input\n                                class=\"draft-qty\"\n                                type=\"number\"\n                                min=\"0\"\n                                #qtyInput\n                                [value]=\"line.quantity\"\n                                (blur)=\"draftInputBlur(line, qtyInput.valueAsNumber)\"\n                            />\n                            <button class=\"icon-button\" (click)=\"remove.emit({ lineId: line.id })\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\n                </td>\n                <td class=\"align-middle total\">\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\n                    </div>\n\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\n                        <vdr-dropdown *ngIf=\"discounts.length\">\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\n                                {{ 'order.promotions-applied' | translate }}\n                            </div>\n                            <vdr-dropdown-menu>\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\n                                        discount.description\n                                    }}</a>\n                                    <div class=\"promotion-amount\">\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </ng-container>\n                </td>\n            </tr>\n            <!-- <ng-container *ngIf=\"customFieldsForLine[line.id] as customFields\">\n                <tr *ngIf=\"customFields.length\">\n                    <td colspan=\"6\" class=\"custom-fields-row\">\n                        <div class=\"order-line-custom-fields\">\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\n                                <vdr-custom-field-control\n                                    [compact]=\"true\"\n                                    [readonly]=\"true\"\n                                    [customField]=\"field.config\"\n                                    [customFieldsFormGroup]=\"field.formGroup\"\n                                ></vdr-custom-field-control>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </ng-container> -->\n        </ng-container>\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n            <td class=\"align-middle\" colspan=\"2\"></td>\n            <td class=\"align-middle total\">\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <ng-container *ngFor=\"let discount of order.discounts\">\n            <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\n                <td colspan=\"5\" class=\"left clr-align-middle\">\n                    <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\n                    <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\n                        couponCode\n                    }}</vdr-chip>\n                </td>\n                <td class=\"clr-align-middle\">\n                    {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ discount.amount | localeCurrency: order.currencyCode }}\n                    </div>\n                </td>\n            </tr>\n        </ng-container>\n        <tr class=\"sub-total\">\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\n            <td colspan=\"4\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"shipping\">\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\n            <td class=\"clr-align-middle\">{{ getShippingNames(order) }}</td>\n            <td colspan=\"3\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"total\">\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\n            <td colspan=\"4\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.total | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AdjustmentType, CustomFieldConfig, OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-table',\n    templateUrl: './order-table.component.html',\n    styleUrls: ['./order-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderTableComponent implements OnInit {\n    @Input() order: OrderDetail.Fragment;\n    @Input() orderLineCustomFields: CustomFieldConfig[];\n    @Input() isDraft = false;\n    @Output() adjust = new EventEmitter<{ lineId: string; quantity: number }>();\n    @Output() remove = new EventEmitter<{ lineId: string }>();\n    orderLineCustomFieldsVisible = false;\n    customFieldsForLine: {\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: FormGroup; value: any }>;\n    } = {};\n\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\n    }\n\n    get showElided(): boolean {\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\n    }\n\n    ngOnInit(): void {\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\n        this.getLineCustomFields();\n    }\n\n    draftInputBlur(line: OrderDetailFragment['lines'][number], quantity: number) {\n        if (line.quantity !== quantity) {\n            this.adjust.emit({ lineId: line.id, quantity });\n        }\n    }\n\n    toggleOrderLineCustomFields() {\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\n    }\n\n    getLineDiscounts(line: OrderDetail.Lines) {\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\n    }\n\n    private getLineCustomFields() {\n        for (const line of this.order.lines) {\n            const formGroup = new FormGroup({});\n            const result = this.orderLineCustomFields\n                .map(config => {\n                    const value = (line as any).customFields[config.name];\n                    formGroup.addControl(config.name, new FormControl(value));\n                    return {\n                        config,\n                        formGroup,\n                        value,\n                    };\n                })\n                .filter(field => {\n                    return this.orderLineCustomFieldsVisible ? true : field.value != null;\n                });\n            this.customFieldsForLine[line.id] = result;\n        }\n    }\n\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\n        const id = promotion.adjustmentSource.split(':')[1];\n        return ['/marketing', 'promotions', id];\n    }\n\n    getCouponCodeForAdjustment(\n        order: OrderDetail.Fragment,\n        promotionAdjustment: OrderDetail.Discounts,\n    ): string | undefined {\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\n        const promotion = order.promotions.find(p => p.id === id);\n        if (promotion) {\n            return promotion.couponCode || undefined;\n        }\n    }\n\n    getShippingNames(order: OrderDetail.Fragment) {\n        if (order.shippingLines.length) {\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\n        } else {\n            return '';\n        }\n    }\n}\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\n    <div class=\"card-header\">\n        {{ 'common.custom-fields' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\n            <vdr-tabbed-custom-fields\n                entityName=\"Order\"\n                [customFields]=\"customFieldsConfig\"\n                [customFieldsFormGroup]=\"customFieldForm\"\n                [readonly]=\"!editable\"\n                [compact]=\"true\"\n            ></vdr-tabbed-custom-fields>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\n            <clr-icon shape=\"pencil\"></clr-icon>\n            {{ 'common.edit' | translate }}\n        </button>\n        <button\n            class=\"btn btn-sm btn-primary\"\n            (click)=\"onUpdateClick()\"\n            *ngIf=\"editable\"\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\n        >\n            <clr-icon shape=\"check\"></clr-icon>\n            {{ 'common.update' | translate }}\n        </button>\n        <button\n            class=\"btn btn-sm btn-secondary\"\n            (click)=\"onCancelClick()\"\n            *ngIf=\"editable\"\n        >\n            <clr-icon shape=\"times\"></clr-icon>\n            {{ 'common.cancel' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { CustomFieldConfig, ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-custom-fields-card',\n    templateUrl: './order-custom-fields-card.component.html',\n    styleUrls: ['./order-custom-fields-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderCustomFieldsCardComponent implements OnInit {\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\n    @Input() customFieldValues: { [name: string]: any } = {};\n    @Output() updateClick = new EventEmitter<any>();\n    customFieldForm: FormGroup;\n    editable = false;\n    constructor(private formBuilder: FormBuilder, private modalService: ModalService) {}\n\n    ngOnInit() {\n        this.customFieldForm = this.formBuilder.group({});\n        for (const field of this.customFieldsConfig) {\n            this.customFieldForm.addControl(\n                field.name,\n                this.formBuilder.control(this.customFieldValues[field.name]),\n            );\n        }\n    }\n\n    onUpdateClick() {\n        this.updateClick.emit(this.customFieldForm.value);\n        this.customFieldForm.markAsPristine();\n        this.editable = false;\n    }\n\n    onCancelClick() {\n        if (this.customFieldForm.dirty) {\n            this.modalService\n                .dialog({\n                    title: _('catalog.confirm-cancel'),\n                    buttons: [\n                        { type: 'secondary', label: _('common.keep-editing') },\n                        { type: 'danger', label: _('common.discard-changes'), returnValue: true },\n                    ],\n                })\n                .subscribe(result => {\n                    if (result) {\n                        this.customFieldForm.reset();\n                        this.customFieldForm.markAsPristine();\n                        this.editable = false;\n                    }\n                });\n        } else {\n            this.editable = false;\n        }\n    }\n}\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"completeOrder()\"\n            [disabled]=\"!order.customer || !order.lines.length || !order.shippingLines.length\"\n        >\n            <clr-icon shape=\"check\"></clr-icon>\n            {{ 'order.complete-draft-order' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"deleteOrder()\">\n                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                    {{ 'order.delete-draft-order' | translate }}\n                </button>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <vdr-draft-order-variant-selector\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n                [currencyCode]=\"order.currencyCode\"\n                (addItem)=\"addItemToOrder($event)\"\n            ></vdr-draft-order-variant-selector>\n            <vdr-order-table\n                [order]=\"order\"\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n                [isDraft]=\"true\"\n                (adjust)=\"adjustOrderLine($event)\"\n                (remove)=\"removeOrderLine($event)\"\n            ></vdr-order-table>\n            <div class=\"flex\">\n                <button\n                    *ngIf=\"order.couponCodes.length === 0 && !displayCouponCodeInput\"\n                    class=\"btn btn-link btn-sm mr2\"\n                    (click)=\"displayCouponCodeInput = !displayCouponCodeInput\"\n                >\n                    {{ 'order.set-coupon-codes' | translate }}\n                </button>\n                <div *ngIf=\"order.couponCodes.length || displayCouponCodeInput\">\n                    <label>{{ 'order.set-coupon-codes' | translate }}</label>\n                    <vdr-coupon-code-selector\n                        [couponCodes]=\"order.couponCodes\"\n                        (addCouponCode)=\"applyCouponCode($event)\"\n                        (removeCouponCode)=\"removeCouponCode($event)\"\n                    ></vdr-coupon-code-selector>\n                </div>\n            </div>\n            <ng-container *ngIf=\"order.taxSummary.length\">\n                <h4>{{ 'order.tax-summary' | translate }}</h4>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th>{{ 'common.description' | translate }}</th>\n                            <th>{{ 'order.tax-rate' | translate }}</th>\n                            <th>{{ 'order.tax-base' | translate }}</th>\n                            <th>{{ 'order.tax-total' | translate }}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let row of order.taxSummary\">\n                            <td>{{ row.description }}</td>\n                            <td>{{ row.taxRate / 100 | percent }}</td>\n                            <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\n                            <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </ng-container>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <clr-icon *ngIf=\"!order.customer\" shape=\"unknown-status\" class=\"is-warning\"></clr-icon>\n                    <clr-icon *ngIf=\"order.customer\" shape=\"check\" class=\"is-success\"></clr-icon>\n                    {{ 'order.customer' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-customer-label\n                            class=\"block mb2\"\n                            *ngIf=\"order.customer\"\n                            [customer]=\"order.customer\"\n                        ></vdr-customer-label>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setCustomer()\">\n                            {{ 'order.set-customer-for-order' | translate }}\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-block\">\n                    <h4 class=\"card-title\">\n                        <clr-icon\n                            *ngIf=\"!order.billingAddress.streetLine1\"\n                            shape=\"unknown-status\"\n                            class=\"is-warning\"\n                        ></clr-icon>\n                        <clr-icon\n                            *ngIf=\"order.billingAddress.streetLine1\"\n                            shape=\"check\"\n                            class=\"is-success\"\n                        ></clr-icon>\n                        {{ 'order.billing-address' | translate }}\n                    </h4>\n                    <div class=\"card-text\">\n                        <vdr-formatted-address\n                            class=\"block mb2\"\n                            *ngIf=\"order.billingAddress\"\n                            [address]=\"order.billingAddress\"\n                        ></vdr-formatted-address>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setBillingAddress()\">\n                            {{ 'order.set-billing-address' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <clr-icon\n                        *ngIf=\"!order.shippingAddress.streetLine1 || !order.shippingLines.length\"\n                        shape=\"unknown-status\"\n                        class=\"is-warning\"\n                    ></clr-icon>\n                    <clr-icon\n                        *ngIf=\"order.shippingAddress.streetLine1 && order.shippingLines.length\"\n                        shape=\"check\"\n                        class=\"is-success\"\n                    ></clr-icon>\n                    {{ 'order.shipping' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-formatted-address\n                            class=\"block mb2\"\n                            *ngIf=\"order.shippingAddress\"\n                            [address]=\"order.shippingAddress\"\n                        ></vdr-formatted-address>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setShippingAddress()\">\n                            {{ 'order.set-shipping-address' | translate }}\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <div *ngFor=\"let shippingLine of order.shippingLines\">\n                            {{ shippingLine.shippingMethod.name }}\n                        </div>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setShippingMethod()\">\n                            {{ 'order.set-shipping-method' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <vdr-order-custom-fields-card\n                [customFieldsConfig]=\"customFields\"\n                [customFieldValues]=\"order.customFields\"\n                (updateClick)=\"updateCustomFields($event)\"\n            ></vdr-order-custom-fields-card>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    DraftOrderEligibleShippingMethodsQuery,\n    ModalService,\n    NotificationService,\n    Order,\n    OrderDetail,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable, Subject } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport { SelectAddressDialogComponent } from '../select-address-dialog/select-address-dialog.component';\nimport { SelectCustomerDialogComponent } from '../select-customer-dialog/select-customer-dialog.component';\nimport { SelectShippingMethodDialogComponent } from '../select-shipping-method-dialog/select-shipping-method-dialog.component';\n\n@Component({\n    selector: 'vdr-draft-order-detail',\n    templateUrl: './draft-order-detail.component.html',\n    styleUrls: ['./draft-order-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DraftOrderDetailComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy\n{\n    detailForm = new FormGroup({});\n    eligibleShippingMethods$: Observable<\n        DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder']\n    >;\n    nextStates$: Observable<string[]>;\n    fetchHistory = new Subject<void>();\n    customFields: CustomFieldConfig[];\n    orderLineCustomFields: CustomFieldConfig[];\n    displayCouponCodeInput = false;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    ngOnInit() {\n        this.init();\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.eligibleShippingMethods$ = this.entity$.pipe(\n            switchMap(order =>\n                this.dataService.order\n                    .getDraftOrderEligibleShippingMethods(order.id)\n                    .mapSingle(\n                        ({ eligibleShippingMethodsForDraftOrder }) => eligibleShippingMethodsForDraftOrder,\n                    ),\n            ),\n        );\n        this.customFields = this.getCustomFieldConfig('Order');\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    addItemToOrder(event: { productVariantId: string; quantity: number; customFields: any }) {\n        this.dataService.order.addItemToDraftOrder(this.id, event).subscribe(result => {\n            if (result.addItemToDraftOrder.__typename !== 'Order') {\n                this.notificationService.error((result.addItemToDraftOrder as any).message);\n            }\n        });\n    }\n\n    adjustOrderLine(event: { lineId: string; quantity: number }) {\n        this.dataService.order\n            .adjustDraftOrderLine(this.id, { orderLineId: event.lineId, quantity: event.quantity })\n            .subscribe(result => {\n                if (result.adjustDraftOrderLine.__typename !== 'Order') {\n                    this.notificationService.error((result.adjustDraftOrderLine as any).message);\n                }\n            });\n    }\n\n    removeOrderLine(event: { lineId: string }) {\n        this.dataService.order.removeDraftOrderLine(this.id, event.lineId).subscribe(result => {\n            if (result.removeDraftOrderLine.__typename !== 'Order') {\n                this.notificationService.error((result.removeDraftOrderLine as any).message);\n            }\n        });\n    }\n\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\n        if (!orderAddress) {\n            return [];\n        }\n        return Object.values(orderAddress)\n            .filter(val => val !== 'OrderAddress')\n            .filter(line => !!line);\n    }\n\n    setCustomer() {\n        this.modalService.fromComponent(SelectCustomerDialogComponent).subscribe(result => {\n            if (this.hasId(result)) {\n                this.dataService.order\n                    .setCustomerForDraftOrder(this.id, { customerId: result.id })\n                    .subscribe();\n            } else if (result) {\n                this.dataService.order.setCustomerForDraftOrder(this.id, { input: result }).subscribe();\n            }\n        });\n    }\n\n    setShippingAddress() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(SelectAddressDialogComponent, {\n                        locals: {\n                            customerId: order.customer?.id,\n                            currentAddress: order.shippingAddress ?? undefined,\n                        },\n                    });\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.dataService.order.setDraftOrderShippingAddress(this.id, result).subscribe();\n                }\n            });\n    }\n\n    setBillingAddress() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(SelectAddressDialogComponent, {\n                        locals: {\n                            customerId: order.customer?.id,\n                            currentAddress: order.billingAddress ?? undefined,\n                        },\n                    });\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.dataService.order.setDraftOrderBillingAddress(this.id, result).subscribe();\n                }\n            });\n    }\n\n    applyCouponCode(couponCode: string) {\n        this.dataService.order.applyCouponCodeToDraftOrder(this.id, couponCode).subscribe();\n    }\n\n    removeCouponCode(couponCode: string) {\n        this.dataService.order.removeCouponCodeFromDraftOrder(this.id, couponCode).subscribe();\n    }\n\n    setShippingMethod() {\n        combineLatest(this.entity$, this.eligibleShippingMethods$)\n            .pipe(\n                take(1),\n                switchMap(([order, methods]) =>\n                    this.modalService.fromComponent(SelectShippingMethodDialogComponent, {\n                        locals: {\n                            eligibleShippingMethods: methods,\n                            currencyCode: order.currencyCode,\n                            currentSelectionId: order.shippingLines?.[0]?.shippingMethod.id,\n                        },\n                    }),\n                ),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.dataService.order.setDraftOrderShippingMethod(this.id, result).subscribe();\n                }\n            });\n    }\n\n    updateCustomFields(customFieldsValue: any) {\n        this.dataService.order\n            .updateOrderCustomFields({\n                id: this.id,\n                customFields: customFieldsValue,\n            })\n            .subscribe();\n    }\n\n    deleteOrder() {\n        this.dataService.order.deleteDraftOrder(this.id).subscribe(({ deleteDraftOrder }) => {\n            if (deleteDraftOrder.result === DeletionResult.DELETED) {\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Order',\n                });\n                this.router.navigate(['/orders']);\n            } else if (deleteDraftOrder.message) {\n                this.notificationService.error(deleteDraftOrder.message);\n            }\n        });\n    }\n\n    completeOrder() {\n        this.dataService.order\n            .transitionToState(this.id, 'ArrangingPayment')\n            .subscribe(({ transitionOrderToState }) => {\n                if (transitionOrderToState?.__typename === 'Order') {\n                    this.router.navigate(['/orders', this.id]);\n                } else if (transitionOrderToState?.__typename === 'OrderStateTransitionError') {\n                    this.notificationService.error(transitionOrderToState.transitionError);\n                }\n            });\n    }\n\n    private hasId<T extends { id: string }>(input: T | any): input is { id: string } {\n        return typeof input === 'object' && !!input.id;\n    }\n\n    protected setFormValues(entity: Order.Fragment): void {\n        // empty\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\n\n<div class=\"fulfillment-wrapper\">\n    <div class=\"order-table\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                    <th>{{ 'order.fulfill' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let line of order.lines\"\n                class=\"order-line\"\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\n            >\n                <td class=\"align-middle thumb\">\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\n                        type=\"number\"\n                        [max]=\"fulfillmentQuantities[line.id].max\"\n                        min=\"0\"\n                    />\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"shipping-details\">\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\n        <vdr-configurable-input\n            [operationDefinition]=\"fulfillmentHandlerDef\"\n            [operation]=\"fulfillmentHandler\"\n            [formControl]=\"fulfillmentHandlerControl\"\n            [removable]=\"false\"\n        ></vdr-configurable-input>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\n        {{ 'order.create-fulfillment' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    configurableOperationValueIsValid,\n    DataService,\n    Dialog,\n    FulfillOrderInput,\n    GlobalFlag,\n    OrderDetail,\n    OrderDetailFragment,\n    toConfigurableOperationInput,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-fulfill-order-dialog',\n    templateUrl: './fulfill-order-dialog.component.html',\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\n    resolveWith: (result?: FulfillOrderInput) => void;\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\n    fulfillmentHandler: ConfigurableOperation;\n    fulfillmentHandlerControl = new FormControl();\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\n\n    // Provided by modalService.fromComponent() call\n    order: OrderDetailFragment;\n\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\n                return {\n                    ...result,\n                    [line.id]: { fulfillCount, max: fulfillCount },\n                };\n            }, {});\n            this.changeDetector.markForCheck();\n        });\n\n        this.dataService.shippingMethod\n            .getShippingMethodOperations()\n            .mapSingle(data => data.fulfillmentHandlers)\n            .subscribe(handlers => {\n                this.fulfillmentHandlerDef =\n                    handlers.find(\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\n                    ) || handlers[0];\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\n                this.changeDetector.markForCheck();\n            });\n    }\n\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\n        const { trackInventory, stockOnHand } = line.productVariant;\n        const effectiveTracInventory =\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\n\n        const unfulfilledCount = this.getUnfulfilledCount(line);\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\n    }\n\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\n        const fulfilled =\n            line.fulfillments\n                ?.map(f => f.summary)\n                .flat()\n                .filter(row => row.orderLine.id === line.id)\n                .reduce((sum, row) => sum + row.quantity, 0) ?? 0;\n        return line.quantity - fulfilled;\n    }\n\n    canSubmit(): boolean {\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\n            (total, { fulfillCount }) => total + fulfillCount,\n            0,\n        );\n        const formIsValid =\n            configurableOperationValueIsValid(\n                this.fulfillmentHandlerDef,\n                this.fulfillmentHandlerControl.value,\n            ) && this.fulfillmentHandlerControl.valid;\n        return formIsValid && 0 < totalCount;\n    }\n\n    select() {\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\n            orderLineId,\n            quantity: fulfillCount,\n        }));\n        this.resolveWith({\n            lines,\n            handler: toConfigurableOperationInput(\n                this.fulfillmentHandler,\n                this.fulfillmentHandlerControl.value,\n            ),\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-fulfillment-state-label',\n    templateUrl: './fulfillment-state-label.component.html',\n    styleUrls: ['./fulfillment-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Pending':\n            case 'Shipped':\n                return 'warning';\n            case 'Delivered':\n                return 'success';\n            case 'Cancelled':\n                return 'error';\n        }\n    }\n}\n","<div class=\"items-list\">\n    <ul>\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\n            <div class=\"quantity\">{{ item.quantity }}</div>\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\n            {{ item.name }}\n        </li>\n    </ul>\n</div>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-simple-item-list',\n    templateUrl: './simple-item-list.component.html',\n    styleUrls: ['./simple-item-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SimpleItemListComponent {\n    @Input() items: Array<{ name: string; quantity: number }>;\n}\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\n    {{ fulfillment?.method }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\n    {{ fulfillment?.trackingCode }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\n</vdr-labeled-data>\n<ng-container *ngFor=\"let customField of customFieldConfig\">\n    <vdr-custom-field-control\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\n        [readonly]=\"true\"\n        [compact]=\"true\"\n        [customField]=\"customField\"\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\n    ></vdr-custom-field-control>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, OrderDetail, ServerConfigService } from '@vendure/admin-ui/core';\nimport { isObject } from '@vendure/common/lib/shared-utils';\n\n@Component({\n    selector: 'vdr-fulfillment-detail',\n    templateUrl: './fulfillment-detail.component.html',\n    styleUrls: ['./fulfillment-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\n    @Input() fulfillmentId: string;\n    @Input() order: OrderDetail.Fragment;\n\n    customFieldConfig: CustomFieldConfig[] = [];\n    customFieldFormGroup = new FormGroup({});\n\n    constructor(private serverConfigService: ServerConfigService) {}\n\n    ngOnInit() {\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.buildCustomFieldsFormGroup();\n    }\n\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\n    }\n\n    get items(): Array<{ name: string; quantity: number }> {\n        return (\n            this.fulfillment?.summary.map(row => {\n                return {\n                    name:\n                        this.order.lines.find(line => line.id === row.orderLine.id)?.productVariant.name ??\n                        '',\n                    quantity: row.quantity,\n                };\n            }) ?? []\n        );\n    }\n\n    buildCustomFieldsFormGroup() {\n        const customFields = (this.fulfillment as any).customFields;\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\n            this.customFieldFormGroup.addControl(fieldDef.name, new FormControl(customFields[fieldDef.name]));\n        }\n    }\n\n    customFieldIsObject(customField: unknown) {\n        return Array.isArray(customField) || isObject(customField);\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header fulfillment-header\">\n        <div>{{ 'order.fulfillment' | translate }}</div>\n        <div class=\"fulfillment-state\">\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <vdr-fulfillment-detail\n            *ngIf=\"!!fulfillment\"\n            [fulfillmentId]=\"fulfillment?.id\"\n            [order]=\"order\"\n        ></vdr-fulfillment-detail>\n    </div>\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\n            </button>\n        </ng-container>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\n                    <button\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionState.emit(nextState)\"\n                    >\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                            {{ 'order.cancel-fulfillment' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-fulfillment-card',\n    templateUrl: './fulfillment-card.component.html',\n    styleUrls: ['./fulfillment-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentCardComponent {\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\n    @Input() order: OrderDetail.Fragment;\n    @Output() transitionState = new EventEmitter<string>();\n\n    nextSuggestedState(): string | undefined {\n        if (!this.fulfillment) {\n            return;\n        }\n        const { nextStates } = this.fulfillment;\n        const namedStateOrDefault = (targetState: string) =>\n            nextStates.includes(targetState) ? targetState : nextStates[0];\n        switch (this.fulfillment?.state) {\n            case 'Pending':\n                return namedStateOrDefault('Shipped');\n            case 'Shipped':\n                return namedStateOrDefault('Delivered');\n            default:\n                return nextStates.find(s => s !== 'Cancelled');\n        }\n    }\n\n    nextOtherStates(): string[] {\n        if (!this.fulfillment) {\n            return [];\n        }\n        const suggested = this.nextSuggestedState();\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\n    }\n}\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\n    modification.note\n}}</vdr-labeled-data>\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\n    {{ getSurcharge(surcharge.id)?.description }}\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\n>\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\n</vdr-labeled-data>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-modification-detail',\n    templateUrl: './modification-detail.component.html',\n    styleUrls: ['./modification-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModificationDetailComponent implements OnChanges {\n    @Input() order: OrderDetailFragment;\n    @Input() modification: OrderDetail.Modifications;\n    private addedItems = new Map<OrderDetail.Lines, number>();\n    private removedItems = new Map<OrderDetail.Lines, number>();\n\n    ngOnChanges(): void {\n        const { added, removed } = this.getModifiedLines();\n        this.addedItems = added;\n        this.removedItems = removed;\n    }\n\n    getSurcharge(id: string) {\n        return this.order.surcharges.find(m => m.id === id);\n    }\n\n    getAddedItems() {\n        return [...this.addedItems.entries()].map(([line, count]) => {\n            return { name: line.productVariant.name, quantity: count };\n        });\n    }\n\n    getRemovedItems() {\n        return [...this.removedItems.entries()].map(([line, count]) => {\n            return { name: line.productVariant.name, quantity: count };\n        });\n    }\n\n    private getModifiedLines() {\n        const added = new Map<OrderDetail.Lines, number>();\n        const removed = new Map<OrderDetail.Lines, number>();\n        for (const _item of this.modification.orderItems || []) {\n            const result = this.getOrderLineAndItem(_item.id);\n            if (result) {\n                const { line, item } = result;\n                if (item.cancelled) {\n                    const count = removed.get(line) ?? 0;\n                    removed.set(line, count + 1);\n                } else {\n                    const count = added.get(line) ?? 0;\n                    added.set(line, count + 1);\n                }\n            }\n        }\n        return { added, removed };\n    }\n\n    private getOrderLineAndItem(itemId: string) {\n        for (const line of this.order.lines) {\n            const item = line.items.find(i => i.id === itemId);\n            if (item) {\n                return { line, item };\n            }\n        }\n    }\n}\n","export const NODE_HEIGHT = 72;\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\n    <div\n        class=\"node\"\n        [class.active-target]=\"activeTarget$ | async\"\n    >\n        {{ node.name | stateI18nToken | translate }}\n    </div>\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\n        <div class=\"cancelled-edge\">\n        </div>\n        <clr-icon shape=\"dot-circle\"></clr-icon>\n        <div class=\"cancelled-node\">\n            {{ cancelledState | stateI18nToken | translate }}\n        </div>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NODE_HEIGHT } from './constants';\nimport { StateNode } from './types';\n\n@Component({\n    selector: 'vdr-order-process-node',\n    templateUrl: './order-process-node.component.html',\n    styleUrls: ['./order-process-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessNodeComponent implements OnChanges {\n    @Input() node: StateNode;\n    @Input() index: number;\n    @Input() active: boolean;\n    active$ = new BehaviorSubject<boolean>(false);\n    activeTarget$ = new BehaviorSubject<boolean>(false);\n    isCancellable = false;\n    // We use a class field here to prevent the\n    // i18n extractor from extracting a \"Cancelled\" key\n    cancelledState = 'Cancelled';\n\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\n        if (changes.active) {\n            this.active$.next(this.active);\n        }\n    }\n\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\n        const nodeHeight =\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\n        return {\n            x: 10,\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\n        };\n    }\n\n    getStyle() {\n        const pos = this.getPos();\n        return {\n            'top.px': pos.y,\n            'left.px': pos.x,\n        };\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OrderProcessNodeComponent } from './order-process-node.component';\n\n@Component({\n    selector: 'vdr-order-process-edge',\n    templateUrl: './order-process-edge.component.html',\n    styleUrls: ['./order-process-edge.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessEdgeComponent implements OnInit {\n    @Input() from: OrderProcessNodeComponent;\n    @Input() to: OrderProcessNodeComponent;\n    @Input() index: number;\n    active$: Observable<boolean>;\n\n    ngOnInit() {\n        this.active$ = this.from.active$\n            .asObservable()\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\n    }\n\n    getStyle() {\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\n        const dX = Math.abs(startPos.x - endPos.x);\n        const dY = Math.abs(startPos.y - endPos.y);\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\n        return {\n            'top.px': startPos.y,\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\n            'height.px': length,\n            'width.px': 1,\n            ...(direction === 'up'\n                ? {\n                      transform: 'rotateZ(180deg)',\n                      'transform-origin': 'top',\n                  }\n                : {}),\n        };\n    }\n}\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\n    <vdr-order-process-node\n        [node]=\"state\"\n        [index]=\"i\"\n        [active]=\"(activeState$ | async) === state.name\"\n        (mouseenter)=\"onMouseOver(state.name)\"\n        (mouseleave)=\"onMouseOut()\"\n    ></vdr-order-process-node>\n</ng-container>\n<ng-container *ngFor=\"let edge of edges\">\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\n</ng-container>\n","<div\n    [attr.data-from]=\"from.node.name\"\n    [attr.data-to]=\"to.node.name\"\n    [ngStyle]=\"getStyle()\"\n    [class.active]=\"active$ | async\"\n    class=\"edge\">\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    OnChanges,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    ViewChildren,\n} from '@angular/core';\nimport { OrderProcessState } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { NODE_HEIGHT } from './constants';\nimport { OrderProcessNodeComponent } from './order-process-node.component';\nimport { StateNode } from './types';\n\n@Component({\n    selector: 'vdr-order-process-graph',\n    templateUrl: './order-process-graph.component.html',\n    styleUrls: ['./order-process-graph.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\n    @Input() states: OrderProcessState[];\n    @Input() initialState?: string;\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\n    activeState$: Observable<string | undefined>;\n    nodes: StateNode[] = [];\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\n\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    @HostBinding('style.height.px')\n    get outerHeight(): number {\n        return this.nodes.length * NODE_HEIGHT;\n    }\n\n    ngOnInit() {\n        this.setActiveState$.next(this.initialState);\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.populateNodes();\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => this.populateEdges());\n    }\n\n    onMouseOver(stateName: string) {\n        this.setActiveState$.next(stateName);\n    }\n\n    onMouseOut() {\n        this.setActiveState$.next(this.initialState);\n    }\n\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\n        if (this.nodeComponents) {\n            return this.nodeComponents.find((n) => n.node.name === state);\n        }\n    }\n\n    private populateNodes() {\n        const stateNodeMap = new Map<string, StateNode>();\n        for (const state of this.states) {\n            stateNodeMap.set(state.name, {\n                name: state.name,\n                to: [],\n            });\n        }\n\n        for (const [name, stateNode] of stateNodeMap.entries()) {\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\n            for (const target of targets) {\n                const targetNode = stateNodeMap.get(target);\n                if (targetNode) {\n                    stateNode.to.push(targetNode);\n                }\n            }\n        }\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\n    }\n\n    private populateEdges() {\n        for (const node of this.nodes) {\n            const nodeCmp = this.getNodeFor(node.name);\n            let index = 0;\n            for (const to of node.to) {\n                const toCmp = this.getNodeFor(to.name);\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\n                    this.edges.push({\n                        to: toCmp,\n                        from: nodeCmp,\n                        index,\n                    });\n                    index++;\n                }\n            }\n        }\n        this.edges = [...this.edges];\n        this.changeDetector.markForCheck();\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\n\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n    CancelOrderInput,\n    DataService,\n    Dialog,\n    OrderProcessState,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-order-process-graph-dialog',\n    templateUrl: './order-process-graph-dialog.component.html',\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\n    activeState: string;\n    states: OrderProcessState[] = [];\n    constructor(private serverConfigService: ServerConfigService) {}\n\n    ngOnInit(): void {\n        this.states = this.serverConfigService.getOrderProcessStates();\n    }\n\n    resolveWith: (result: void | undefined) => void;\n}\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\n\n<div class=\"refund-wrapper\">\n    <div class=\"order-table\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.unit-price' | translate }}</th>\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.refund' | translate }}</th>\n                    <th>{{ 'order.cancel' | translate }}</th>\n                </tr>\n            </thead>\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\n                <td class=\"align-middle thumb\">\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">\n                    {{ line.quantity }}\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                </td>\n                <td class=\"align-middle quantity\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class=\"align-middle quantity\">\n                    <div class=\"prorated-wrapper\">\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\n                        <ng-container *ngIf=\"line.discounts as discounts\">\n                            <vdr-dropdown *ngIf=\"discounts.length\">\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\n                                </div>\n                                <vdr-dropdown-menu>\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\n                                        {{ discount.description }}\n                                        <div class=\"promotion-amount\">\n                                            {{\n                                                discount.amount / 100 / line.quantity\n                                                    | number: '1.0-2'\n                                                    | currency: order.currencyCode\n                                            }}\n                                        </div>\n                                    </div>\n                                </vdr-dropdown-menu>\n                            </vdr-dropdown>\n                        </ng-container>\n                    </div>\n                </td>\n                <td class=\"align-middle quantity-col\">\n                    <input\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\n                        type=\"number\"\n                        [max]=\"line.quantity\"\n                        min=\"0\"\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\n                    />\n                </td>\n                <td class=\"align-middle\">\n                    <div class=\"cancel-checkbox-wrapper\">\n                        <input\n                            type=\"checkbox\"\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                            clrCheckbox\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\n                        />\n                    </div>\n                </td>\n                <td class=\"align-middle\">\n                    <div class=\"cancel-checkbox-wrapper\">\n                        <input\n                            type=\"checkbox\"\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                            clrCheckbox\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\n                        />\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"refund-details mt4\" [class.faded]=\"!isRefunding() && !isCancelling()\">\n        <div>\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\n            <ng-select\n                [disabled]=\"!isRefunding() && !isCancelling()\"\n                [items]=\"reasons\"\n                bindLabel=\"name\"\n                autofocus\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\n                bindValue=\"id\"\n                [addTag]=\"true\"\n                [(ngModel)]=\"reason\"\n            ></ng-select>\n        </div>\n\n        <div>\n            <clr-select-container>\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\n                    <option\n                        *ngFor=\"let payment of settledPayments\"\n                        [ngValue]=\"payment\"\n                        [disabled]=\"payment.state !== 'Settled'\"\n                    >\n                        #{{ payment.id }} {{ payment.method }}:\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\n                    </option>\n                </select>\n            </clr-select-container>\n\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\n                <label>\n                    {{ 'order.refund-shipping' | translate }} ({{\n                        order.shippingWithTax | localeCurrency: order.currencyCode\n                    }})\n                </label>\n            </clr-checkbox-wrapper>\n            <clr-input-container>\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\n                <vdr-currency-input\n                    clrInput\n                    [disabled]=\"!isRefunding()\"\n                    [currencyCode]=\"order.currencyCode\"\n                    [(ngModel)]=\"adjustment\"\n                ></vdr-currency-input>\n            </clr-input-container>\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\n                <div class=\"order-total\">\n                    {{ 'order.payment-amount' | translate }}:\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\n                </div>\n                <div class=\"refund-total\">\n                    {{ 'order.refund-total' | translate }}:\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\n                </div>\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\n                    {{\n                        'order.refund-total-error'\n                            | translate\n                                : {\n                                      min: 0 | currency: order.currencyCode,\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\n                                  }\n                    }}\n                </div>\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\n                    {{ 'order.refund-total-warning' | translate }}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\n            {{\n                'order.refund-with-amount'\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\n            }}\n        </ng-container>\n        <ng-template #cancelling>\n            {{ 'order.cancel-selected-items' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CancelOrderInput,\n    Dialog,\n    getAppConfig,\n    I18nService,\n    OrderDetail,\n    OrderDetailFragment,\n    OrderLineInput,\n    RefundOrderInput,\n} from '@vendure/admin-ui/core';\nimport { summate } from '@vendure/common/lib/shared-utils';\n\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\n\n@Component({\n    selector: 'vdr-refund-order-dialog',\n    templateUrl: './refund-order-dialog.component.html',\n    styleUrls: ['./refund-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RefundOrderDialogComponent\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }>\n{\n    order: OrderDetailFragment;\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\n    reason: string;\n    settledPayments: OrderDetail.Payments[];\n    selectedPayment: OrderDetail.Payments;\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\n    refundShipping = false;\n    adjustment = 0;\n    reasons = getAppConfig().cancellationReasons ?? [\n        _('order.refund-reason-customer-request'),\n        _('order.refund-reason-not-available'),\n    ];\n\n    constructor(private i18nService: I18nService) {\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\n    }\n\n    get refundTotal(): number {\n        const itemTotal = this.order.lines.reduce((total, line) => {\n            const lineRef = this.lineQuantities[line.id];\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\n            return total + line.proratedUnitPriceWithTax * refundCount;\n        }, 0);\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\n    }\n\n    get settledPaymentsTotal(): number {\n        return this.settledPayments\n            .map(payment => {\n                const paymentTotal = payment.amount;\n                const alreadyRefundedTotal = summate(\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\n                    'total',\n                );\n                return paymentTotal - alreadyRefundedTotal;\n            })\n            .reduce((sum, amount) => sum + amount, 0);\n    }\n\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\n        const refunds =\n            this.order.payments?.reduce(\n                (all, payment) => [...all, ...payment.refunds],\n                [] as OrderDetail.Refunds[],\n            ) ?? [];\n\n        const refundable = line.items.filter(i => {\n            if (i.cancelled) {\n                return false;\n            }\n            if (i.refundId == null) {\n                return true;\n            }\n            const refund = refunds.find(r => r.id === i.refundId);\n            return refund?.state === 'Failed';\n        });\n        return 0 < refundable.length;\n    }\n\n    ngOnInit() {\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\n            return {\n                ...result,\n                [line.id]: {\n                    quantity: 0,\n                    refund: false,\n                    cancel: false,\n                },\n            };\n        }, {});\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\n        if (this.settledPayments.length) {\n            this.selectedPayment = this.settledPayments[0];\n        }\n    }\n\n    handleZeroQuantity(line?: SelectionLine) {\n        if (line?.quantity === 0) {\n            line.cancel = false;\n            line.refund = false;\n        }\n    }\n\n    isRefunding(): boolean {\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\n            return isRefunding || (0 < line.quantity && line.refund);\n        }, false);\n        return result;\n    }\n\n    isCancelling(): boolean {\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\n            return isCancelling || (0 < line.quantity && line.cancel);\n        }, false);\n        return result;\n    }\n\n    canSubmit(): boolean {\n        if (this.isRefunding()) {\n            return !!(\n                this.selectedPayment &&\n                this.reason &&\n                0 < this.refundTotal &&\n                this.refundTotal <= this.settledPaymentsTotal\n            );\n        } else if (this.isCancelling()) {\n            return !!this.reason;\n        }\n        return false;\n    }\n\n    select() {\n        const payment = this.selectedPayment;\n        if (payment) {\n            const refundLines = this.getOrderLineInput(line => line.refund);\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\n\n            this.resolveWith({\n                refund: {\n                    lines: refundLines,\n                    reason: this.reason,\n                    shipping: this.refundShipping ? this.order.shippingWithTax : 0,\n                    adjustment: this.adjustment,\n                    paymentId: payment.id,\n                },\n                cancel: {\n                    lines: cancelLines,\n                    orderId: this.order.id,\n                    reason: this.reason,\n                    cancelShipping: this.refundShipping,\n                },\n            });\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\n        return Object.entries(this.lineQuantities)\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\n            .map(([orderLineId, line]) => ({\n                orderLineId,\n                quantity: line.quantity,\n            }));\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\n<p class=\"instruction\">\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\n</p>\n<clr-input-container>\n    <label>{{ 'order.transaction-id' | translate }}</label>\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\n</clr-input-container>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\n        {{ 'order.settle-refund' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { OrderDetail } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-settle-refund-dialog',\n    templateUrl: './settle-refund-dialog.component.html',\n    styleUrls: ['./settle-refund-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettleRefundDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    transactionId = '';\n    refund: OrderDetail.Refunds;\n\n    submit() {\n        this.resolveWith(this.transactionId);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\n    {{ payment.method }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\n    {{ payment.amount | localeCurrency: currencyCode }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\n    {{ payment.errorMessage }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\n    {{ payment.transactionId }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\n</vdr-labeled-data>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-payment-detail',\n    templateUrl: './payment-detail.component.html',\n    styleUrls: ['./payment-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentDetailComponent {\n    @Input() payment: OrderDetail.Payments;\n    @Input() currencyCode: CurrencyCode;\n}\n","<h4>{{ 'order.order-history' | translate }}</h4>\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\n        <div class=\"note-entry\">\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\n                {{ 'common.add-note' | translate }}\n            </button>\n        </div>\n        <div class=\"visibility-select\">\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\n                <label>{{ 'order.note-is-private' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\n                {{ 'order.note-only-visible-to-administrators' | translate }}\n            </span>\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\n                {{ 'order.note-visible-to-customer' | translate }}\n            </span>\n        </div>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry\n        *ngFor=\"let entry of history\"\n        [displayType]=\"getDisplayType(entry)\"\n        [iconShape]=\"getTimelineIcon(entry)\"\n        [createdAt]=\"entry.createdAt\"\n        [name]=\"getName(entry)\"\n        [featured]=\"isFeatured(entry)\"\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\n        (expandClick)=\"expanded = !expanded\"\n    >\n        <ng-container [ngSwitch]=\"entry.type\">\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\n                    {{ 'order.history-order-fulfilled' | translate }}\n                </div>\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\n                    {{ 'order.history-order-cancelled' | translate }}\n                </div>\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\n                    {{\n                        'order.history-order-transition'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\n                <div class=\"title\">\n                    {{ 'order.history-order-modified' | translate }}\n                </div>\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\n                    {{ 'order.modify-order-price-difference' | translate }}:\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\n                        'order.modification-settled' | translate\n                    }}</vdr-chip>\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\n                        'order.modification-not-settled' | translate\n                    }}</vdr-chip>\n                    <vdr-history-entry-detail>\n                        <vdr-modification-detail\n                            [order]=\"order\"\n                            [modification]=\"modification\"\n                        ></vdr-modification-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\n                    <div class=\"title\">\n                        {{ 'order.history-payment-settled' | translate }}\n                    </div>\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\n                        <vdr-payment-detail\n                            [payment]=\"payment\"\n                            [currencyCode]=\"order.currencyCode\"\n                        ></vdr-payment-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n                <ng-template #regularPaymentTransition>\n                    {{\n                        'order.history-payment-transition'\n                            | translate\n                                : {\n                                      from: entry.data.from,\n                                      to: entry.data.to,\n                                      id: getPayment(entry)?.transactionId\n                                  }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\n                {{\n                    'order.history-refund-transition'\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\n                }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\n                        {{ entry.data.reason }}\n                    </vdr-labeled-data>\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\n                    </vdr-labeled-data>\n                    <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\n                        {{ entry.data.shippingCancelled }}\n                    </vdr-labeled-data>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\n                {{ 'order.history-fulfillment-created' | translate }}\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]=\"fulfillment.id\"\n                        [order]=\"order\"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\n                    <div class=\"title\">\n                        {{ 'order.history-fulfillment-delivered' | translate }}\n                    </div>\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\n                    <div class=\"title\">\n                        {{ 'order.history-fulfillment-shipped' | translate }}\n                    </div>\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\n                    {{\n                        'order.history-fulfillment-transition'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-container>\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]=\"fulfillment.id\"\n                        [order]=\"order\"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\n                <div class=\"flex\">\n                    <div class=\"note-text\">\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\n                            'common.public' | translate\n                        }}</span>\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\n                            'common.private' | translate\n                        }}</span>\n                        {{ entry.data.note }}\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <vdr-dropdown>\n                        <button class=\"icon-button\" vdrDropdownTrigger>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"updateNote.emit(entry)\"\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"edit\"></clr-icon>\n                                {{ 'common.edit' | translate }}\n                            </button>\n                            <div class=\"dropdown-divider\"></div>\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"deleteNote.emit(entry)\"\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\n                {{ 'order.history-coupon-code-applied' | translate }}:\n                <vdr-chip>\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\n                        entry.data.couponCode\n                    }}</a>\n                </vdr-chip>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\n                {{ 'order.history-coupon-code-removed' | translate }}:\n                <vdr-chip\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\n                >\n            </ng-container>\n        </ng-container>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\n        <div class=\"title\">\n            {{ 'order.history-order-created' | translate }}\n        </div>\n    </vdr-timeline-entry>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    GetOrderHistory,\n    HistoryEntry,\n    HistoryEntryType,\n    OrderDetail,\n    OrderDetailFragment,\n    TimelineDisplayType,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-history',\n    templateUrl: './order-history.component.html',\n    styleUrls: ['./order-history.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent {\n    @Input() order: OrderDetailFragment;\n    @Input() history: GetOrderHistory.Items[];\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\n    note = '';\n    noteIsPrivate = true;\n    expanded = false;\n    readonly type = HistoryEntryType;\n\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return 'success';\n            }\n            if (entry.data.to === 'Cancelled') {\n                return 'error';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return 'success';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\n                return 'error';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\n            return 'error';\n        }\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\n            return 'warning';\n        }\n        return 'default';\n    }\n\n    getTimelineIcon(entry: GetOrderHistory.Items) {\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return ['success-standard', 'is-solid'];\n            }\n            if (entry.data.to === 'Cancelled') {\n                return 'ban';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\n            if (entry.data.to === 'Settled') {\n                return 'credit-card';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\n            return 'note';\n        }\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\n            return 'pencil';\n        }\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\n            if (entry.data.to === 'Shipped') {\n                return 'truck';\n            }\n            if (entry.data.to === 'Delivered') {\n                return 'truck';\n            }\n        }\n    }\n\n    isFeatured(entry: GetOrderHistory.Items): boolean {\n        switch (entry.type) {\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\n                return (\n                    entry.data.to === 'Delivered' ||\n                    entry.data.to === 'Cancelled' ||\n                    entry.data.to === 'Settled'\n                );\n            }\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\n            case HistoryEntryType.ORDER_NOTE:\n            case HistoryEntryType.ORDER_MODIFIED:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\n        if (\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\n            this.order.fulfillments\n        ) {\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\n        }\n    }\n\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\n        }\n    }\n\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\n        const itemMap = new Map<string, number>();\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\n        for (const line of this.order.lines) {\n            for (const item of line.items) {\n                if (cancelledItemIds.includes(item.id)) {\n                    const count = itemMap.get(line.productVariant.name);\n                    if (count != null) {\n                        itemMap.set(line.productVariant.name, count + 1);\n                    } else {\n                        itemMap.set(line.productVariant.name, 1);\n                    }\n                }\n            }\n        }\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\n    }\n\n    getModification(id: string) {\n        return this.order.modifications.find(m => m.id === id);\n    }\n\n    getName(entry: GetOrderHistory.Items): string {\n        const { administrator } = entry;\n        if (administrator) {\n            return `${administrator.firstName} ${administrator.lastName}`;\n        } else {\n            const customer = this.order.customer;\n            if (customer) {\n                return `${customer.firstName} ${customer.lastName}`;\n            }\n        }\n        return '';\n    }\n\n    addNoteToOrder() {\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\n        this.note = '';\n        this.noteIsPrivate = true;\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-payment-state-label',\n    templateUrl: './payment-state-label.component.html',\n    styleUrls: ['./payment-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Authorized':\n                return 'warning';\n            case 'Settled':\n                return 'success';\n            case 'Declined':\n            case 'Cancelled':\n                return 'error';\n        }\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-refund-state-label',\n    templateUrl: './refund-state-label.component.html',\n    styleUrls: ['./refund-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RefundStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Pending':\n                return 'warning';\n            case 'Settled':\n                return 'success';\n            case 'Failed':\n                return 'error';\n        }\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header payment-header\">\n        <div>\n            {{ 'order.payment' | translate }}\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\n        </div>\n        <div class=\"payment-state\">\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\n    </div>\n    <ng-container *ngFor=\"let refund of payment.refunds\">\n        <div class=\"card-header payment-header\">\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\n            {{ 'order.refund' | translate }} #{{ refund.id }}\n            <div class=\"clr-flex-fill\"></div>\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\n        </div>\n        <div class=\"card-block\">\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\n                {{ refund.createdAt | localeDate: 'medium' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\n                {{ refund.total | localeCurrency: currencyCode }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\n                {{ refund.transactionId }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\n                {{ refund.reason }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\n            </vdr-labeled-data>\n        </div>\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\n                {{ 'order.settle-refund' | translate }}\n            </button>\n        </div>\n    </ng-container>\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\n        <button\n            class=\"btn btn-sm btn-primary\"\n            *ngIf=\"payment.nextStates.includes('Settled')\"\n            (click)=\"settlePayment.emit(payment)\"\n        >\n            {{ 'order.settle-payment' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\n                    <button\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\n                    >\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\n                            {{\n                                'order.transition-to-state'\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\n                            }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                            {{ 'order.cancel-payment' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CurrencyCode } from '@vendure/admin-ui/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-payment-card',\n    templateUrl: './order-payment-card.component.html',\n    styleUrls: ['./order-payment-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderPaymentCardComponent {\n    @Input() payment: OrderDetail.Payments;\n    @Input() currencyCode: CurrencyCode;\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\n\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\n        return !!refund && Object.keys(refund.metadata).length > 0;\n    }\n\n    nextOtherStates(): string[] {\n        if (!this.payment) {\n            return [];\n        }\n        return this.payment.nextStates.filter(s => s !== 'Settled' && s !== 'Error');\n    }\n}\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\">\n                <button\n                    class=\"icon-button\"\n                    (click)=\"openStateDiagram()\"\n                    [title]=\"'order.order-state-diagram' | translate\"\n                >\n                    <clr-icon shape=\"list\"></clr-icon>\n                </button>\n            </vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"\n                (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\n            \"\n            (click)=\"addManualPayment(order)\"\n        >\n            {{ 'order.add-payment-to-order' | translate }}\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\n        </button>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"\n                order.active === false &&\n                order.state !== 'ArrangingAdditionalPayment' &&\n                order.state !== 'ArrangingPayment' &&\n                0 < outstandingPaymentAmount(order)\n            \"\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\n        >\n            {{ 'order.arrange-additional-payment' | translate }}\n        </button>\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\n            {{ 'order.fulfill-order' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'order.modify-order' | translate }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                </ng-container>\n                <button\n                    type=\"button\"\n                    class=\"btn\"\n                    vdrDropdownItem\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\n                    (click)=\"cancelOrRefund(order)\"\n                >\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\n                        {{ 'order.refund-and-cancel-order' | translate }}\n                    </ng-container>\n                    <ng-template #cancelOnly>\n                        {{ 'order.cancel-order' | translate }}\n                    </ng-template>\n                </button>\n\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        *ngFor=\"let nextState of nextStates$ | async\"\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionToState(nextState)\"\n                    >\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\n                        {{\n                            'order.transition-to-state'\n                                | translate: { state: (nextState | stateI18nToken | translate) }\n                        }}\n                    </button>\n                </ng-container>\n                <div class=\"dropdown-divider\"></div>\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\n                    {{ 'order.manually-transition-to-state' | translate }}\n                </button>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <vdr-order-table\n                [order]=\"order\"\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n            ></vdr-order-table>\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th>{{ 'common.description' | translate }}</th>\n                        <th>{{ 'order.tax-rate' | translate }}</th>\n                        <th>{{ 'order.tax-base' | translate }}</th>\n                        <th>{{ 'order.tax-total' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let row of order.taxSummary\">\n                        <td>{{ row.description }}</td>\n                        <td>{{ row.taxRate / 100 | percent }}</td>\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <vdr-custom-detail-component-host\n                locationId=\"order-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-order-history\n                [order]=\"order\"\n                [history]=\"history$ | async\"\n                (addNote)=\"addNote($event)\"\n                (updateNote)=\"updateNote($event)\"\n                (deleteNote)=\"deleteNote($event)\"\n            ></vdr-order-history>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <vdr-order-custom-fields-card\n                [customFieldsConfig]=\"customFields\"\n                [customFieldValues]=\"order.customFields\"\n                (updateClick)=\"updateCustomFields($event)\"\n            ></vdr-order-custom-fields-card>\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    {{ 'order.customer' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\n                            {{ 'order.shipping-address' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\n                            {{ 'order.billing-address' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\n                    </div>\n                </div>\n            </div>\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\n                <vdr-order-payment-card\n                    *ngFor=\"let payment of order.payments\"\n                    [currencyCode]=\"order.currencyCode\"\n                    [payment]=\"payment\"\n                    (settlePayment)=\"settlePayment($event)\"\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\n                    (settleRefund)=\"settleRefund($event)\"\n                ></vdr-order-payment-card>\n            </ng-container>\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\n                <vdr-fulfillment-card\n                    [fulfillment]=\"fulfillment\"\n                    [order]=\"order\"\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\n                ></vdr-fulfillment-card>\n            </ng-container>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CancelOrder,\n    CustomFieldConfig,\n    DataService,\n    EditNoteDialogComponent,\n    FulfillmentFragment,\n    FulfillmentLineSummary,\n    GetOrderHistory,\n    GetOrderQuery,\n    HistoryEntry,\n    HistoryEntryType,\n    ModalService,\n    NotificationService,\n    Order,\n    OrderDetail,\n    OrderDetailFragment,\n    OrderLineFragment,\n    Refund,\n    RefundOrder,\n    ServerConfigService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { pick } from '@vendure/common/lib/pick';\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\n\n@Component({\n    selector: 'vdr-order-detail',\n    templateUrl: './order-detail.component.html',\n    styleUrls: ['./order-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderDetailComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy\n{\n    detailForm = new FormGroup({});\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\n    nextStates$: Observable<string[]>;\n    fetchHistory = new Subject<void>();\n    customFields: CustomFieldConfig[];\n    orderLineCustomFields: CustomFieldConfig[];\n    private readonly defaultStates = [\n        'AddingItems',\n        'ArrangingPayment',\n        'PaymentAuthorized',\n        'PaymentSettled',\n        'PartiallyShipped',\n        'Shipped',\n        'PartiallyDelivered',\n        'Delivered',\n        'Cancelled',\n        'Modifying',\n        'ArrangingAdditionalPayment',\n    ];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    ngOnInit() {\n        this.init();\n        this.entity$.pipe(take(1)).subscribe(order => {\n            if (order.state === 'Modifying') {\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\n            }\n        });\n        this.customFields = this.getCustomFieldConfig('Order');\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.history$ = this.fetchHistory.pipe(\n            startWith(null),\n            switchMap(() => {\n                return this.dataService.order\n                    .getOrderHistory(this.id, {\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    })\n                    .mapStream(data => data.order?.history.items);\n            }),\n        );\n        this.nextStates$ = this.entity$.pipe(\n            map(order => {\n                const isInCustomState = !this.defaultStates.includes(order.state);\n                return isInCustomState\n                    ? order.nextStates\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    openStateDiagram() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order =>\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\n                        closable: true,\n                        locals: {\n                            activeState: order.state,\n                        },\n                    }),\n                ),\n            )\n            .subscribe();\n    }\n\n    transitionToState(state: string) {\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\n            switch (transitionOrderToState?.__typename) {\n                case 'Order':\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\n                    this.fetchHistory.next();\n                    break;\n                case 'OrderStateTransitionError':\n                    this.notificationService.error(transitionOrderToState.transitionError);\n            }\n        });\n    }\n\n    manuallyTransitionToState(order: OrderDetailFragment) {\n        this.orderTransitionService\n            .manuallyTransitionToState({\n                orderId: order.id,\n                nextStates: order.nextStates,\n                cancellable: true,\n                message: _('order.manually-transition-to-state-message'),\n                retry: 0,\n            })\n            .subscribe();\n    }\n\n    transitionToModifying() {\n        this.dataService.order\n            .transitionToState(this.id, 'Modifying')\n            .subscribe(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\n                        break;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState.transitionError);\n                }\n            });\n    }\n\n    updateCustomFields(customFieldsValue: any) {\n        this.dataService.order\n            .updateOrderCustomFields({\n                id: this.id,\n                customFields: customFieldsValue,\n            })\n            .subscribe(() => {\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\n            });\n    }\n\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\n        if (!orderAddress) {\n            return [];\n        }\n        return Object.values(orderAddress)\n            .filter(val => val !== 'OrderAddress')\n            .filter(line => !!line);\n    }\n\n    settlePayment(payment: OrderDetail.Payments) {\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\n            switch (settlePayment.__typename) {\n                case 'Payment':\n                    if (settlePayment.state === 'Settled') {\n                        this.notificationService.success(_('order.settle-payment-success'));\n                    } else {\n                        this.notificationService.error(_('order.settle-payment-error'));\n                    }\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\n                    this.fetchHistory.next();\n                    break;\n                case 'OrderStateTransitionError':\n                case 'PaymentStateTransitionError':\n                case 'SettlePaymentError':\n                    this.notificationService.error(settlePayment.message);\n            }\n        });\n    }\n\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\n        if (state === 'Cancelled') {\n            this.dataService.order.cancelPayment(payment.id).subscribe(({ cancelPayment }) => {\n                switch (cancelPayment.__typename) {\n                    case 'Payment':\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\n                            state,\n                        });\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\n                        this.fetchHistory.next();\n                        break;\n                    case 'PaymentStateTransitionError':\n                        this.notificationService.error(cancelPayment.transitionError);\n                        break;\n                    case 'CancelPaymentError':\n                        this.notificationService.error(cancelPayment.paymentErrorMessage);\n                        break;\n                }\n            });\n        } else {\n            this.dataService.order\n                .transitionPaymentToState(payment.id, state)\n                .subscribe(({ transitionPaymentToState }) => {\n                    switch (transitionPaymentToState.__typename) {\n                        case 'Payment':\n                            this.notificationService.success(\n                                _('order.transitioned-payment-to-state-success'),\n                                {\n                                    state,\n                                },\n                            );\n                            this.dataService.order.getOrder(this.id).single$.subscribe();\n                            this.fetchHistory.next();\n                            break;\n                        case 'PaymentStateTransitionError':\n                            this.notificationService.error(transitionPaymentToState.message);\n                            break;\n                    }\n                });\n        }\n    }\n\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\n        const allFulfillmentSummaryRows: FulfillmentFragment['summary'] = (order.fulfillments ?? []).reduce(\n            (all, fulfillment) => [...all, ...fulfillment.summary],\n            [] as FulfillmentFragment['summary'],\n        );\n        let allItemsFulfilled = true;\n        for (const line of order.lines) {\n            const totalFulfilledCount = allFulfillmentSummaryRows\n                .filter(row => row.orderLine.id === line.id)\n                .reduce((sum, row) => sum + row.quantity, 0);\n            if (totalFulfilledCount < line.quantity) {\n                allItemsFulfilled = false;\n            }\n        }\n        return (\n            !allItemsFulfilled &&\n            !this.hasUnsettledModifications(order) &&\n            this.outstandingPaymentAmount(order) === 0 &&\n            (order.nextStates.includes('Shipped') ||\n                order.nextStates.includes('PartiallyShipped') ||\n                order.nextStates.includes('Delivered'))\n        );\n    }\n\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\n    }\n\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\n        return summate(\n            order.modifications.filter(m => !m.isSettled),\n            'priceChange',\n        );\n    }\n\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\n\n        let amountCovered = 0;\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\n            amountCovered += payment.amount - refundsTotal;\n        }\n        return order.totalWithTax - amountCovered;\n    }\n\n    addManualPayment(order: OrderDetailFragment) {\n        const priorState = order.state;\n        this.modalService\n            .fromComponent(AddManualPaymentDialogComponent, {\n                closable: true,\n                locals: {\n                    outstandingAmount: this.outstandingPaymentAmount(order),\n                    currencyCode: order.currencyCode,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.order.addManualPaymentToOrder({\n                            orderId: this.id,\n                            transactionId: result.transactionId,\n                            method: result.method,\n                            metadata: result.metadata || {},\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n                switchMap(({ addManualPaymentToOrder }) => {\n                    switch (addManualPaymentToOrder.__typename) {\n                        case 'Order':\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\n                            if (priorState === 'ArrangingAdditionalPayment') {\n                                return this.orderTransitionService.transitionToPreModifyingState(\n                                    order.id,\n                                    order.nextStates,\n                                );\n                            } else {\n                                return this.dataService.order\n                                    .transitionToState(this.id, 'PaymentSettled')\n                                    .pipe(mapTo('PaymentSettled'));\n                            }\n                        case 'ManualPaymentStateError':\n                            this.notificationService.error(addManualPaymentToOrder.message);\n                            return EMPTY;\n                        default:\n                            return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.refetchOrder({ result });\n                }\n            });\n    }\n\n    fulfillOrder() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\n                        size: 'xl',\n                        locals: {\n                            order,\n                        },\n                    });\n                }),\n                switchMap(input => {\n                    if (input) {\n                        return this.dataService.order.createFulfillment(input);\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\n            )\n            .subscribe(result => {\n                if (result) {\n                    const { addFulfillmentToOrder } = result;\n                    switch (addFulfillmentToOrder.__typename) {\n                        case 'Fulfillment':\n                            this.notificationService.success(_('order.create-fulfillment-success'));\n                            break;\n                        case 'EmptyOrderLineSelectionError':\n                        case 'InsufficientStockOnHandError':\n                        case 'ItemsAlreadyFulfilledError':\n                        case 'InvalidFulfillmentHandlerError':\n                            this.notificationService.error(addFulfillmentToOrder.message);\n                            break;\n                        case 'FulfillmentStateTransitionError':\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\n                            break;\n                        case 'CreateFulfillmentError':\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\n                            break;\n                        case undefined:\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\n                            break;\n                        default:\n                            assertNever(addFulfillmentToOrder);\n                    }\n                }\n            });\n    }\n\n    transitionFulfillment(id: string, state: string) {\n        this.dataService.order\n            .transitionFulfillmentToState(id, state)\n            .pipe(switchMap(result => this.refetchOrder(result)))\n            .subscribe(() => {\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\n            });\n    }\n\n    cancelOrRefund(order: OrderDetail.Fragment) {\n        const isRefundable = this.orderHasSettledPayments(order);\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\n            this.cancelOrder(order);\n        } else {\n            this.refundOrder(order);\n        }\n    }\n\n    settleRefund(refund: OrderDetail.Refunds) {\n        this.modalService\n            .fromComponent(SettleRefundDialogComponent, {\n                size: 'md',\n                locals: {\n                    refund,\n                },\n            })\n            .pipe(\n                switchMap(transactionId => {\n                    if (transactionId) {\n                        return this.dataService.order.settleRefund(\n                            {\n                                transactionId,\n                                id: refund.id,\n                            },\n                            this.id,\n                        );\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                // switchMap(result => this.refetchOrder(result)),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.notificationService.success(_('order.settle-refund-success'));\n                }\n            });\n    }\n\n    addNote(event: { note: string; isPublic: boolean }) {\n        const { note, isPublic } = event;\n        this.dataService.order\n            .addNoteToOrder({\n                id: this.id,\n                note,\n                isPublic,\n            })\n            .pipe(switchMap(result => this.refetchOrder(result)))\n            .subscribe(result => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    updateNote(entry: HistoryEntry) {\n        this.modalService\n            .fromComponent(EditNoteDialogComponent, {\n                closable: true,\n                locals: {\n                    displayPrivacyControls: true,\n                    note: entry.data.note,\n                    noteIsPrivate: !entry.isPublic,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.order.updateOrderNote({\n                            noteId: entry.id,\n                            isPublic: !result.isPrivate,\n                            note: result.note,\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-update-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    deleteNote(entry: HistoryEntry) {\n        return this.modalService\n            .dialog({\n                title: _('common.confirm-delete-note'),\n                body: entry.data.note,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\n            .subscribe(() => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\n        return !!order.payments?.find(p => p.state === 'Settled');\n    }\n\n    private cancelOrder(order: OrderDetail.Fragment) {\n        this.modalService\n            .fromComponent(CancelOrderDialogComponent, {\n                size: 'xl',\n                locals: {\n                    order,\n                },\n            })\n            .pipe(\n                switchMap(input => {\n                    if (input) {\n                        return this.dataService.order.cancelOrder(input);\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                switchMap(result => this.refetchOrder(result)),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.notificationService.success(_('order.cancelled-order-success'));\n                }\n            });\n    }\n\n    private refundOrder(order: OrderDetail.Fragment) {\n        this.modalService\n            .fromComponent(RefundOrderDialogComponent, {\n                size: 'xl',\n                locals: {\n                    order,\n                },\n            })\n            .pipe(\n                switchMap(input => {\n                    if (!input) {\n                        return of(undefined);\n                    }\n\n                    if (input.cancel.lines?.length) {\n                        return this.dataService.order.cancelOrder(input.cancel).pipe(\n                            map(res => {\n                                const result = res.cancelOrder;\n                                switch (result.__typename) {\n                                    case 'Order':\n                                        this.refetchOrder(result).subscribe();\n                                        this.notificationService.success(_('order.cancelled-order-success'));\n                                        return input;\n                                    case 'CancelActiveOrderError':\n                                    case 'QuantityTooGreatError':\n                                    case 'MultipleOrderError':\n                                    case 'OrderStateTransitionError':\n                                    case 'EmptyOrderLineSelectionError':\n                                        this.notificationService.error(result.message);\n                                        return undefined;\n                                }\n                            }),\n                        );\n                    } else {\n                        return [input];\n                    }\n                }),\n                switchMap(input => {\n                    if (!input) {\n                        return of(undefined);\n                    }\n                    if (input.refund.lines.length) {\n                        return this.dataService.order\n                            .refundOrder(input.refund)\n                            .pipe(map(res => res.refundOrder));\n                    } else {\n                        return [undefined];\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    switch (result.__typename) {\n                        case 'Refund':\n                            this.refetchOrder(result).subscribe();\n                            if (result.state === 'Failed') {\n                                this.notificationService.error(_('order.refund-order-failed'));\n                            } else {\n                                this.notificationService.success(_('order.refund-order-success'));\n                            }\n                            break;\n                        case 'AlreadyRefundedError':\n                        case 'NothingToRefundError':\n                        case 'PaymentOrderMismatchError':\n                        case 'RefundOrderStateError':\n                        case 'RefundStateTransitionError':\n                            this.notificationService.error(result.message);\n                            break;\n                    }\n                }\n            });\n    }\n\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\n        this.fetchHistory.next();\n        if (result) {\n            return this.dataService.order.getOrder(this.id).single$;\n        } else {\n            return of(undefined);\n        }\n    }\n\n    protected setFormValues(entity: Order.Fragment): void {\n        // empty\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\n\nexport enum OrderEditResultType {\n    Refund,\n    Payment,\n    PriceUnchanged,\n    Cancel,\n}\n\ninterface OrderEditsRefundResult {\n    result: OrderEditResultType.Refund;\n    refundPaymentId: string;\n    refundNote?: string;\n}\ninterface OrderEditsPaymentResult {\n    result: OrderEditResultType.Payment;\n}\ninterface OrderEditsPriceUnchangedResult {\n    result: OrderEditResultType.PriceUnchanged;\n}\ninterface OrderEditsCancelResult {\n    result: OrderEditResultType.Cancel;\n}\ntype OrderEditResult =\n    | OrderEditsRefundResult\n    | OrderEditsPaymentResult\n    | OrderEditsPriceUnchangedResult\n    | OrderEditsCancelResult;\n\n@Component({\n    selector: 'vdr-order-edits-preview-dialog',\n    templateUrl: './order-edits-preview-dialog.component.html',\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\n    // Passed in via the modalService\n    order: OrderDetail.Fragment;\n    originalTotalWithTax: number;\n    orderLineCustomFields: CustomFieldConfig[];\n    modifyOrderInput: ModifyOrderInput;\n\n    selectedPayment?: OrderDetail.Payments;\n    refundNote: string;\n    resolveWith: (result?: OrderEditResult) => void;\n\n    get priceDifference(): number {\n        return this.order.totalWithTax - this.originalTotalWithTax;\n    }\n\n    ngOnInit() {\n        this.refundNote = this.modifyOrderInput.note || '';\n    }\n\n    cancel() {\n        this.resolveWith({\n            result: OrderEditResultType.Cancel,\n        });\n    }\n\n    submit() {\n        if (0 < this.priceDifference) {\n            this.resolveWith({\n                result: OrderEditResultType.Payment,\n            });\n        } else if (this.priceDifference < 0) {\n            this.resolveWith({\n                result: OrderEditResultType.Refund,\n                // tslint:disable-next-line:no-non-null-assertion\n                refundPaymentId: this.selectedPayment!.id,\n                refundNote: this.refundNote,\n            });\n        } else {\n            this.resolveWith({\n                result: OrderEditResultType.PriceUnchanged,\n            });\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\n\n<h4 class=\"h4\">\n    {{ 'order.modify-order-price-difference' | translate }}:\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\n</h4>\n<div *ngIf=\"priceDifference < 0\">\n<clr-select-container>\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\n        <option\n            *ngFor=\"let payment of order.payments\"\n            [ngValue]=\"payment\"\n        >\n            #{{ payment.id }} {{ payment.method }}:\n            {{ payment.amount | localeCurrency: order.currencyCode }}\n        </option>\n    </select>\n</clr-select-container>\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\n            {{ 'order.cancel-modification' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <table class=\"order-table table\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>{{ 'order.product-name' | translate }}</th>\n                        <th>{{ 'order.product-sku' | translate }}</th>\n                        <th>{{ 'order.unit-price' | translate }}</th>\n                        <th>{{ 'order.quantity' | translate }}</th>\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\n                        <th>{{ 'order.total' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr\n                        *ngFor=\"let line of order.lines; let i = index\"\n                        class=\"order-line\"\n                        [class.is-cancelled]=\"line.quantity === 0\"\n                        [class.modified]=\"isLineModified(line)\"\n                    >\n                        <td class=\"align-middle thumb\">\n                            <img\n                                *ngIf=\"line.featuredAsset\"\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\n                            />\n                        </td>\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                        <td class=\"align-middle unit-price\">\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class=\"align-middle quantity\">\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                [value]=\"line.quantity\"\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\n                            />\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                            <vdr-line-fulfillment\n                                [line]=\"line\"\n                                [orderState]=\"order.state\"\n                            ></vdr-line-fulfillment>\n                        </td>\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\n                            <vdr-tabbed-custom-fields\n                                entityName=\"OrderLine\"\n                                [customFields]=\"orderLineCustomFields\"\n                                [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\n                                [compact]=\"true\"\n                            ></vdr-tabbed-custom-fields>\n                        </td>\n                        <td class=\"align-middle total\">\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\n                        class=\"modified\"\n                    >\n                        <td class=\"align-middle thumb\">\n                            <img\n                                *ngIf=\"addedLine.productAsset\"\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\n                            />\n                        </td>\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\n                        <td class=\"align-middle unit-price\">\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class=\"align-middle quantity\">\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                [value]=\"addedLine.quantity\"\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\n                            />\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </td>\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                                <vdr-custom-field-control\n                                    [customField]=\"customField\"\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\n                                    entityName=\"OrderLine\"\n                                    [compact]=\"true\"\n                                ></vdr-custom-field-control>\n                            </ng-container>\n                        </td>\n                        <td class=\"align-middle total\">\n                            {{\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\n                                    | currency: order.currencyCode\n                            }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{\n                                    (addedLine.price * addedLine.quantity) / 100\n                                        | currency: order.currencyCode\n                                }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n                        <td class=\"align-middle\"></td>\n                        <td></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"align-middle total\">\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        class=\"surcharge modified\"\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\n                    >\n                        <td class=\"align-middle name left\" colspan=\"2\">\n                            {{ surcharge.description }}\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </td>\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n                        <td class=\"align-middle\"></td>\n                        <td></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"align-middle total\">\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\n                                </div>\n                            </ng-container>\n                        </td>\n                    </tr>\n                    <tr class=\"shipping\">\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\n                        <td colspan=\"3\"></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"clr-align-middle\">\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\n            <clr-accordion>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\n                        </vdr-product-selector>\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\n                            <img\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\n                                [src]=\"asset | assetPreview: 'tiny'\"\n                                class=\"mr4\"\n                            />\n                            <div>\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\n                                <small>{{ addItemSelectedVariant.sku }}</small>\n                                <div>\n                                    {{\n                                        getSelectedItemPrice(addItemSelectedVariant)\n                                            | localeCurrency: order.currencyCode\n                                    }}\n                                </div>\n                            </div>\n                        </div>\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                            <vdr-custom-field-control\n                                [readonly]=\"!addItemSelectedVariant\"\n                                [customField]=\"customField\"\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\n                                entityName=\"OrderLine\"\n                                [compact]=\"true\"\n                            ></vdr-custom-field-control>\n                        </ng-container>\n                        <button\n                            class=\"btn btn-secondary\"\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\n                        >\n                            {{ 'order.add-item-to-order' | translate }}\n                        </button>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.set-coupon-codes' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-coupon-code-selector\n                            [control]=\"couponCodesControl\"\n                        ></vdr-coupon-code-selector>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\">\n                                <vdr-currency-input\n                                    [currencyCode]=\"order.currencyCode\"\n                                    id=\"price\"\n                                    formControlName=\"price\"\n                                ></vdr-currency-input>\n                            </vdr-form-field>\n                            <vdr-form-field\n                                [label]=\"\n                                    'catalog.price-includes-tax-at'\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\n                                \"\n                                for=\"priceIncludesTax\"\n                                ><input\n                                    id=\"priceIncludesTax\"\n                                    type=\"checkbox\"\n                                    clrCheckbox\n                                    formControlName=\"priceIncludesTax\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\">\n                                <vdr-affixed-input suffix=\"%\"\n                                    ><input\n                                        id=\"taxRate\"\n                                        type=\"number\"\n                                        min=\"0\"\n                                        max=\"100\"\n                                        formControlName=\"taxRate\"\n                                /></vdr-affixed-input>\n                            </vdr-form-field>\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\n                            /></vdr-form-field>\n                            <button\n                                class=\"btn btn-secondary\"\n                                [disabled]=\"\n                                    surchargeForm.invalid ||\n                                    surchargeForm.pristine ||\n                                    surchargeForm.get('price')?.value === 0\n                                \"\n                            >\n                                {{ 'order.add-surcharge' | translate }}\n                            </button>\n                        </form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]=\"shippingAddressForm\"\n                            [availableCountries]=\"availableCountries$ | async\"\n                            [customFields]=\"addressCustomFields\"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]=\"billingAddressForm\"\n                            [availableCountries]=\"availableCountries$ | async\"\n                            [customFields]=\"addressCustomFields\"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n            </clr-accordion>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    {{ 'order.modification-summary' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <ul>\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\n                            {{\n                                'order.modification-adding-items'\n                                    | translate: { count: modifyOrderInput.addItems?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\n                            {{\n                                'order.modification-adjusting-lines'\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\n                            {{\n                                'order.modification-adding-surcharges'\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"shippingAddressForm.dirty\">\n                            {{ 'order.modification-updating-shipping-address' | translate }}\n                        </li>\n                        <li *ngIf=\"billingAddressForm.dirty\">\n                            {{ 'order.modification-updating-billing-address' | translate }}\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"card-block\">\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\n                    <clr-checkbox-wrapper class=\"\">\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                </div>\n                <div class=\"card-footer\">\n                    <button\n                        class=\"btn btn-primary\"\n                        [disabled]=\"!canPreviewChanges()\"\n                        (click)=\"previewAndModify(order)\"\n                    >\n                        {{ 'order.preview-changes' | translate }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    AddItemInput,\n    AdjustOrderLineInput,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    ErrorResult,\n    GetAvailableCountries,\n    HistoryEntryType,\n    LanguageCode,\n    ModalService,\n    ModifyOrderInput,\n    NotificationService,\n    OrderAddressFragment,\n    OrderDetail,\n    ProductSelectorSearch,\n    ServerConfigService,\n    SortOrder,\n    SurchargeInput,\n    transformRelationCustomFieldInputs,\n} from '@vendure/admin-ui/core';\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';\nimport { concat, EMPTY, Observable, of, Subject } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    map,\n    mapTo,\n    shareReplay,\n    startWith,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport {\n    OrderEditResultType,\n    OrderEditsPreviewDialogComponent,\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\n\ninterface AddedLine {\n    productVariantId: string;\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\n    productVariantName: string;\n    sku: string;\n    priceWithTax: number;\n    price: number;\n    quantity: number;\n}\n\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\n    addItems: Array<AddItemInput & { customFields?: any }>;\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\n};\n\n@Component({\n    selector: 'vdr-order-editor',\n    templateUrl: './order-editor.component.html',\n    styleUrls: ['./order-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderEditorComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy\n{\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    addressCustomFields: CustomFieldConfig[];\n    detailForm = new FormGroup({});\n    couponCodesControl = new FormControl();\n    orderLineCustomFieldsFormArray: FormArray;\n    addItemCustomFieldsFormArray: FormArray;\n    addItemCustomFieldsForm: FormGroup;\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\n    orderLineCustomFields: CustomFieldConfig[];\n    modifyOrderInput: ModifyOrderData = {\n        dryRun: true,\n        orderId: '',\n        addItems: [],\n        adjustOrderLines: [],\n        surcharges: [],\n        note: '',\n        updateShippingAddress: {},\n        updateBillingAddress: {},\n    };\n    surchargeForm: FormGroup;\n    shippingAddressForm: FormGroup;\n    billingAddressForm: FormGroup;\n    note = '';\n    recalculateShipping = true;\n    previousState: string;\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    get addedLines(): AddedLine[] {\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\n            price.__typename === 'SinglePrice' ? price.value : 0;\n        return (this.modifyOrderInput.addItems || [])\n            .map(row => {\n                const variantInfo = this.addedVariants.get(row.productVariantId);\n                if (variantInfo) {\n                    return {\n                        ...variantInfo,\n                        price: getSinglePriceValue(variantInfo.price),\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\n                        quantity: row.quantity,\n                    };\n                }\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    ngOnInit(): void {\n        this.init();\n        this.dataService.promotion.getPromotions();\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\n            if (order.couponCodes.length) {\n                this.couponCodesControl.setValue(order.couponCodes);\n            }\n            this.surchargeForm = new FormGroup({\n                description: new FormControl('', Validators.required),\n                sku: new FormControl(''),\n                price: new FormControl(0, Validators.required),\n                priceIncludesTax: new FormControl(true),\n                taxRate: new FormControl(0),\n                taxDescription: new FormControl(''),\n            });\n            if (!this.shippingAddressForm) {\n                this.shippingAddressForm = new FormGroup({\n                    fullName: new FormControl(order.shippingAddress?.fullName),\n                    company: new FormControl(order.shippingAddress?.company),\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\n                    city: new FormControl(order.shippingAddress?.city),\n                    province: new FormControl(order.shippingAddress?.province),\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\n                });\n                this.addAddressCustomFieldsFormGroup(this.shippingAddressForm, order.shippingAddress);\n            }\n            if (!this.billingAddressForm) {\n                this.billingAddressForm = new FormGroup({\n                    fullName: new FormControl(order.billingAddress?.fullName),\n                    company: new FormControl(order.billingAddress?.company),\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\n                    city: new FormControl(order.billingAddress?.city),\n                    province: new FormControl(order.billingAddress?.province),\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\n                });\n                this.addAddressCustomFieldsFormGroup(this.billingAddressForm, order.billingAddress);\n            }\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\n            for (const line of order.lines) {\n                const formGroup = new FormGroup({});\n                for (const { name } of this.orderLineCustomFields) {\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\n                }\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\n                        l => l.orderLineId === line.id,\n                    );\n                    if (!modifyRow) {\n                        modifyRow = {\n                            orderLineId: line.id,\n                            quantity: line.quantity,\n                        };\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\n                    }\n                    if (this.orderLineCustomFields.length) {\n                        modifyRow.customFields = value;\n                    }\n                });\n                this.orderLineCustomFieldsFormArray.push(formGroup);\n            }\n        });\n\n        this.addItemCustomFieldsFormArray = new FormArray([]);\n        this.addItemCustomFieldsForm = new FormGroup({});\n        for (const customField of this.orderLineCustomFields) {\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\n        }\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items)\n            .pipe(shareReplay(1));\n        this.dataService.order\n            .getOrderHistory(this.id, {\n                take: 1,\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\n            })\n            .single$.subscribe(({ order }) => {\n                this.previousState = order?.history.items[0].data.from;\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    transitionToPriorState(order: OrderDetail.Fragment) {\n        this.orderTransitionService\n            .transitionToPreModifyingState(order.id, order.nextStates)\n            .subscribe(result => {\n                this.router.navigate(['..'], { relativeTo: this.route });\n            });\n    }\n\n    canPreviewChanges(): boolean {\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\n        return (\n            !!addItems?.length ||\n            !!surcharges?.length ||\n            !!adjustOrderLines?.length ||\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid) ||\n            this.couponCodesControl.dirty\n        );\n    }\n\n    isLineModified(line: OrderDetail.Lines): boolean {\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\n        );\n    }\n\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\n        const { adjustOrderLines } = this.modifyOrderInput;\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\n        if (row && +quantity === line.quantity) {\n            // Remove the modification if the quantity is the same as\n            // the original order\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\n        }\n        if (!row) {\n            row = { orderLineId: line.id, quantity: +quantity };\n            adjustOrderLines?.push(row);\n        }\n        row.quantity = +quantity;\n    }\n\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\n        if (row) {\n            row.quantity = +quantity;\n        }\n    }\n\n    trackByProductVariantId(index: number, item: AddedLine) {\n        return item.productVariantId;\n    }\n\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\n        switch (result?.priceWithTax.__typename) {\n            case 'SinglePrice':\n                return result.priceWithTax.value;\n            default:\n                return 0;\n        }\n    }\n\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\n        if (!result) {\n            return;\n        }\n        const customFields = this.orderLineCustomFields.length\n            ? this.addItemCustomFieldsForm.value\n            : undefined;\n        let row = this.modifyOrderInput.addItems?.find(l =>\n            this.isMatchingAddItemRow(l, result, customFields),\n        );\n        if (!row) {\n            row = { productVariantId: result.productVariantId, quantity: 1 };\n            if (customFields) {\n                row.customFields = customFields;\n            }\n            this.modifyOrderInput.addItems?.push(row);\n        } else {\n            row.quantity++;\n        }\n        if (customFields) {\n            const formGroup = new FormGroup({});\n            for (const [key, value] of Object.entries(customFields)) {\n                formGroup.addControl(key, new FormControl(value));\n            }\n            this.addItemCustomFieldsFormArray.push(formGroup);\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\n                if (row) {\n                    row.customFields = value;\n                }\n            });\n        }\n        this.addItemCustomFieldsForm.reset({});\n        this.addItemSelectedVariant = undefined;\n        this.addedVariants.set(result.productVariantId, result);\n    }\n\n    private isMatchingAddItemRow(\n        row: ModifyOrderData['addItems'][number],\n        result: ProductSelectorSearch.Items,\n        customFields: any,\n    ): boolean {\n        return (\n            row.productVariantId === result.productVariantId &&\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\n        );\n    }\n\n    removeAddedItem(index: number) {\n        this.modifyOrderInput.addItems.splice(index, 1);\n        if (-1 < index) {\n            this.addItemCustomFieldsFormArray.removeAt(index);\n        }\n    }\n\n    getSurchargePrices(surcharge: SurchargeInput) {\n        const priceWithTax = surcharge.priceIncludesTax\n            ? surcharge.price\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\n        const price = surcharge.priceIncludesTax\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\n            : surcharge.price;\n        return {\n            price,\n            priceWithTax,\n        };\n    }\n\n    addSurcharge(value: any) {\n        this.modifyOrderInput.surcharges?.push(value);\n        this.surchargeForm.reset({\n            price: 0,\n            priceIncludesTax: true,\n            taxRate: 0,\n        });\n    }\n\n    removeSurcharge(index: number) {\n        this.modifyOrderInput.surcharges?.splice(index, 1);\n    }\n\n    previewAndModify(order: OrderDetail.Fragment) {\n        const modifyOrderInput: ModifyOrderData = {\n            ...this.modifyOrderInput,\n            adjustOrderLines: this.modifyOrderInput.adjustOrderLines.map(line => {\n                return transformRelationCustomFieldInputs(simpleDeepClone(line), this.orderLineCustomFields);\n            }),\n        };\n        const input: ModifyOrderInput = {\n            ...modifyOrderInput,\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\n            ...(this.shippingAddressForm.dirty\n                ? { updateShippingAddress: this.shippingAddressForm.value }\n                : {}),\n            dryRun: true,\n            couponCodes: this.couponCodesControl.dirty ? this.couponCodesControl.value : undefined,\n            note: this.note ?? '',\n            options: {\n                recalculateShipping: this.recalculateShipping,\n            },\n        };\n        const originalTotalWithTax = order.totalWithTax;\n        this.dataService.order\n            .modifyOrder(input)\n            .pipe(\n                switchMap(({ modifyOrder }) => {\n                    switch (modifyOrder.__typename) {\n                        case 'Order':\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\n                                size: 'xl',\n                                closable: false,\n                                locals: {\n                                    originalTotalWithTax,\n                                    order: modifyOrder,\n                                    orderLineCustomFields: this.orderLineCustomFields,\n                                    modifyOrderInput: input,\n                                },\n                            });\n                        case 'InsufficientStockError':\n                        case 'NegativeQuantityError':\n                        case 'NoChangesSpecifiedError':\n                        case 'OrderLimitError':\n                        case 'OrderModificationStateError':\n                        case 'PaymentMethodMissingError':\n                        case 'RefundPaymentIdMissingError':\n                        case 'CouponCodeLimitError':\n                        case 'CouponCodeExpiredError':\n                        case 'CouponCodeInvalidError': {\n                            this.notificationService.error(modifyOrder.message);\n                            return of(false as const);\n                        }\n                        case null:\n                        case undefined:\n                            return of(false as const);\n                        default:\n                            assertNever(modifyOrder);\n                    }\n                }),\n                switchMap(result => {\n                    if (!result || result.result === OrderEditResultType.Cancel) {\n                        // re-fetch so that the preview values get overwritten in the cache.\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\n                    } else {\n                        // Do the modification\n                        const wetRunInput = {\n                            ...input,\n                            dryRun: false,\n                        };\n                        if (result.result === OrderEditResultType.Refund) {\n                            wetRunInput.refund = {\n                                paymentId: result.refundPaymentId,\n                                reason: result.refundNote,\n                            };\n                        }\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\n                            switchMap(({ modifyOrder }) => {\n                                if (modifyOrder.__typename === 'Order') {\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\n                                    const nextState =\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\n\n                                    return this.dataService.order\n                                        .transitionToState(order.id, nextState)\n                                        .pipe(mapTo(true));\n                                } else {\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\n                                    return EMPTY;\n                                }\n                            }),\n                        );\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.router.navigate(['../'], { relativeTo: this.route });\n                }\n            });\n    }\n\n    private addAddressCustomFieldsFormGroup(\n        parentFormGroup: FormGroup,\n        address?: OrderAddressFragment | null,\n    ) {\n        if (address && this.addressCustomFields.length) {\n            const addressCustomFieldsFormGroup = new FormGroup({});\n            for (const customFieldDef of this.addressCustomFields) {\n                const name = customFieldDef.name;\n                const value = (address as any).customFields?.[name];\n                addressCustomFieldsFormGroup.addControl(name, new FormControl(value));\n            }\n            parentFormGroup.addControl('customFields', addressCustomFieldsFormGroup);\n        }\n    }\n\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\n        /* not used */\n    }\n}\n","<audio src=\"assets/notification.mp3\" id=\"audio_player\"></audio>\n<clr-toggle-wrapper>\n    <input\n        id=\"audioToggle\"\n        type=\"checkbox\"\n        (change)=\"toggleAudio()\"\n        [checked]=\"audioOn\"\n        clrToggle\n        name=\"enabled\"\n    />\n    <label class=\"visible-toggle\"> <span>Play Notification Sound</span></label></clr-toggle-wrapper\n>\n<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"search-form\">\n            <div\n                class=\"filter-presets btn-group btn-outline-primary\"\n                *ngIf=\"activePreset$ | async as activePreset\"\n            >\n                <button\n                    class=\"btn\"\n                    *ngFor=\"let preset of filterPresets\"\n                    [class.btn-primary]=\"activePreset === preset.name\"\n                    (click)=\"selectFilterPreset(preset.name)\"\n                >\n                    {{ preset.label | translate }}\n                </button>\n                <button\n                    class=\"btn\"\n                    [class.btn-primary]=\"activePreset === 'custom'\"\n                    (click)=\"selectFilterPreset('custom')\"\n                >\n                    {{ 'order.filter-custom' | translate }}\n                    <clr-icon shape=\"angle down\"></clr-icon>\n                </button>\n            </div>\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"searchControl\"\n                [placeholder]=\"'order.search-by-order-filters' | translate\"\n                class=\"search-input\"\n            />\n        </div>\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\n            <form [formGroup]=\"customFilterForm\">\n                <div class=\"flex align-center\">\n                    <ng-select\n                        [items]=\"orderStates\"\n                        appendTo=\"body\"\n                        [addTag]=\"false\"\n                        [multiple]=\"true\"\n                        formControlName=\"states\"\n                        [placeholder]=\"'state.all-orders' | translate\"\n                        [clearable]=\"true\"\n                        [searchable]=\"false\"\n                    >\n                        <ng-template ng-option-tmp let-item=\"item\">{{\n                            item | stateI18nToken | translate\n                        }}</ng-template>\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\"\n                                >×</span\n                            >\n                        </ng-template>\n                    </ng-select>\n                    <button\n                        class=\"btn btn-secondary\"\n                        [disabled]=\"customFilterForm.pristine\"\n                        (click)=\"applyCustomFilters()\"\n                    >\n                        {{ 'order.apply-filters' | translate }}\n                        <clr-icon shape=\"filter\"></clr-icon>\n                    </button>\n                </div>\n                <div class=\"flex\">\n                    <div>\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\n                    </div>\n                    <div>\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\n        <ng-container *ngIf=\"canCreateDraftOrder\">\n            <a\n                class=\"btn btn-primary mt1\"\n                *vdrIfPermissions=\"['CreateOrder']\"\n                [routerLink]=\"['./draft/create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-draft-order' | translate }}\n            </a>\n        </ng-container>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [customRowHeight]=\"5\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.time-left' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-order=\"item\">\n        <td class=\"left align-middle\">\n            <vdr-order-label [order]=\"order\"></vdr-order-label>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </td>\n        <td class=\"left align-middle\">{{ order.totalWithTax | localeCurrency: order.currencyCode }}</td>\n        <td class=\"left align-middle\">\n            {{ formatTime(order.orderPlacedAt) }}<br />{{ formatDate(order.orderPlacedAt) }}\n        </td>\n        <td class=\"left align-middle\" style=\"font-size: 16px\">\n            <vdr-cd-timer\n                [autoStart]\n                [scheduledTime]=\"order.customFields.scheduledTime\"\n                [processingTime]=\"processingTime\"\n                [placedTime]=\"order.orderPlacedAt\"\n                format=\"ms\"\n                maxTimeUnit=\"hour\"\n            ></vdr-cd-timer>\n        </td>\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                [large]=\"true\"\n                *ngIf=\"order.nextStates.length > 0\"\n                iconShape=\"step-forward-2\"\n                [label]=\"getNextState(order, true)\"\n                (click)=\"toNextState(order)\"\n            ></vdr-table-row-action>\n            <!-- <vdr-table-row-action\n                iconShape=\"shopping-cart\"\n                [label]=\"'common.open' | translate\"\n                [linkTo]=\"\n                    order.state === 'Modifying'\n                        ? ['./', order.id, 'modify']\n                        : order.state === 'Draft'\n                        ? ['./draft', order.id]\n                        : ['./', order.id]\n                \"\n            ></vdr-table-row-action> -->\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetOrderList,\n    LocalStorageService,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    OrderDataService,\n    OrderItem,\n    OrderListOptions,\n    ServerConfigService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { Order } from '@vendure/common/lib/generated-types';\nimport dayjs from 'dayjs';\nimport { EMPTY, merge, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    filter,\n    map,\n    pairwise,\n    startWith,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\ninterface OrderFilterConfig {\n    active?: boolean;\n    states?: string[];\n}\n\ninterface FilterPreset {\n    name: string;\n    label: string;\n    config: OrderFilterConfig;\n}\n\n@Component({\n    selector: 'vdr-order-list',\n    templateUrl: './order-list.component.html',\n    styleUrls: ['./order-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderListComponent\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\n    implements OnInit, OnDestroy\n{\n    itemList: GetOrderList.Items[] = [];\n    audioElem: HTMLAudioElement;\n    refreshInterval: any;\n    processingTime: number;\n    audioOn = false;\n    searchControl = new FormControl('');\n    searchOrderCodeControl = new FormControl('');\n    searchLastNameControl = new FormControl('');\n    customFilterForm: FormGroup;\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\n    filterPresets: FilterPreset[] = [\n        {\n            name: 'open', // have this show everything\n            label: _('order.filter-preset-open'),\n            config: {\n                active: false,\n                states: this.orderStates.filter(s => s !== 'Completed' && s !== 'Cancelled' && s !== 'Draft'),\n            },\n        },\n\n        {\n            name: 'completed',\n            label: _('order.filter-preset-completed'),\n            config: {\n                states: ['Completed', 'Cancelled'],\n            },\n        },\n        {\n            name: 'active',\n            label: _('order.filter-preset-active'),\n            config: {\n                active: true,\n            },\n        },\n        {\n            name: 'draft',\n            label: _('order.filter-preset-draft'),\n            config: {\n                active: false,\n                states: ['Draft'],\n            },\n        },\n    ];\n    activePreset$: Observable<string>;\n    canCreateDraftOrder = false;\n\n    constructor(\n        private serverConfigService: ServerConfigService,\n        private dataService: DataService,\n        private localStorageService: LocalStorageService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            // tslint:disable-next-line:no-shadowed-variable\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\n            data => data.orders,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) =>\n                this.createQueryOptions(\n                    skip,\n                    take,\n                    this.searchControl.value,\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\n                ),\n        );\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\n        if (lastFilters) {\n            this.setQueryParam(lastFilters, { replaceUrl: true });\n        }\n        this.canCreateDraftOrder = !!this.serverConfigService\n            .getOrderProcessStates()\n            .find(state => state.name === 'Created')\n            ?.to.includes('Draft');\n        if (!this.canCreateDraftOrder) {\n            this.filterPresets = this.filterPresets.filter(p => p.name !== 'draft');\n        }\n    }\n\n    async ngOnInit() {\n        super.ngOnInit();\n        this.activePreset$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('filter') || 'open'),\n            distinctUntilChanged(),\n        );\n        this.dataService.settings.getActiveChannel().single$.subscribe(channel => {\n            this.processingTime = (channel.activeChannel as any)['customFields']['processingTime'];\n        });\n        const searchTerms$ = merge(this.searchControl.valueChanges).pipe(\n            filter(value => 2 < value.length || value.length === 0),\n            debounceTime(250),\n        );\n        merge(searchTerms$, this.route.queryParamMap)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(val => {\n                this.refresh();\n            });\n\n        const queryParamMap = this.route.snapshot.queryParamMap;\n        this.customFilterForm = new FormGroup({\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\n        });\n        this.setItemsPerPage(50); // default to 50\n        this.refreshInterval = setInterval(() => {\n            // const currentList = await this.items$.toPromise();\n            this.refresh();\n            // const newList = await this.items$.toPromise();\n            // console.log(newList.length, currentList.length);\n        }, 15000);\n\n        this.audioElem = document.getElementById('audio_player') as HTMLAudioElement;\n        this.audioElem.muted = true;\n        this.audioElem.addEventListener(\n            'play',\n            () => {\n                this.audioOn = true;\n                this.audioElem!.addEventListener('ended', () => {\n                    this.audioOn = true;\n                    this.audioElem!.muted = false;\n                });\n            },\n            { once: true },\n        );\n\n        this.audioElem.play().then(() => {\n            this.audioOn = true;\n        });\n        this.items$.subscribe(value => {\n            if (this.itemList.length !== 0 && this.itemList.length < value.length) {\n                this.playAudio();\n            }\n            this.itemList = value;\n            // console.log(previousValue?.length, currentValue?.length);\n            /** Do something */\n        });\n        // await this.refreshInterval();\n    }\n    toggleAudio() {\n        if (!this.audioOn) {\n            this.audioElem.play();\n        } else {\n            this.audioOn = !this.audioOn;\n            this.audioElem!.muted = !this.audioOn;\n        }\n    }\n    playAudio() {\n        this.audioElem?.play();\n    }\n    formatTime(date: Date) {\n        return dayjs(date).format('hh:mm A');\n    }\n    formatDate(date: Date) {\n        return dayjs(date).format('DD/MMM');\n    }\n\n    getNextState(order: Order, buttonText: boolean = false) {\n        const authorizedCashPayment = order.payments?.filter(\n            p => p.state === 'Authorized' && p.method === 'cash',\n        )[0];\n        if (order.state === 'PaymentSettled' || order.state === 'PaymentAuthorized') {\n            return 'Processing';\n        }\n        if (order.state === 'Processing') {\n            return buttonText ? 'Ready For Pickup' : 'ReadyForPickup';\n        }\n        if (order.state === 'ReadyForPickup') {\n            if (order.shippingLines[0].shippingMethod.code === 'delivery') {\n                return 'Delivering';\n            }\n            if (authorizedCashPayment) {\n                return buttonText ? 'Collect Cash' : 'Completed';\n            } else {\n                return 'Completed';\n            }\n        }\n        if (order.state === 'Delivering') {\n            if (authorizedCashPayment) {\n                return buttonText ? 'Collect Cash' : 'Completed';\n            } else {\n                return 'Completed';\n            }\n        }\n\n        return 'Processing';\n    }\n\n    toNextState(order: Order) {\n        return this.modalService\n            .dialog({\n                title: `Proceed to ${this.getNextState(order, true)}?`,\n                body: `Are you sure you want to proceed to '${this.getNextState(order, true)}'?`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'primary', label: 'Confirm', returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(async res => {\n                    if (res) {\n                        if (this.getNextState(order) === 'Completed') {\n                            const authorizedCashPayment = order.payments?.filter(\n                                p => p.state === 'Authorized' && p.method === 'cash',\n                            )[0];\n                            if (authorizedCashPayment) {\n                                const output = await this.dataService.order\n                                    .settlePayment(authorizedCashPayment?.id.toString())\n                                    .toPromise();\n                            }\n                        }\n                        await this.dataService.order\n                            .transitionToState(order.id.toString(), this.getNextState(order))\n                            .toPromise();\n                        return true;\n                    }\n                    return EMPTY;\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success('Successfully Updated Order State');\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error('Error Updating Order State');\n                },\n            );\n    }\n\n    selectFilterPreset(presetName: string) {\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\n        this.setQueryParam(\n            {\n                filter: presetName,\n                page: 1,\n                ...filters,\n            },\n            { replaceUrl: true },\n        );\n    }\n\n    applyCustomFilters() {\n        const formValue = this.customFilterForm.value;\n        const customFilters = {\n            states: formValue.states,\n            placedAtStart: formValue.placedAtStart,\n            placedAtEnd: formValue.placedAtEnd,\n        };\n        this.setQueryParam({\n            filter: 'custom',\n            ...customFilters,\n        });\n        this.customFilterForm.markAsPristine();\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\n    }\n\n    private createQueryOptions(\n        // tslint:disable-next-line:no-shadowed-variable\n        skip: number,\n        take: number,\n        searchTerm: string,\n        activeFilterPreset?: string,\n    ): { options: OrderListOptions } {\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\n        // tslint:disable-next-line:no-shadowed-variable\n        let filter: any = {};\n        let filterOperator: LogicalOperator = LogicalOperator.AND;\n        if (filterConfig) {\n            if (filterConfig.config.active != null) {\n                filter.active = {\n                    eq: filterConfig.config.active,\n                };\n            }\n            if (filterConfig.config.states) {\n                filter.state = {\n                    in: filterConfig.config.states,\n                };\n            }\n        } else if (activeFilterPreset === 'custom') {\n            const queryParams = this.route.snapshot.queryParamMap;\n            const states = queryParams.getAll('states') ?? [];\n            const placedAtStart = queryParams.get('placedAtStart');\n            const placedAtEnd = queryParams.get('placedAtEnd');\n            if (states.length) {\n                filter.state = {\n                    in: states,\n                };\n            }\n            if (placedAtStart && placedAtEnd) {\n                filter.orderPlacedAt = {\n                    between: {\n                        start: placedAtStart,\n                        end: placedAtEnd,\n                    },\n                };\n            } else if (placedAtStart) {\n                filter.orderPlacedAt = {\n                    after: placedAtStart,\n                };\n            } else if (placedAtEnd) {\n                filter.orderPlacedAt = {\n                    before: placedAtEnd,\n                };\n            }\n        }\n        if (searchTerm) {\n            filter = {\n                customerLastName: {\n                    contains: searchTerm,\n                },\n                transactionId: {\n                    contains: searchTerm,\n                },\n                code: {\n                    contains: searchTerm,\n                },\n            };\n            filterOperator = LogicalOperator.OR;\n        }\n        return {\n            options: {\n                skip,\n                take,\n                filter: {\n                    ...(filter ?? {}),\n                },\n                sort: {\n                    updatedAt: SortOrder.DESC,\n                },\n                filterOperator,\n            },\n        };\n    }\n\n    getShippingNames(order: Order) {\n        if (order.shippingLines.length) {\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\n        } else {\n            return '';\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    ActivationStart,\n    Resolve,\n    Router,\n    RouterStateSnapshot,\n} from '@angular/router';\nimport { DataService, OrderDetailFragment } from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { DraftOrderDetailComponent } from '../../components/draft-order-detail/draft-order-detail.component';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderResolver implements Resolve<Observable<OrderDetailFragment>> {\n    constructor(private router: Router, private dataService: DataService) {}\n\n    /** @internal */\n    resolve(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot,\n    ): Observable<Observable<OrderDetailFragment>> {\n        const id = route.paramMap.get('id');\n\n        // Complete the entity stream upon navigating away\n        const navigateAway$ = this.router.events.pipe(filter(event => event instanceof ActivationStart));\n\n        const stream = this.dataService.order\n            .getOrder(id!)\n            .mapStream(data => data.order)\n            .pipe(\n                switchMap(order => {\n                    if (order?.state === 'Draft' && route.component !== DraftOrderDetailComponent) {\n                        // Make sure Draft orders only get displayed with the DraftOrderDetailComponent\n                        this.router.navigate(['/orders/draft', id]);\n                        return EMPTY;\n                    } else {\n                        return [order];\n                    }\n                }),\n                takeUntil(navigateAway$),\n                filter(notNullOrUndefined),\n                shareReplay(1),\n            );\n\n        return stream.pipe(\n            take(1),\n            map(() => stream),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, mergeMapTo, tap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderGuard implements CanActivate {\n    constructor(private dataService: DataService, private router: Router) {}\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot,\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        const isDraft = state.url.includes('orders/draft');\n        const id = route.paramMap.get('id');\n        if (isDraft) {\n            if (id === 'create') {\n                return this.dataService.order\n                    .createDraftOrder()\n                    .pipe(\n                        map(({ createDraftOrder }) =>\n                            this.router.parseUrl(`/orders/draft/${createDraftOrder.id}`),\n                        ),\n                    );\n            } else {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BreadcrumbLabelLinkPair,\n    CanDeactivateDetailGuard,\n    detailBreadcrumb,\n    OrderDetail,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { DraftOrderDetailComponent } from './components/draft-order-detail/draft-order-detail.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderResolver } from './providers/routing/order-resolver';\nimport { OrderGuard } from './providers/routing/order.guard';\n\nexport const orderRoutes: Route[] = [\n    {\n        path: '',\n        component: OrderListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.orders'),\n        },\n    },\n    {\n        path: 'draft/:id',\n        component: DraftOrderDetailComponent,\n        resolve: {\n            entity: OrderResolver,\n        },\n        canActivate: [OrderGuard],\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: orderBreadcrumb,\n        },\n    },\n    {\n        path: ':id',\n        component: OrderDetailComponent,\n        resolve: {\n            entity: OrderResolver,\n        },\n        canActivate: [OrderGuard],\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: orderBreadcrumb,\n        },\n    },\n    {\n        path: ':id/modify',\n        component: OrderEditorComponent,\n        resolve: {\n            entity: OrderResolver,\n        },\n        // canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: modifyingOrderBreadcrumb,\n        },\n    },\n];\n\nexport function orderBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<OrderDetail.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.orders',\n        getName: order => order.code,\n        route: '',\n    });\n}\n\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\n    return orderBreadcrumb(data, params).pipe(\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\n            const modifiedBreadcrumbs = breadcrumbs.slice();\n            modifiedBreadcrumbs[0].link[0] = '../';\n            modifiedBreadcrumbs[1].link[0] = '../orders';\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\n        }) as any,\n    );\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\nimport { DraftOrderDetailComponent } from './components/draft-order-detail/draft-order-detail.component';\nimport { DraftOrderVariantSelectorComponent } from './components/draft-order-variant-selector/draft-order-variant-selector.component';\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\nimport { OrderTableComponent } from './components/order-table/order-table.component';\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\nimport { SelectCustomerDialogComponent } from './components/select-customer-dialog/select-customer-dialog.component';\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\nimport { orderRoutes } from './order.routes';\nimport { SelectAddressDialogComponent } from './components/select-address-dialog/select-address-dialog.component';\nimport { CouponCodeSelectorComponent } from './components/coupon-code-selector/coupon-code-selector.component';\nimport { SelectShippingMethodDialogComponent } from './components/select-shipping-method-dialog/select-shipping-method-dialog.component';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\n    declarations: [\n        OrderListComponent,\n        OrderDetailComponent,\n        FulfillOrderDialogComponent,\n        LineFulfillmentComponent,\n        RefundOrderDialogComponent,\n        CancelOrderDialogComponent,\n        PaymentStateLabelComponent,\n        LineRefundsComponent,\n        OrderPaymentCardComponent,\n        RefundStateLabelComponent,\n        SettleRefundDialogComponent,\n        OrderHistoryComponent,\n        FulfillmentDetailComponent,\n        PaymentDetailComponent,\n        SimpleItemListComponent,\n        OrderCustomFieldsCardComponent,\n        OrderProcessGraphComponent,\n        OrderProcessNodeComponent,\n        OrderProcessEdgeComponent,\n        OrderProcessGraphDialogComponent,\n        FulfillmentStateLabelComponent,\n        FulfillmentCardComponent,\n        OrderEditorComponent,\n        OrderTableComponent,\n        OrderEditsPreviewDialogComponent,\n        ModificationDetailComponent,\n        AddManualPaymentDialogComponent,\n        OrderStateSelectDialogComponent,\n        DraftOrderDetailComponent,\n        DraftOrderVariantSelectorComponent,\n        SelectCustomerDialogComponent,\n        SelectAddressDialogComponent,\n        CouponCodeSelectorComponent,\n        SelectShippingMethodDialogComponent,\n    ],\n})\nexport class OrderModule {}\n"]}
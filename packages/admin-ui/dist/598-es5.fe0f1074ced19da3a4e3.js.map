{"version":3,"mappings":"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","names":["o","h","constructor","t","n","i","a","s","m","p","super","this","customFields","getCustomFieldConfig","detailForm","formBuilder","group","name","c","enabled","couponCode","perCustomerUsageLimit","startsAt","endsAt","conditions","array","actions","reduce","C","b","Object","ngOnInit","init","promotion$","entity$","dataService","promotion","getPromotionActionsAndConditions","single$","subscribe","allActions","promotionActions","allConditions","promotionConditions","changeDetector","markForCheck","ngOnDestroy","destroy","getAvailableConditions","filter","find","code","getConditionDefinition","getAvailableActions","getActionDefinition","saveButtonEnabled","dirty","valid","length","value","addCondition","addOperation","markAsDirty","addAction","removeCondition","removeOperation","removeAction","formArrayOf","get","create","mapOperationsToInputs","createPromotion","__typename","notificationService","success","l","entity","markAsPristine","router","navigate","id","relativeTo","route","error","message","save","pipe","Q","I","updatePromotion","setFormValues","patchValue","forEach","setCustomFieldFormValues","map","arguments","values","args","d","findIndex","_defineProperty","getDefaultArgValue","push","control","Error","removeAt","splice","selectors","v","getPromotions","refetchOnChannelChange","promotions","createQueryOptions","searchForm","to","valueChanges","eo","queryParamMap","io","destroy$","params","setPageNumber","refresh","deletePromotion","modalService","dialog","title","buttons","type","label","returnValue","ro","no","contains","options","skip","take","g","createdAt","updatedAt","getPromotion","mapStream","factory","Éµfac","N","path","component","data","breadcrumb","resolve","canDeactivate","q","e","breadcrumbKey","getName","Z","u"],"sources":["webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.html","webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.ts","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.html","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.ts","webpack:///src/lib/marketing/src/providers/routing/promotion-resolver.ts","webpack:///src/lib/marketing/src/marketing.routes.ts","webpack:///src/lib/marketing/src/marketing.module.ts"],"sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <clr-toggle-wrapper *vdrIfPermissions=\"'UpdatePromotion'\">\n                <input type=\"checkbox\" clrToggle name=\"enabled\" [formControl]=\"detailForm.get(['enabled'])\" />\n                <label>{{ 'common.enabled' | translate }}</label>\n            </clr-toggle-wrapper>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"promotion-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"'UpdatePromotion'\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n            type=\"text\"\n            formControlName=\"name\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.starts-at' | translate\" for=\"startsAt\">\n        <vdr-datetime-picker formControlName=\"startsAt\"></vdr-datetime-picker>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.ends-at' | translate\" for=\"endsAt\">\n        <vdr-datetime-picker formControlName=\"endsAt\"></vdr-datetime-picker>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.coupon-code' | translate\" for=\"couponCode\">\n        <input\n            id=\"couponCode\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n            type=\"text\"\n            formControlName=\"couponCode\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.per-customer-limit' | translate\" for=\"perCustomerUsageLimit\">\n        <input\n            id=\"perCustomerUsageLimit\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n            type=\"number\"\n            min=\"1\"\n            max=\"999\"\n            formControlName=\"perCustomerUsageLimit\"\n        />\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"Promotion\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n\n    <vdr-custom-detail-component-host\n        locationId=\"promotion-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n\n    <div class=\"clr-row\">\n        <div class=\"clr-col\" formArrayName=\"conditions\">\n            <label class=\"clr-control-label\">{{ 'marketing.conditions' | translate }}</label>\n            <ng-container *ngFor=\"let condition of conditions; index as i\">\n                <vdr-configurable-input\n                    (remove)=\"removeCondition($event)\"\n                    [position]=\"i\"\n                    [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                    [operation]=\"condition\"\n                    [operationDefinition]=\"getConditionDefinition(condition)\"\n                    [formControlName]=\"i\"\n                ></vdr-configurable-input>\n            </ng-container>\n\n            <div>\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-condition' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let condition of getAvailableConditions()\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            class=\"item-wrap\"\n                            (click)=\"addCondition(condition)\"\n                        >\n                            {{ condition.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\" formArrayName=\"actions\">\n            <label class=\"clr-control-label\">{{ 'marketing.actions' | translate }}</label>\n            <vdr-configurable-input\n                *ngFor=\"let action of actions; index as i\"\n                (remove)=\"removeAction($event)\"\n                [position]=\"i\"\n                [operation]=\"action\"\n                [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                [operationDefinition]=\"getActionDefinition(action)\"\n                [formControlName]=\"i\"\n            ></vdr-configurable-input>\n            <div>\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-action' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let action of getAvailableActions()\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            class=\"item-wrap\"\n                            (click)=\"addAction(action)\"\n                        >\n                            {{ action.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n    </div>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreatePromotionInput,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    getConfigArgValue,\n    getDefaultConfigArgValue,\n    LanguageCode,\n    NotificationService,\n    Promotion,\n    ServerConfigService,\n    UpdatePromotionInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-promotion-detail',\n    templateUrl: './promotion-detail.component.html',\n    styleUrls: ['./promotion-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionDetailComponent\n    extends BaseDetailComponent<Promotion.Fragment>\n    implements OnInit, OnDestroy\n{\n    promotion$: Observable<Promotion.Fragment>;\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    conditions: ConfigurableOperation[] = [];\n    actions: ConfigurableOperation[] = [];\n\n    private allConditions: ConfigurableOperationDefinition[] = [];\n    private allActions: ConfigurableOperationDefinition[] = [];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Promotion');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: true,\n            couponCode: null,\n            perCustomerUsageLimit: null,\n            startsAt: null,\n            endsAt: null,\n            conditions: this.formBuilder.array([]),\n            actions: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.promotion$ = this.entity$;\n        this.dataService.promotion.getPromotionActionsAndConditions().single$.subscribe(data => {\n            this.allActions = data.promotionActions;\n            this.allConditions = data.promotionConditions;\n            this.changeDetector.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getAvailableConditions(): ConfigurableOperationDefinition[] {\n        return this.allConditions.filter(o => !this.conditions.find(c => c.code === o.code));\n    }\n\n    getConditionDefinition(condition: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allConditions.find(c => c.code === condition.code);\n    }\n\n    getAvailableActions(): ConfigurableOperationDefinition[] {\n        return this.allActions.filter(o => !this.actions.find(a => a.code === o.code));\n    }\n\n    getActionDefinition(action: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allActions.find(c => c.code === action.code);\n    }\n\n    saveButtonEnabled(): boolean {\n        return (\n            this.detailForm.dirty &&\n            this.detailForm.valid &&\n            (this.conditions.length !== 0 || this.detailForm.value.couponCode) &&\n            this.actions.length !== 0\n        );\n    }\n\n    addCondition(condition: ConfigurableOperation) {\n        this.addOperation('conditions', condition);\n        this.detailForm.markAsDirty();\n    }\n\n    addAction(action: ConfigurableOperation) {\n        this.addOperation('actions', action);\n        this.detailForm.markAsDirty();\n    }\n\n    removeCondition(condition: ConfigurableOperation) {\n        this.removeOperation('conditions', condition);\n        this.detailForm.markAsDirty();\n    }\n\n    removeAction(action: ConfigurableOperation) {\n        this.removeOperation('actions', action);\n        this.detailForm.markAsDirty();\n    }\n\n    formArrayOf(key: 'conditions' | 'actions'): FormArray {\n        return this.detailForm.get(key) as FormArray;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input: CreatePromotionInput = {\n            name: formValue.name,\n            enabled: true,\n            couponCode: formValue.couponCode,\n            perCustomerUsageLimit: formValue.perCustomerUsageLimit,\n            startsAt: formValue.startsAt,\n            endsAt: formValue.endsAt,\n            conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\n            actions: this.mapOperationsToInputs(this.actions, formValue.actions),\n            customFields: formValue.customFields,\n        };\n        this.dataService.promotion.createPromotion(input).subscribe(\n            ({ createPromotion }) => {\n                switch (createPromotion.__typename) {\n                    case 'Promotion':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Promotion',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', createPromotion.id], { relativeTo: this.route });\n                        break;\n                    case 'MissingConditionsError':\n                        this.notificationService.error(createPromotion.message);\n                        break;\n                }\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Promotion',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.promotion$\n            .pipe(\n                take(1),\n                mergeMap(promotion => {\n                    const input: UpdatePromotionInput = {\n                        id: promotion.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        couponCode: formValue.couponCode,\n                        perCustomerUsageLimit: formValue.perCustomerUsageLimit,\n                        startsAt: formValue.startsAt,\n                        endsAt: formValue.endsAt,\n                        conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\n                        actions: this.mapOperationsToInputs(this.actions, formValue.actions),\n                        customFields: formValue.customFields,\n                    };\n                    return this.dataService.promotion.updatePromotion(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Promotion',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Promotion',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: Promotion.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            couponCode: entity.couponCode,\n            perCustomerUsageLimit: entity.perCustomerUsageLimit,\n            startsAt: entity.startsAt,\n            endsAt: entity.endsAt,\n        });\n        entity.conditions.forEach(o => {\n            this.addOperation('conditions', o);\n        });\n        entity.actions.forEach(o => this.addOperation('actions', o));\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\n        }\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.values<any>(formValueOperations[i].args).map((value, j) => ({\n                    name: o.args[j].name,\n                    value: encodeConfigArgValue(value),\n                })),\n            };\n        });\n    }\n\n    /**\n     * Adds a new condition or action to the promotion.\n     */\n    private addOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\n        const operationsArray = this.formArrayOf(key);\n        const collection = key === 'conditions' ? this.conditions : this.actions;\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\n        if (index === -1) {\n            const argsHash = operation.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]:\n                        getConfigArgValue(arg.value) ?? this.getDefaultArgValue(key, operation, arg.name),\n                }),\n                {},\n            );\n            operationsArray.push(\n                this.formBuilder.control({\n                    code: operation.code,\n                    args: argsHash,\n                }),\n            );\n            collection.push({\n                code: operation.code,\n                args: operation.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    private getDefaultArgValue(\n        key: 'conditions' | 'actions',\n        operation: ConfigurableOperation,\n        argName: string,\n    ) {\n        const def =\n            key === 'conditions'\n                ? this.allConditions.find(c => c.code === operation.code)\n                : this.allActions.find(a => a.code === operation.code);\n        if (def) {\n            const argDef = def.args.find(a => a.name === argName);\n            if (argDef) {\n                return getDefaultConfigArgValue(argDef);\n            }\n        }\n        throw new Error(`Could not determine default value for \"argName\"`);\n    }\n\n    /**\n     * Removes a condition or action from the promotion.\n     */\n    private removeOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\n        const operationsArray = this.formArrayOf(key);\n        const collection = key === 'conditions' ? this.conditions : this.actions;\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\n        if (index !== -1) {\n            operationsArray.removeAt(index);\n            collection.splice(index, 1);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <form class=\"search-form\" [formGroup]=\"searchForm\">\n            <input\n                type=\"text\"\n                formControlName=\"name\"\n                [placeholder]=\"'marketing.search-by-name' | translate\"\n                class=\"search-input\"\n            />\n            <input\n                type=\"text\"\n                formControlName=\"couponCode\"\n                [placeholder]=\"'marketing.search-by-coupon-code' | translate\"\n                class=\"search-input\"\n            />\n        </form>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"promotion-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\"\n           *vdrIfPermissions=\"'CreatePromotion'\"\n           [routerLink]=\"['./create']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'marketing.create-new-promotion' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'marketing.coupon-code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'marketing.starts-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'marketing.ends-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-promotion=\"item\">\n        <td class=\"left align-middle\">{{ promotion.name }}</td>\n        <td class=\"left align-middle\">\n            <vdr-chip *ngIf=\"promotion.couponCode\">\n                {{ promotion.couponCode }}\n            </vdr-chip>\n        </td>\n        <td class=\"left align-middle\">{{ promotion.startsAt | localeDate: 'longDate' }}</td>\n        <td class=\"left align-middle\">{{ promotion.endsAt | localeDate: 'longDate' }}</td>\n        <td class=\"align-middle\">\n            <vdr-chip *ngIf=\"!promotion.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', promotion.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deletePromotion(promotion.id)\"\n                        [disabled]=\"!('DeletePromotion' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent, PromotionFilterParameter, PromotionListOptions } from '@vendure/admin-ui/core';\nimport { GetPromotionList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { debounceTime, switchMap, takeUntil } from 'rxjs/operators';\n\nexport type PromotionSearchForm = {\n    name: string;\n    couponCode: string;\n};\n\n@Component({\n    selector: 'vdr-promotion-list',\n    templateUrl: './promotion-list.component.html',\n    styleUrls: ['./promotion-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionListComponent\n    extends BaseListComponent<GetPromotionList.Query, GetPromotionList.Items>\n    implements OnInit {\n    searchForm = new FormGroup({\n        name: new FormControl(''),\n        couponCode: new FormControl(''),\n    });\n\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.promotion.getPromotions(...args).refetchOnChannelChange(),\n            data => data.promotions,\n            (skip, take) => this.createQueryOptions(skip, take, this.searchForm.value),\n        );\n    }\n\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        merge(this.searchForm.valueChanges.pipe(debounceTime(250)), this.route.queryParamMap)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(val => {\n                if (!val.params) {\n                    this.setPageNumber(1);\n                }\n                this.refresh();\n            });\n    }\n\n    deletePromotion(promotionId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-promotion'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.promotion.deletePromotion(promotionId) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Promotion',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Promotion',\n                    });\n                },\n            );\n    }\n\n    private createQueryOptions(\n        skip: number,\n        take: number,\n        searchForm: PromotionSearchForm,\n    ): { options: PromotionListOptions } {\n        const filter: PromotionFilterParameter = {};\n\n        if (searchForm.couponCode) {\n            filter.couponCode = { contains: searchForm.couponCode };\n        }\n\n        if (searchForm.name) {\n            filter.name = { contains: searchForm.name };\n        }\n\n        return {\n            options: {\n                skip,\n                take,\n                filter,\n            },\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, Promotion } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class PromotionResolver extends BaseEntityResolver<Promotion.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Promotion',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                enabled: false,\n                conditions: [],\n                actions: [],\n            },\n            id => dataService.promotion.getPromotion(id).mapStream(data => data.promotion),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { CanDeactivateDetailGuard, createResolveData, detailBreadcrumb, Promotion } from '@vendure/admin-ui/core';\n\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\nimport { PromotionResolver } from './providers/routing/promotion-resolver';\n\nexport const marketingRoutes: Route[] = [\n    {\n        path: 'promotions',\n        component: PromotionListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.promotions'),\n        },\n    },\n    {\n        path: 'promotions/:id',\n        component: PromotionDetailComponent,\n        resolve: createResolveData(PromotionResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: promotionBreadcrumb,\n        },\n    },\n];\n\nexport function promotionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Promotion.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.promotions',\n        getName: promotion => promotion.name,\n        route: 'promotions',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\nimport { marketingRoutes } from './marketing.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(marketingRoutes)],\n    declarations: [PromotionListComponent, PromotionDetailComponent],\n})\nexport class MarketingModule {}\n"]}
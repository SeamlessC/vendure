{"version":3,"mappings":"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","names":["t","g","constructor","e","ngAfterViewInit","this","loadWidget","widgetConfig","loadComponent","Promise","o","componentRef","portal","createComponent","componentFactoryResolver","resolveComponentFactory","changeDetectorRef","detectChanges","ngOnDestroy","destroy","selectors","p","r","i","ngOnInit","availableWidgetIds$","dataService","client","userStatus","stream$","pipe","b","permissions","dashboardWidgetService","getAvailableIds","I","widgetLayout","initLayout","getClassForWidth","F","getSupportedWidths","supportedWidths","setWidgetWidth","width","recalculateLayout","trackRow","map","id","join","trackRowItem","config","addWidget","getWidgetById","l","c","length","push","removeWidget","deletionMarker","drop","currentIndex","previousIndex","previousContainer","container","data","index","U","splice","item","localStorageService","get","filter","includes","getWidgetLayout","reduce","_toConsumableArray","set","setTimeout","changedDetectorRef","markForCheck","O","path","component","pathMatch","m","latestOrders$","order","getOrders","take","active","eq","state","notEq","sort","orderPlacedAt","d","refetchOnChannelChange","mapStream","orders","items","u","date","oxw","selection$","h","Date","setDate","today","getDate","ct","timeframe","dateRange$","lt","start","L","startOf","toDate","end","endOf","M","gt","_ref2","getOrderSummary","totalOrderCount$","totalItems","totalOrderValue$","total","currencyCode$","settings","getActiveChannel","activeChannel","currencyCode","f","v","_","y","brand","hideVendureBranding","hideVersion","administrator$","administrator","getActiveAdministrator","activeAdministrator","C","S","k","welcome","orderSummary","title","D","requiresPermissions","latestOrders","testWidget","Z","Object","entries","registerWidget","getDefaultLayout","setDefaultLayout","tt"],"sources":["webpack:///src/lib/dashboard/src/components/dashboard-widget/dashboard-widget.component.html","webpack:///src/lib/dashboard/src/components/dashboard-widget/dashboard-widget.component.ts","webpack:///src/lib/dashboard/src/components/dashboard/dashboard.component.html","webpack:///src/lib/dashboard/src/components/dashboard/dashboard.component.ts","webpack:///src/lib/dashboard/src/dashboard.routes.ts","webpack:///src/lib/dashboard/src/widgets/latest-orders-widget/latest-orders-widget.component.html","webpack:///src/lib/dashboard/src/widgets/latest-orders-widget/latest-orders-widget.component.ts","webpack:///src/lib/dashboard/src/widgets/order-summary-widget/order-summary-widget.component.html","webpack:///src/lib/dashboard/src/widgets/order-summary-widget/order-summary-widget.component.ts","webpack:///src/lib/dashboard/src/widgets/test-widget/test-widget.component.ts","webpack:///src/lib/dashboard/src/widgets/test-widget/test-widget.component.html","webpack:///src/lib/dashboard/src/widgets/welcome-widget/welcome-widget.component.html","webpack:///src/lib/dashboard/src/widgets/welcome-widget/welcome-widget.component.ts","webpack:///src/lib/dashboard/src/default-widgets.ts","webpack:///src/lib/dashboard/src/dashboard.module.ts"],"sourcesContent":["<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"title\">\n            <ng-container *ngIf=\"widgetConfig.title as title\">{{ title | translate }}</ng-container>\n        </div>\n        <div class=\"controls\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <ng-template #portal></ng-template>\n    </div>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    ViewContainerRef,\n} from '@angular/core';\nimport { DashboardWidgetConfig } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-dashboard-widget',\n    templateUrl: './dashboard-widget.component.html',\n    styleUrls: ['./dashboard-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DashboardWidgetComponent implements AfterViewInit, OnDestroy {\n    @Input() widgetConfig: DashboardWidgetConfig;\n\n    @ViewChild('portal', { read: ViewContainerRef })\n    private portal: ViewContainerRef;\n\n    private componentRef: ComponentRef<any>;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver) {}\n\n    ngAfterViewInit(): void {\n        this.loadWidget();\n    }\n\n    private async loadWidget() {\n        const loadComponentResult = this.widgetConfig.loadComponent();\n        const componentType =\n            loadComponentResult instanceof Promise ? await loadComponentResult : loadComponentResult;\n        this.componentRef = this.portal.createComponent(\n            this.componentFactoryResolver.resolveComponentFactory(componentType),\n        );\n        this.componentRef.changeDetectorRef.detectChanges();\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n        }\n    }\n}\n","<div class=\"widget-header\">\n    <vdr-dropdown>\n        <button class=\"btn btn-secondary btn-sm\" vdrDropdownTrigger>\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'dashboard.add-widget' | translate }}\n        </button>\n        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n            <button\n                class=\"button\"\n                vdrDropdownItem\n                *ngFor=\"let id of availableWidgetIds$ | async\"\n                (click)=\"addWidget(id)\"\n            >\n                {{ id }}\n            </button>\n        </vdr-dropdown-menu>\n    </vdr-dropdown>\n</div>\n<div cdkDropListGroup>\n    <div\n        class=\"clr-row dashboard-row\"\n        *ngFor=\"let row of widgetLayout; index as rowIndex; trackBy: trackRow\"\n        cdkDropList\n        (cdkDropListDropped)=\"drop($event)\"\n        cdkDropListOrientation=\"horizontal\"\n        [cdkDropListData]=\"{ index: rowIndex }\"\n    >\n        <div\n            *ngFor=\"let widget of row; trackBy: trackRowItem\"\n            class=\"dashboard-item\"\n            [ngClass]=\"getClassForWidth(widget.width)\"\n            cdkDrag\n            [cdkDragData]=\"widget\"\n        >\n            <vdr-dashboard-widget\n                *vdrIfPermissions=\"widget.config.requiresPermissions || null\"\n                [widgetConfig]=\"widget.config\"\n            >\n                <div class=\"flex\">\n                    <div class=\"drag-handle\" cdkDragHandle>\n                        <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\n                    </div>\n                    <vdr-dropdown>\n                        <button class=\"icon-button\" vdrDropdownTrigger>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <h4 class=\"dropdown-header\">{{ 'dashboard.widget-resize' | translate }}</h4>\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                [disabled]=\"width === widget.width\"\n                                *ngFor=\"let width of getSupportedWidths(widget.config)\"\n                                (click)=\"setWidgetWidth(widget, width)\"\n                            >\n                                {{ 'dashboard.widget-width' | translate: { width: width } }}\n                            </button>\n                            <div class=\"dropdown-divider\" role=\"separator\"></div>\n                            <button class=\"button\" vdrDropdownItem (click)=\"removeWidget(widget)\">\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'dashboard.remove-widget' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-dashboard-widget>\n        </div>\n    </div>\n</div>\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport {\n    DashboardWidgetConfig,\n    DashboardWidgetService,\n    DashboardWidgetWidth,\n    DataService,\n    LocalStorageService,\n    WidgetLayout,\n    WidgetLayoutDefinition,\n} from '@vendure/admin-ui/core';\nimport { assertNever } from '@vendure/common/lib/shared-utils';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DashboardComponent implements OnInit {\n    widgetLayout: WidgetLayout | undefined;\n    availableWidgetIds$: Observable<string[]>;\n    private readonly deletionMarker = '__delete__';\n\n    constructor(\n        private dashboardWidgetService: DashboardWidgetService,\n        private localStorageService: LocalStorageService,\n        private changedDetectorRef: ChangeDetectorRef,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.availableWidgetIds$ = this.dataService.client.userStatus().stream$.pipe(\n            map(({ userStatus }) => userStatus.permissions),\n            map(permissions => this.dashboardWidgetService.getAvailableIds(permissions)),\n            tap(ids => (this.widgetLayout = this.initLayout(ids))),\n        );\n    }\n\n    getClassForWidth(width: DashboardWidgetWidth): string {\n        switch (width) {\n            case 3:\n                return `clr-col-12 clr-col-sm-6 clr-col-lg-3`;\n            case 4:\n                return `clr-col-12 clr-col-sm-6 clr-col-lg-4`;\n            case 6:\n                return `clr-col-12 clr-col-lg-6`;\n            case 8:\n                return `clr-col-12 clr-col-lg-8`;\n            case 12:\n                return `clr-col-12`;\n            default:\n                assertNever(width);\n        }\n    }\n\n    getSupportedWidths(config: DashboardWidgetConfig): DashboardWidgetWidth[] {\n        return config.supportedWidths || [3, 4, 6, 8, 12];\n    }\n\n    setWidgetWidth(widget: WidgetLayout[number][number], width: DashboardWidgetWidth) {\n        widget.width = width;\n        this.recalculateLayout();\n    }\n\n    trackRow(index: number, row: WidgetLayout[number]) {\n        const id = row.map(item => `${item.id}:${item.width}`).join('|');\n        return id;\n    }\n\n    trackRowItem(index: number, item: WidgetLayout[number][number]) {\n        return item.config;\n    }\n\n    addWidget(id: string) {\n        const config = this.dashboardWidgetService.getWidgetById(id);\n        if (config) {\n            const width = this.getSupportedWidths(config)[0];\n            const widget: WidgetLayout[number][number] = {\n                id,\n                config,\n                width,\n            };\n            let targetRow: WidgetLayout[number];\n            if (this.widgetLayout && this.widgetLayout.length) {\n                targetRow = this.widgetLayout[this.widgetLayout.length - 1];\n            } else {\n                targetRow = [];\n                this.widgetLayout?.push(targetRow);\n            }\n            targetRow.push(widget);\n            this.recalculateLayout();\n        }\n    }\n\n    removeWidget(widget: WidgetLayout[number][number]) {\n        widget.id = this.deletionMarker;\n        this.recalculateLayout();\n    }\n\n    drop(event: CdkDragDrop<{ index: number }>) {\n        const { currentIndex, previousIndex, previousContainer, container } = event;\n        if (previousIndex === currentIndex && previousContainer.data.index === container.data.index) {\n            // Nothing changed\n            return;\n        }\n        if (this.widgetLayout) {\n            const previousLayoutRow = this.widgetLayout[previousContainer.data.index];\n            const newLayoutRow = this.widgetLayout[container.data.index];\n\n            previousLayoutRow.splice(previousIndex, 1);\n            newLayoutRow.splice(currentIndex, 0, event.item.data);\n            this.recalculateLayout();\n        }\n    }\n\n    private initLayout(availableIds: string[]): WidgetLayout {\n        const savedLayoutDef = this.localStorageService.get('dashboardWidgetLayout');\n        let layoutDef: WidgetLayoutDefinition | undefined;\n        if (savedLayoutDef) {\n            // validate all the IDs from the saved layout are still available\n            layoutDef = savedLayoutDef.filter(item => availableIds.includes(item.id));\n        }\n        return this.dashboardWidgetService.getWidgetLayout(layoutDef);\n    }\n\n    private recalculateLayout() {\n        if (this.widgetLayout) {\n            const flattened = this.widgetLayout\n                .reduce((flat, row) => [...flat, ...row], [])\n                .filter(item => item.id !== this.deletionMarker);\n            const newLayoutDef: WidgetLayoutDefinition = flattened.map(item => ({\n                id: item.id,\n                width: item.width,\n            }));\n            this.widgetLayout = this.dashboardWidgetService.getWidgetLayout(newLayoutDef);\n            this.localStorageService.set('dashboardWidgetLayout', newLayoutDef);\n            setTimeout(() => this.changedDetectorRef.markForCheck());\n        }\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\n\nexport const dashboardRoutes: Routes = [\n    {\n        path: '',\n        component: DashboardComponent,\n        pathMatch: 'full',\n    },\n];\n","<vdr-data-table [items]=\"latestOrders$ | async\">\n    <ng-template let-order=\"item\">\n        <td class=\"left align-middle\">\n            {{ order.code }}\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n        </td>\n        <td class=\"left align-middle\">{{ order.total | localeCurrency: order.currencyCode }}</td>\n        <td class=\"left align-middle\">{{ order.orderPlacedAt | timeAgo }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"shopping-cart\"\n                [label]=\"'common.open' | translate\"\n                [linkTo]=\"['/orders/', order.id]\"\n            ></vdr-table-row-action>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, NgModule, OnInit } from '@angular/core';\nimport { CoreModule, DataService, GetOrderList, SharedModule, SortOrder } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-latest-orders-widget',\n    templateUrl: './latest-orders-widget.component.html',\n    styleUrls: ['./latest-orders-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LatestOrdersWidgetComponent implements OnInit {\n    latestOrders$: Observable<GetOrderList.Items[]>;\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.latestOrders$ = this.dataService.order\n            .getOrders({\n                take: 10,\n                filter: {\n                    active: { eq: false },\n                    state: { notEq: 'Cancelled' },\n                },\n                sort: {\n                    orderPlacedAt: SortOrder.DESC,\n                },\n            })\n            .refetchOnChannelChange()\n            .mapStream(data => data.orders.items);\n    }\n}\n\n@NgModule({\n    imports: [CoreModule, SharedModule],\n    declarations: [LatestOrdersWidgetComponent],\n})\nexport class LatestOrdersWidgetModule {}\n","<div class=\"stats\">\n    <div class=\"stat\">\n        <div class=\"stat-figure\">{{ totalOrderCount$ | async }}</div>\n        <div class=\"stat-label\">{{ 'dashboard.total-orders' | translate }}</div>\n    </div>\n    <div class=\"stat\">\n        <div class=\"stat-figure\">\n            {{ totalOrderValue$ | async | currency: (currencyCode$ | async) || undefined }}\n        </div>\n        <div class=\"stat-label\">{{ 'dashboard.total-order-value' | translate }}</div>\n    </div>\n</div>\n<div class=\"footer\">\n    <div class=\"btn-group btn-outline-primary btn-sm\" *ngIf=\"selection$ | async as selection\">\n        <button class=\"btn\" [class.btn-primary]=\"selection.date === today\" (click)=\"selection$.next({timeframe: 'day', date: today})\">\n            {{ 'dashboard.today' | translate }}\n        </button>\n        <button class=\"btn\" [class.btn-primary]=\"selection.date === yesterday\" (click)=\"selection$.next({timeframe: 'day', date: yesterday})\">\n            {{ 'dashboard.yesterday' | translate }}\n        </button>\n        <button class=\"btn\" [class.btn-primary]=\"selection.timeframe === 'week'\" (click)=\"selection$.next({timeframe: 'week'})\">\n            {{ 'dashboard.thisWeek' | translate }}\n        </button>\n        <button class=\"btn\" [class.btn-primary]=\"selection.timeframe === 'month'\" (click)=\"selection$.next({timeframe: 'month'})\">\n            {{ 'dashboard.thisMonth' | translate }}\n        </button>\n    </div>\n\n    <div class=\"date-range p5\" *ngIf=\"dateRange$ | async as range\">\n        {{ range.start | localeDate }} - {{ range.end | localeDate }}\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, NgModule, OnInit } from '@angular/core';\nimport { CoreModule, DataService } from '@vendure/admin-ui/core';\nimport dayjs from 'dayjs';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap } from 'rxjs/operators';\n\nexport type Timeframe = 'day' | 'week' | 'month';\n\n@Component({\n    selector: 'vdr-order-summary-widget',\n    templateUrl: './order-summary-widget.component.html',\n    styleUrls: ['./order-summary-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderSummaryWidgetComponent implements OnInit {\n    today = new Date();\n    yesterday = new Date(new Date().setDate(this.today.getDate() - 1));\n    totalOrderCount$: Observable<number>;\n    totalOrderValue$: Observable<number>;\n    currencyCode$: Observable<string | undefined>;\n    selection$ = new BehaviorSubject<{ timeframe: Timeframe; date?: Date }>({\n        timeframe: 'day',\n        date: this.today,\n    });\n    dateRange$: Observable<{ start: Date; end: Date }>;\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.dateRange$ = this.selection$.pipe(\n            distinctUntilChanged(),\n            map(selection => {\n                return {\n                    start: dayjs(selection.date).startOf(selection.timeframe).toDate(),\n                    end: dayjs(selection.date).endOf(selection.timeframe).toDate(),\n                };\n            }),\n            shareReplay(1),\n        );\n        const orderSummary$ = this.dateRange$.pipe(\n            switchMap(({ start, end }) => {\n                return this.dataService.order\n                    .getOrderSummary(start, end)\n                    .refetchOnChannelChange()\n                    .mapStream(data => data.orders);\n            }),\n            shareReplay(1),\n        );\n        this.totalOrderCount$ = orderSummary$.pipe(map(res => res.totalItems));\n        this.totalOrderValue$ = orderSummary$.pipe(\n            map(res => res.items.reduce((total, order) => total + order.total, 0) / 100),\n        );\n        this.currencyCode$ = this.dataService.settings\n            .getActiveChannel()\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel.currencyCode || undefined);\n    }\n}\n\n@NgModule({\n    imports: [CoreModule],\n    declarations: [OrderSummaryWidgetComponent],\n})\nexport class OrderSummaryWidgetModule {}\n","import { ChangeDetectionStrategy, Component, NgModule } from '@angular/core';\n\n@Component({\n    selector: 'vdr-test-widget',\n    templateUrl: './test-widget.component.html',\n    styleUrls: ['./test-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestWidgetComponent {}\n\n@NgModule({\n    declarations: [TestWidgetComponent],\n})\nexport class TestWidgetModule {}\n","<p>This is a test widget!</p>\n","<div *ngIf=\"administrator$ | async as administrator\">\n    <h4 class=\"h4\">\n        Welcome, {{ administrator.firstName }} {{ administrator.lastName }}<br />\n        <small class=\"p5\">Last login: {{ administrator.user.lastLogin | timeAgo }}</small>\n    </h4>\n\n    <p class=\"p5\" *ngIf=\"!hideVendureBranding || !hideVersion\">\n        {{ hideVendureBranding ? '' : 'Vendure' }} {{ hideVersion ? '' : ('Admin UI v' + version) }}\n    </p>\n</div>\n<div class=\"placeholder\">\n    <clr-icon shape=\"line-chart\" size=\"128\"></clr-icon>\n</div>\n","import { ChangeDetectionStrategy, Component, NgModule, OnInit } from '@angular/core';\nimport {\n    Administrator,\n    ADMIN_UI_VERSION,\n    CoreModule,\n    DataService,\n    GetActiveAdministrator,\n    getAppConfig,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-welcome-widget',\n    templateUrl: './welcome-widget.component.html',\n    styleUrls: ['./welcome-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WelcomeWidgetComponent implements OnInit {\n    version = ADMIN_UI_VERSION;\n    administrator$: Observable<GetActiveAdministrator.ActiveAdministrator | null>;\n    brand = getAppConfig().brand;\n    hideVendureBranding = getAppConfig().hideVendureBranding;\n    hideVersion = getAppConfig().hideVersion;\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.administrator$ = this.dataService.administrator\n            .getActiveAdministrator()\n            .mapStream(data => data.activeAdministrator || null);\n    }\n}\n\n@NgModule({\n    imports: [CoreModule],\n    declarations: [WelcomeWidgetComponent],\n})\nexport class WelcomeWidgetModule {}\n","import { APP_INITIALIZER, FactoryProvider } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DashboardWidgetConfig,\n    DashboardWidgetService,\n    Permission,\n    WidgetLayoutDefinition,\n} from '@vendure/admin-ui/core';\n\nimport { LatestOrdersWidgetComponent } from './widgets/latest-orders-widget/latest-orders-widget.component';\nimport { OrderSummaryWidgetComponent } from './widgets/order-summary-widget/order-summary-widget.component';\nimport { TestWidgetComponent } from './widgets/test-widget/test-widget.component';\nimport { WelcomeWidgetComponent } from './widgets/welcome-widget/welcome-widget.component';\n\nexport const DEFAULT_DASHBOARD_WIDGET_LAYOUT: WidgetLayoutDefinition = [\n    { id: 'welcome', width: 12 },\n    { id: 'orderSummary', width: 6 },\n    { id: 'latestOrders', width: 6 },\n];\n\nexport const DEFAULT_WIDGETS: { [id: string]: DashboardWidgetConfig } = {\n    welcome: {\n        loadComponent: () => WelcomeWidgetComponent,\n    },\n    orderSummary: {\n        title: _('dashboard.orders-summary'),\n        loadComponent: () => OrderSummaryWidgetComponent,\n        requiresPermissions: [Permission.ReadOrder],\n    },\n    latestOrders: {\n        title: _('dashboard.latest-orders'),\n        loadComponent: () => LatestOrdersWidgetComponent,\n        supportedWidths: [6, 8, 12],\n        requiresPermissions: [Permission.ReadOrder],\n    },\n    testWidget: {\n        title: 'Test Widget',\n        loadComponent: () => TestWidgetComponent,\n    },\n};\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { DashboardWidgetService, SharedModule } from '@vendure/admin-ui/core';\n\nimport { DashboardWidgetComponent } from './components/dashboard-widget/dashboard-widget.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { dashboardRoutes } from './dashboard.routes';\nimport { DEFAULT_DASHBOARD_WIDGET_LAYOUT, DEFAULT_WIDGETS } from './default-widgets';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(dashboardRoutes)],\n    declarations: [DashboardComponent, DashboardWidgetComponent],\n})\nexport class DashboardModule {\n    constructor(dashboardWidgetService: DashboardWidgetService) {\n        Object.entries(DEFAULT_WIDGETS).map(([id, config]) => {\n            if (!dashboardWidgetService.getWidgetById(id)) {\n                dashboardWidgetService.registerWidget(id, config);\n            }\n        });\n        if (dashboardWidgetService.getDefaultLayout().length === 0) {\n            dashboardWidgetService.setDefaultLayout(DEFAULT_DASHBOARD_WIDGET_LAYOUT);\n        }\n    }\n}\n"]}
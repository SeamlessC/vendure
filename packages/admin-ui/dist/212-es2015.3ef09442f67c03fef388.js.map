{"version":3,"mappings":"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","names":["e","constructor","n","this","l","method","transactionId","ngOnInit","paymentMethods$","dataService","settings","getPaymentMethods","mapSingle","paymentMethods","items","submit","form","value","resolveWith","cancel","ue","selectors","t","cancellationReasons","g","reasons","map","o","i18nService","translate","Object","values","lineQuantities","reduce","order","lines","id","quantity","radioChanged","cancelAll","checkIfAllSelected","entries","i","find","a","select","orderId","getLineInputs","reason","cancelShipping","active","orderLineId","filter","me","_e","availableCouponCodes$","it","couponCodeInput$","pipe","h","promotion","getPromotions","couponCode","contains","single$","promotions","code","promotionName","name","control","couponCodes","G","lt","Ps","s","addressForm","formBuilder","group","fullName","currentAddress","company","streetLine1","c","streetLine2","_","p","city","x","v","province","b","C","postalCode","ie","oe","countryCode","le","ae","phoneNumber","de","ce","useExisting","customerId","addresses$","query","customer","F","O","addresses","selectedAddress","se","V","length","createNew","availableCountries$","getAvailableCountries","countries","trackByFn","addressIdFn","country","valid","W","customerForm","title","firstName","lastName","emailAddress","customers$","input$","He","$e","isLoading","getCustomerList","mapStream","customers","L","selectedCustomer","ge","currentSelectionId","selectedMethod","eligibleShippingMethods","methodIdFn","fe","call","Be","super","error","notifier","_unsubscribe","errors","notifyNext","selectedState","he","transitionToPreModifyingState","getPreModifyingState","nextStates","message","state","cancellable","retry","transitionToStateOrThrow","ut","manuallyTransitionToState","modalService","fromComponent","locals","closable","size","M","Error","r","cn","getOrderHistory","type","eq","sort","createdAt","history","data","to","from","transitionToState","transitionOrderToState","__typename","notificationService","transitionError","J","factory","selectedVariant$","selectedVariantId$","product","getProductVariant","productVariant","orderLineCustomFields","customFieldsFormGroup","addControl","addItemClick","addItem","emit","productVariantId","customFields","next","reset","xe","getRefundedCount","payments","refunds","line","refundId","cancelled","Y","ngOnChanges","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","fulfillments","getFulfillments","summary","orderLine","count","fulfillment","oxw","remove","K","orderLineCustomFieldsVisible","getLineCustomFields","draftInputBlur","adjust","lineId","toggleOrderLineCustomFields","getLineDiscounts","discounts","config","formGroup","customFieldsForLine","getPromotionLink","adjustmentSource","split","getCouponCodeForAdjustment","getShippingNames","shippingLines","shippingMethod","join","j","customFieldForm","customFieldsConfig","customFieldValues","onUpdateClick","updateClick","markAsPristine","editable","onCancelClick","dirty","dialog","buttons","label","returnValue","subscribe","z","init","getCustomFieldConfig","eligibleShippingMethods$","entity$","getDraftOrderEligibleShippingMethods","eligibleShippingMethodsForDraftOrder","ngOnDestroy","destroy","addItemToOrder","addItemToDraftOrder","adjustOrderLine","adjustDraftOrderLine","removeOrderLine","removeDraftOrderLine","getOrderAddressLines","setCustomer","hasId","setCustomerForDraftOrder","input","setShippingAddress","D","shippingAddress","setDraftOrderShippingAddress","setBillingAddress","billingAddress","setDraftOrderBillingAddress","applyCouponCode","applyCouponCodeToDraftOrder","removeCouponCode","removeCouponCodeFromDraftOrder","setShippingMethod","Dt","currencyCode","setDraftOrderShippingMethod","updateCustomFields","updateOrderCustomFields","deleteOrder","deleteDraftOrder","result","success","entity","router","navigate","completeOrder","setFormValues","ee","getGlobalSettings","globalSettings","fulfillmentQuantities","getFulfillableCount","trackInventory","fulfillCount","max","changeDetector","markForCheck","getShippingMethodOperations","fulfillmentHandlers","fulfillmentHandlerDef","fulfillmentHandlerCode","fulfillmentHandler","fulfillmentHandlerControl","patchValue","stockOnHand","getUnfulfilledCount","Math","min","flat","canSubmit","handler","ve","chipColorType","Ze","$","customFieldConfig","serverConfigService","getCustomFieldsFor","buildCustomFieldsFormGroup","fulfillmentId","customFieldFormGroup","customFieldIsObject","Array","isArray","R","te","transitionState","nextSuggestedState","includes","nextOtherStates","Ce","Map","added","removed","getModifiedLines","addedItems","removedItems","getSurcharge","surcharges","getAddedItems","getRemovedItems","modification","orderItems","getOrderLineAndItem","item","get","set","ye","tt","et","isCancellable","node","active$","getPos","elementRef","nativeElement","getBoundingClientRect","querySelector","height","y","index","getStyle","ne","asObservable","Qe","activeTarget$","abs","sqrt","transform","Ae","nodes","setActiveState$","initialState","activeState$","populateNodes","ngAfterViewInit","setTimeout","populateEdges","onMouseOver","onMouseOut","getNodeFor","nodeComponents","states","push","edges","Te","getOrderProcessStates","be","refund","proratedUnitPriceWithTax","refundShipping","shippingWithTax","adjustment","settledPayments","amount","lineCanBeRefundedOrCancelled","selectedPayment","handleZeroQuantity","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","getOrderLineInput","shipping","paymentId","Oe","qe","re","updateNote","deleteNote","getDisplayType","getTimelineIcon","isFeatured","getFulfillment","getPayment","getCancelledItems","orderItemIds","getModification","modifications","getName","administrator","addNoteToOrder","addNote","note","isPublic","noteIsPrivate","Ie","Le","settleRefund","Fe","refundHasMetadata","keys","metadata","payment","we","relativeTo","route","history$","fetchHistory","nextStates$","S","defaultStates","openStateDiagram","activeState","orderTransitionService","transitionToModifying","settlePayment","getOrder","transitionPaymentState","cancelPayment","paymentErrorMessage","transitionPaymentToState","canAddFulfillment","hasUnsettledModifications","outstandingPaymentAmount","isSettled","getOutstandingModificationAmount","totalWithTax","addManualPayment","outstandingAmount","addManualPaymentToOrder","ze","refetchOrder","fulfillOrder","createFulfillment","addFulfillmentToOrder","fulfillmentHandlerError","JSON","stringify","transitionFulfillment","transitionFulfillmentToState","cancelOrRefund","orderHasSettledPayments","refundOrder","cancelOrder","displayPrivacyControls","updateOrderNote","noteId","isPrivate","body","deleteOrderNote","Se","P","priceDifference","originalTotalWithTax","refundNote","modifyOrderInput","Cancel","Payment","Refund","refundPaymentId","PriceUnchanged","Me","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","addedVariants","price","priceWithTax","addressCustomFields","snapshot","paramMap","destroy$","couponCodesControl","setValue","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","addAddressCustomFieldsFormGroup","billingAddressForm","orderLineCustomFieldsFormArray","valueChanges","je","ma","addItemCustomFieldsFormArray","addItemCustomFieldsForm","Zt","take","previousState","transitionToPriorState","canPreviewChanges","isLineModified","updateLineQuantity","splice","indexOf","updateAddedItemQuantity","trackByProductVariantId","getSelectedItemPrice","isMatchingAddItemRow","addItemSelectedVariant","removeAddedItem","removeAt","getSurchargePrices","round","addSurcharge","removeSurcharge","previewAndModify","mi","options","recalculateShipping","modifyOrder","Ne","orderStates","setQueryFn","getOrders","skip","refetchOnChannelChange","orders","createQueryOptions","searchControl","queryParamMap","localStorageService","setQueryParam","replaceUrl","canCreateDraftOrder","filterPresets","activePreset$","getActiveChannel","processingTime","activeChannel","Tt","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","setItemsPerPage","refreshInterval","setInterval","audioElem","document","getElementById","muted","addEventListener","audioOn","once","play","then","items$","itemList","playAudio","toggleAudio","formatTime","At","format","formatDate","getNextState","toNextState","toString","toPromise","selectFilterPreset","page","applyCustomFilters","in","orderPlacedAt","between","start","end","after","before","customerLastName","updatedAt","filterOperator","clearInterval","Je","resolve","events","rt","component","U","canActivate","url","createDraftOrder","parseUrl","H","bt","path","breadcrumb","canDeactivate","Ye","Ot","breadcrumbKey","slice","link","concat","Pe"],"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/coupon-code-selector/coupon-code-selector.component.html","webpack:///src/lib/order/src/components/coupon-code-selector/coupon-code-selector.component.ts","webpack:///src/lib/order/src/components/select-address-dialog/select-address-dialog.graphql.ts","webpack:///src/lib/order/src/components/select-address-dialog/select-address-dialog.component.html","webpack:///src/lib/order/src/components/select-address-dialog/select-address-dialog.component.ts","webpack:///src/lib/order/src/components/select-customer-dialog/select-customer-dialog.component.html","webpack:///src/lib/order/src/components/select-customer-dialog/select-customer-dialog.component.ts","webpack:///src/lib/order/src/components/select-shipping-method-dialog/select-shipping-method-dialog.component.html","webpack:///src/lib/order/src/components/select-shipping-method-dialog/select-shipping-method-dialog.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/draft-order-variant-selector/draft-order-variant-selector.component.html","webpack:///src/lib/order/src/components/draft-order-variant-selector/draft-order-variant-selector.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///src/lib/order/src/components/draft-order-detail/draft-order-detail.component.html","webpack:///src/lib/order/src/components/draft-order-detail/draft-order-detail.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/providers/routing/order.guard.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\n<form [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\n        <ng-select\n            [items]=\"paymentMethods$ | async\"\n            bindLabel=\"code\"\n            autofocus\n            bindValue=\"code\"\n            [addTag]=\"true\"\n            formControlName=\"method\"\n        ></ng-select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\n    </vdr-form-field>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    CurrencyCode,\n    DataService,\n    Dialog,\n    GetPaymentMethodList,\n    ManualPaymentInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-add-manual-payment-dialog',\n    templateUrl: './add-manual-payment-dialog.component.html',\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\n    // populated by ModalService call\n    outstandingAmount: number;\n    currencyCode: CurrencyCode;\n\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\n    form = new FormGroup({\n        method: new FormControl('', Validators.required),\n        transactionId: new FormControl('', Validators.required),\n    });\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.paymentMethods$ = this.dataService.settings\n            .getPaymentMethods(999)\n            .mapSingle(data => data.paymentMethods.items);\n    }\n\n    submit() {\n        const formValue = this.form.value;\n        this.resolveWith({\n            method: formValue.method,\n            transactionId: formValue.transactionId,\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\n\n<div class=\"fulfillment-wrapper\">\n    <div class=\"order-lines\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.unit-price' | translate }}</th>\n                    <th>{{ 'order.cancel' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let line of order.lines\"\n                class=\"order-line\"\n                [class.is-disabled]=\"cancelAll\"\n                [class.is-cancelled]=\"line.quantity === 0\"\n            >\n                <td class=\"align-middle thumb\">\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\n                <td class=\"align-middle quantity\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\n                        [(ngModel)]=\"lineQuantities[line.id]\"\n                        (input)=\"checkIfAllSelected()\"\n                        [disabled]=\"cancelAll\"\n                        type=\"number\"\n                        [max]=\"line.quantity\"\n                        min=\"0\"\n                    />\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"cancellation-details\">\n        <ng-container *ngIf=\"order.active !== true\">\n            <clr-radio-wrapper>\n                <input\n                    type=\"radio\"\n                    clrRadio\n                    [value]=\"true\"\n                    [(ngModel)]=\"cancelAll\"\n                    name=\"options\"\n                    (ngModelChange)=\"radioChanged()\"\n                />\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\n            </clr-radio-wrapper>\n            <clr-radio-wrapper>\n                <input\n                    type=\"radio\"\n                    clrRadio\n                    [value]=\"false\"\n                    [(ngModel)]=\"cancelAll\"\n                    name=\"options\"\n                    (ngModelChange)=\"radioChanged()\"\n                />\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\n            </clr-radio-wrapper>\n        </ng-container>\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\n        <ng-select\n            [items]=\"reasons\"\n            bindLabel=\"name\"\n            autofocus\n            bindValue=\"id\"\n            [addTag]=\"true\"\n            [(ngModel)]=\"reason\"\n        ></ng-select>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\n        class=\"btn btn-primary\"\n    >\n        <ng-container *ngIf=\"!order.active\">\n            {{ 'order.cancel-selected-items' | translate }}\n        </ng-container>\n        <ng-container *ngIf=\"order.active\">\n            {{ 'order.cancel-order' | translate }}\n        </ng-container>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CancelOrderInput,\n    Dialog,\n    getAppConfig,\n    I18nService,\n    OrderDetailFragment,\n    OrderLineInput,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-cancel-order-dialog',\n    templateUrl: './cancel-order-dialog.component.html',\n    styleUrls: ['./cancel-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\n    order: OrderDetailFragment;\n    cancelAll = true;\n    resolveWith: (result?: CancelOrderInput) => void;\n    reason: string;\n    lineQuantities: { [lineId: string]: number } = {};\n    reasons: string[] = getAppConfig().cancellationReasons ?? [\n        _('order.cancel-reason-customer-request'),\n        _('order.cancel-reason-not-available'),\n    ];\n\n    get selectionCount(): number {\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\n    }\n\n    constructor(private i18nService: I18nService) {\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\n    }\n\n    ngOnInit() {\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\n            return { ...result, [line.id]: line.quantity };\n        }, {});\n    }\n\n    radioChanged() {\n        if (this.cancelAll) {\n            for (const line of this.order.lines) {\n                this.lineQuantities[line.id] = line.quantity;\n            }\n        } else {\n            for (const line of this.order.lines) {\n                this.lineQuantities[line.id] = 0;\n            }\n        }\n    }\n\n    checkIfAllSelected() {\n        for (const [lineId, quantity] of Object.entries(this.lineQuantities)) {\n            const quantityInOrder = this.order.lines.find(line => line.id === lineId)?.quantity;\n            if (quantityInOrder && quantity < quantityInOrder) {\n                return;\n            }\n        }\n        // If we got here, all of the selected quantities are equal to the order\n        // line quantities, i.e. everything is selected.\n        this.cancelAll = true;\n    }\n\n    select() {\n        this.resolveWith({\n            orderId: this.order.id,\n            lines: this.getLineInputs(),\n            reason: this.reason,\n            cancelShipping: this.cancelAll,\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private getLineInputs(): OrderLineInput[] | undefined {\n        if (this.order.active) {\n            return;\n        }\n        return Object.entries(this.lineQuantities)\n            .map(([orderLineId, quantity]) => ({\n                orderLineId,\n                quantity,\n            }))\n            .filter(l => 0 < l.quantity);\n    }\n}\n","<ng-select\n    [items]=\"availableCouponCodes$ | async\"\n    appendTo=\"body\"\n    bindLabel=\"code\"\n    bindValue=\"code\"\n    [addTag]=\"false\"\n    [multiple]=\"true\"\n    [hideSelected]=\"true\"\n    [minTermLength]=\"2\"\n    typeToSearchText=\"\"\n    [typeahead]=\"couponCodeInput$\"\n    [formControl]=\"control\"\n    (add)=\"addCouponCode.emit($event.code)\"\n    (remove)=\"removeCouponCode.emit($event.value?.code)\"\n>\n    <ng-template ng-option-tmp let-item=\"item\">\n        <vdr-chip>{{ item.code }}</vdr-chip>\n        {{ item.promotionName }}\n    </ng-template>\n</ng-select>\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { concat, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-coupon-code-selector',\n    templateUrl: './coupon-code-selector.component.html',\n    styleUrls: ['./coupon-code-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CouponCodeSelectorComponent implements OnInit {\n    @Input() couponCodes: string[];\n    @Input() control: FormControl | undefined;\n    @Output() addCouponCode = new EventEmitter<string>();\n    @Output() removeCouponCode = new EventEmitter<string>();\n    availableCouponCodes$: Observable<Array<{ code: string; promotionName: string }>>;\n    couponCodeInput$ = new Subject<string>();\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.availableCouponCodes$ = concat(\n            this.couponCodeInput$.pipe(\n                distinctUntilChanged(),\n                switchMap(\n                    term =>\n                        this.dataService.promotion.getPromotions(10, 0, {\n                            couponCode: { contains: term },\n                        }).single$,\n                ),\n                map(({ promotions }) =>\n                    // tslint:disable-next-line:no-non-null-assertion\n                    promotions.items.map(p => ({ code: p.couponCode!, promotionName: p.name })),\n                ),\n                startWith([]),\n            ),\n        );\n        if (!this.control) {\n            this.control = new FormControl(this.couponCodes ?? []);\n        }\n    }\n}\n","import { ADDRESS_FRAGMENT } from '@vendure/admin-ui/core';\nimport { gql } from 'apollo-angular';\n\nexport const GET_CUSTOMER_ADDRESSES = gql`\n    query GetCustomerAddresses($customerId: ID!) {\n        customer(id: $customerId) {\n            id\n            addresses {\n                ...Address\n            }\n        }\n    }\n    ${ADDRESS_FRAGMENT}\n`;\n","<ng-template vdrDialogTitle>{{ 'order.select-address' | translate }}</ng-template>\n\n<clr-tabs *ngIf=\"addresses$ | async as addresses\">\n    <clr-tab *ngIf=\"customerId && addresses.length\">\n        <button clrTabLink>{{ 'order.existing-address' | translate }}</button>\n        <ng-template [(clrIfActive)]=\"useExisting\">\n            <clr-tab-content>\n                <vdr-radio-card-fieldset\n                    class=\"block mt4\"\n                    [idFn]=\"addressIdFn\"\n                    [selectedItemId]=\"selectedAddress && addressIdFn(selectedAddress)\"\n                    (selectItem)=\"selectedAddress = $event\"\n                >\n                    <vdr-radio-card *ngFor=\"let address of addresses\" [item]=\"address\">\n                        <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\n                    </vdr-radio-card>\n                </vdr-radio-card-fieldset>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n    <clr-tab>\n        <button clrTabLink>{{ 'customer.create-new-address' | translate }}</button>\n\n        <ng-template [(clrIfActive)]=\"createNew\">\n            <clr-tab-content>\n                <vdr-address-form\n                    [formGroup]=\"addressForm\"\n                    [availableCountries]=\"availableCountries$ | async\"\n                ></vdr-address-form>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n</clr-tabs>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"(useExisting && !selectedAddress) || (createNew && addressForm.invalid)\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.okay' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n    AddressFragment,\n    CreateAddressInput,\n    CreateCustomerInput,\n    DataService,\n    Dialog,\n    GetAvailableCountriesQuery,\n    GetCustomerAddressesQuery,\n    GetCustomerAddressesQueryVariables,\n    OrderAddressFragment,\n} from '@vendure/admin-ui/core';\nimport { pick } from '@vendure/common/lib/pick';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Customer } from '../select-customer-dialog/select-customer-dialog.component';\n\nimport { GET_CUSTOMER_ADDRESSES } from './select-address-dialog.graphql';\n\n@Component({\n    selector: 'vdr-select-address-dialog',\n    templateUrl: './select-address-dialog.component.html',\n    styleUrls: ['./select-address-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectAddressDialogComponent implements OnInit, Dialog<CreateAddressInput> {\n    resolveWith: (result?: CreateAddressInput) => void;\n    availableCountries$: Observable<GetAvailableCountriesQuery['countries']['items']>;\n    addresses$: Observable<AddressFragment[]>;\n    customerId: string | undefined;\n    currentAddress: OrderAddressFragment | undefined;\n    addressForm: FormGroup;\n    selectedAddress: AddressFragment | undefined;\n    useExisting = true;\n    createNew = false;\n\n    constructor(private dataService: DataService, private formBuilder: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.addressForm = this.formBuilder.group({\n            fullName: [this.currentAddress?.fullName ?? ''],\n            company: [this.currentAddress?.company ?? ''],\n            streetLine1: [this.currentAddress?.streetLine1 ?? '', Validators.required],\n            streetLine2: [this.currentAddress?.streetLine2 ?? ''],\n            city: [this.currentAddress?.city ?? '', Validators.required],\n            province: [this.currentAddress?.province ?? ''],\n            postalCode: [this.currentAddress?.postalCode ?? '', Validators.required],\n            countryCode: [this.currentAddress?.countryCode ?? '', Validators.required],\n            phoneNumber: [this.currentAddress?.phoneNumber ?? ''],\n        });\n        this.useExisting = !!this.customerId;\n        this.addresses$ = this.customerId\n            ? this.dataService\n                  .query<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>(\n                      GET_CUSTOMER_ADDRESSES,\n                      { customerId: this.customerId },\n                  )\n                  .mapSingle(({ customer }) => customer?.addresses ?? [])\n                  .pipe(\n                      tap(addresses => {\n                          if (this.currentAddress) {\n                              this.selectedAddress = addresses.find(\n                                  a =>\n                                      a.streetLine1 === this.currentAddress?.streetLine1 &&\n                                      a.postalCode === this.currentAddress?.postalCode,\n                              );\n                          }\n                          if (addresses.length === 0) {\n                              this.createNew = true;\n                              this.useExisting = false;\n                          }\n                      }),\n                  )\n            : of([]);\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(({ countries }) => countries.items);\n    }\n\n    trackByFn(item: Customer) {\n        return item.id;\n    }\n\n    addressIdFn(item: AddressFragment) {\n        return item.streetLine1 + item.postalCode;\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    select() {\n        if (this.useExisting && this.selectedAddress) {\n            this.resolveWith({\n                ...pick(this.selectedAddress, [\n                    'fullName',\n                    'company',\n                    'streetLine1',\n                    'streetLine2',\n                    'city',\n                    'province',\n                    'phoneNumber',\n                    'postalCode',\n                ]),\n                countryCode: this.selectedAddress.country.code,\n            });\n        }\n        if (this.createNew && this.addressForm.valid) {\n            const formValue = this.addressForm.value;\n            this.resolveWith(formValue);\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.set-customer-for-order' | translate }}</ng-template>\n\n<clr-tabs>\n    <clr-tab>\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\n\n        <ng-template [(clrIfActive)]=\"useExisting\">\n            <clr-tab-content>\n                <ng-select\n                    [items]=\"customers$ | async\"\n                    appendTo=\"body\"\n                    bindLabel=\"name\"\n                    [addTag]=\"false\"\n                    [multiple]=\"true\"\n                    [hideSelected]=\"true\"\n                    [trackByFn]=\"trackByFn\"\n                    [minTermLength]=\"2\"\n                    [loading]=\"isLoading\"\n                    [typeahead]=\"input$\"\n                    [(ngModel)]=\"selectedCustomer\"\n                    class=\"mt4\"\n                >\n                    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\n                        ><span class=\"ml2 mr2\">{{ item.firstName }} {{ item.lastName }}</span>\n                        <vdr-chip>{{ item.emailAddress }}</vdr-chip>\n                    </ng-template>\n                    <ng-template ng-option-tmp let-item=\"item\">\n                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\n                        ><span class=\"ml2 mr2\">{{ item.firstName }} {{ item.lastName }}</span>\n                        <vdr-chip>{{ item.emailAddress }}</vdr-chip>\n                    </ng-template>\n                </ng-select>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n    <clr-tab>\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\n\n        <ng-template [(clrIfActive)]=\"createNew\">\n            <clr-tab-content>\n                <form [formGroup]=\"customerForm\">\n                <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\n                    <input id=\"title\" type=\"text\" formControlName=\"title\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\n                    <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\n                    <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\n                    <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n                </vdr-form-field>\n                <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\n                    <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\n                </vdr-form-field>\n                </form>\n            </clr-tab-content>\n        </ng-template>\n    </clr-tab>\n</clr-tabs>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.okay' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CreateCustomerInput, DataService, Dialog, GetCustomerListQuery } from '@vendure/admin-ui/core';\nimport { concat, Observable, of, Subject } from 'rxjs';\nimport { catchError, debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\n\nexport type Customer = GetCustomerListQuery['customers']['items'][number];\n\n@Component({\n    selector: 'vdr-select-customer-dialog',\n    templateUrl: './select-customer-dialog.component.html',\n    styleUrls: ['./select-customer-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectCustomerDialogComponent implements OnInit, Dialog<Customer | CreateCustomerInput> {\n    resolveWith: (result?: Customer | CreateCustomerInput) => void;\n    customerForm: FormGroup;\n    customers$: Observable<Customer[]>;\n    isLoading = false;\n    input$ = new Subject<string>();\n    selectedCustomer: Customer[] = [];\n    useExisting = true;\n    createNew = false;\n\n    constructor(private dataService: DataService, private formBuilder: FormBuilder) {\n        this.customerForm = this.formBuilder.group({\n            title: '',\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            phoneNumber: '',\n            emailAddress: ['', [Validators.required, Validators.email]],\n        });\n    }\n\n    ngOnInit(): void {\n        this.customers$ = concat(\n            of([]), // default items\n            this.input$.pipe(\n                debounceTime(200),\n                distinctUntilChanged(),\n                tap(() => (this.isLoading = true)),\n                switchMap(term =>\n                    this.dataService.customer\n                        .getCustomerList(10, 0, term)\n                        .mapStream(({ customers }) => customers.items)\n                        .pipe(\n                            catchError(() => of([])), // empty list on error\n                            tap(() => (this.isLoading = false)),\n                        ),\n                ),\n            ),\n        );\n    }\n\n    trackByFn(item: Customer) {\n        return item.id;\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    select() {\n        if (this.useExisting && this.selectedCustomer.length === 1) {\n            this.resolveWith(this.selectedCustomer[0]);\n        }\n        if (this.createNew && this.customerForm.valid) {\n            const formValue = this.customerForm.value;\n            this.resolveWith(formValue);\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.select-shipping-method' | translate }}</ng-template>\n<vdr-radio-card-fieldset\n    [idFn]=\"methodIdFn\"\n    [selectedItemId]=\"selectedMethod?.id\"\n    (selectItem)=\"selectedMethod = $event\"\n>\n    <vdr-radio-card *ngFor=\"let quote of eligibleShippingMethods\" [item]=\"quote\">\n        <div class=\"result-details\">\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\n                {{ quote.name }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\n                    {{ quote.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\n        </div>\n    </vdr-radio-card>\n</vdr-radio-card-fieldset>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"!selectedMethod\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.okay' | translate }}\n    </button>\n</ng-template>\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n    CreateAddressInput,\n    CurrencyCode,\n    Dialog,\n    DraftOrderEligibleShippingMethodsQuery,\n} from '@vendure/admin-ui/core';\n\ntype ShippingMethodQuote =\n    DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder'][number];\n\n@Component({\n    selector: 'vdr-select-shipping-method-dialog',\n    templateUrl: './select-shipping-method-dialog.component.html',\n    styleUrls: ['./select-shipping-method-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectShippingMethodDialogComponent implements OnInit, Dialog<string> {\n    resolveWith: (result?: string) => void;\n    eligibleShippingMethods: ShippingMethodQuote[];\n    currentSelectionId: string;\n    currencyCode: CurrencyCode;\n    selectedMethod: ShippingMethodQuote | undefined;\n    constructor() {}\n\n    ngOnInit(): void {\n        if (this.currentSelectionId) {\n            this.selectedMethod = this.eligibleShippingMethods.find(m => m.id === this.currentSelectionId);\n        }\n    }\n\n    methodIdFn(item: ShippingMethodQuote) {\n        return item.id;\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    select() {\n        if (this.selectedMethod) {\n            this.resolveWith(this.selectedMethod.id);\n        }\n    }\n}\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\n<p>{{ message | translate }}</p>\n<clr-select-container>\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\n            {{ state | stateI18nToken | translate }}\n        </option>\n    </select>\n</clr-select-container>\n<ng-template vdrDialogButtons>\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\n        {{ 'common.cancel' | translate }}\n    </button>\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-state-select-dialog',\n    templateUrl: './order-state-select-dialog.component.html',\n    styleUrls: ['./order-state-select-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    nextStates: string[] = [];\n    message = '';\n    cancellable: boolean;\n    selectedState = '';\n\n    select() {\n        if (this.selectedState) {\n            this.resolveWith(this.selectedState);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    HistoryEntryType,\n    I18nService,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\n\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderTransitionService {\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private i18nService: I18nService,\n    ) {}\n\n    /**\n     * Attempts to transition the Order to the last state it was in before it was transitioned\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\n     */\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\n        return this.getPreModifyingState(orderId).pipe(\n            switchMap(state => {\n                const manualTransitionOptions = {\n                    orderId,\n                    nextStates,\n                    message: this.i18nService.translate(\n                        _('order.unable-to-transition-to-state-try-another'),\n                        { state },\n                    ),\n                    cancellable: false,\n                    retry: 10,\n                };\n                if (state) {\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\n                    );\n                } else {\n                    return this.manuallyTransitionToState(manualTransitionOptions);\n                }\n            }),\n        );\n    }\n\n    /**\n     * Displays a modal for manually selecting the next state.\n     */\n    manuallyTransitionToState(options: {\n        orderId: string;\n        nextStates: string[];\n        message: string;\n        cancellable: boolean;\n        retry: number;\n    }) {\n        return this.modalService\n            .fromComponent(OrderStateSelectDialogComponent, {\n                locals: {\n                    nextStates: options.nextStates,\n                    cancellable: options.cancellable,\n                    message: options.message,\n                },\n                closable: false,\n                size: 'md',\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.transitionToStateOrThrow(options.orderId, result);\n                    } else {\n                        if (!options.cancellable) {\n                            throw new Error(`An order state must be selected`);\n                        } else {\n                            return EMPTY;\n                        }\n                    }\n                }),\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\n            );\n    }\n\n    /**\n     * Attempts to get the last state the Order was in before it was transitioned\n     * to the \"Modifying\" state.\n     */\n    private getPreModifyingState(orderId: string) {\n        return this.dataService.order\n            .getOrderHistory(orderId, {\n                filter: {\n                    type: {\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\n                    },\n                },\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n            })\n            .mapSingle(result => result.order)\n            .pipe(\n                map(result => {\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\n                    if (item) {\n                        return item.data.from as string;\n                    } else {\n                        return;\n                    }\n                }),\n            );\n    }\n\n    private transitionToStateOrThrow(orderId: string, state: string) {\n        return this.dataService.order.transitionToState(orderId, state).pipe(\n            map(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        return transitionOrderToState?.state;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState?.transitionError);\n                        throw new Error(transitionOrderToState?.transitionError);\n                }\n            }),\n        );\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-block\">\n        <h4 class=\"card-title\">{{ 'order.add-item-to-order' | translate }}</h4>\n        <vdr-product-selector\n            (productSelected)=\"selectedVariantId$.next($event.productVariantId)\"\n        ></vdr-product-selector>\n    </div>\n    <div class=\"card-block\" *ngIf=\"selectedVariant$ | async as selectedVariant\">\n        <div class=\"variant-details\">\n            <img class=\"mr2\" [src]=\"selectedVariant.featuredAsset || selectedVariant.product.featuredAsset | assetPreview: 32\">\n            <div class=\"details\">\n                <div>{{ selectedVariant?.name }}</div>\n                <div class=\"small\">{{ selectedVariant?.sku }}</div>\n            </div>\n            <div class=\"details ml4\">\n                <div class=\"small\">\n                    {{ 'catalog.stock-on-hand' | translate }}: {{ selectedVariant.stockOnHand }}\n                </div>\n                <div class=\"small\">\n                    {{ 'catalog.stock-allocated' | translate }}: {{ selectedVariant.stockAllocated }}\n                </div>\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <div class=\"details\">\n                <div>{{ selectedVariant?.priceWithTax | localeCurrency: currencyCode }}</div>\n                <div class=\"small\" [title]=\"'order.net-price' | translate\">\n                    {{ selectedVariant?.price | localeCurrency: currencyCode }}\n                </div>\n            </div>\n            <div>\n                <input [disabled]=\"!selectedVariant\" type=\"number\" min=\"0\" [(ngModel)]=\"quantity\" />\n            </div>\n            <button\n                [disabled]=\"!selectedVariant\"\n                class=\"btn btn-small btn-primary\"\n                (click)=\"addItemClick(selectedVariant)\"\n            >\n                {{ 'order.add-item-to-order' | translate }}\n            </button>\n        </div>\n        <ng-container *ngIf=\"orderLineCustomFields.length\">\n            <div class=\"custom-field\" *ngFor=\"let field of orderLineCustomFields\">\n                <vdr-custom-field-control\n                    [compact]=\"true\"\n                    [readonly]=\"false\"\n                    [customField]=\"field\"\n                    [customFieldsFormGroup]=\"customFieldsFormGroup\"\n                ></vdr-custom-field-control>\n            </div>\n        </ng-container>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n    CurrencyCode,\n    CustomFieldConfig,\n    DataService,\n    GetProductVariant,\n    GetProductVariantQuery,\n    ProductSelectorSearchQuery,\n} from '@vendure/admin-ui/core';\nimport { Observable, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-draft-order-variant-selector',\n    templateUrl: './draft-order-variant-selector.component.html',\n    styleUrls: ['./draft-order-variant-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DraftOrderVariantSelectorComponent implements OnInit {\n    @Input() currencyCode: CurrencyCode;\n    @Input() orderLineCustomFields: CustomFieldConfig[];\n    @Output() addItem = new EventEmitter<{ productVariantId: string; quantity: number; customFields: any }>();\n    customFieldsFormGroup = new FormGroup({});\n    selectedVariant$: Observable<GetProductVariantQuery['productVariant']>;\n    selectedVariantId$ = new Subject<string>();\n    quantity = 1;\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.selectedVariant$ = this.selectedVariantId$.pipe(\n            switchMap(id => {\n                if (id) {\n                    return this.dataService.product\n                        .getProductVariant(id)\n                        .mapSingle(({ productVariant }) => productVariant);\n                } else {\n                    return [undefined];\n                }\n            }),\n        );\n        for (const customField of this.orderLineCustomFields) {\n            this.customFieldsFormGroup.addControl(customField.name, new FormControl(''));\n        }\n    }\n\n    addItemClick(selectedVariant: GetProductVariantQuery['productVariant']) {\n        if (selectedVariant) {\n            this.addItem.emit({\n                productVariantId: selectedVariant.id,\n                quantity: this.quantity,\n                customFields: this.orderLineCustomFields.length\n                    ? this.customFieldsFormGroup.value\n                    : undefined,\n            });\n            this.selectedVariantId$.next(undefined);\n            this.customFieldsFormGroup.reset();\n        }\n    }\n}\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\n</span>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-line-refunds',\n    templateUrl: './line-refunds.component.html',\n    styleUrls: ['./line-refunds.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineRefundsComponent {\n    @Input() line: OrderDetail.Lines;\n    @Input() payments: OrderDetail.Payments[];\n\n    getRefundedCount(): number {\n        const refunds =\n            this.payments?.reduce(\n                (all, payment) => [...all, ...payment.refunds],\n                [] as OrderDetail.Refunds[],\n            ) ?? [];\n        return this.line.items.filter(i => {\n            if (i.refundId === null && !i.cancelled) {\n                return false;\n            }\n            if (i.refundId) {\n                const refund = refunds.find(r => r.id === i.refundId);\n                if (refund?.state === 'Failed') {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        }).length;\n    }\n}\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\n        <clr-icon\n            *ngIf=\"fulfillmentStatus === 'partial'\"\n            class=\"item-partially-fulfilled\"\n            shape=\"check-circle\"\n        ></clr-icon>\n        <clr-icon\n            *ngIf=\"fulfillmentStatus === 'none'\"\n            class=\"item-not-fulfilled\"\n            shape=\"exclamation-circle\"\n        ></clr-icon>\n    </button>\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\n            {{ 'order.line-fulfillment-all' | translate }}\n        </label>\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\n            {{\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\n            }}\n        </label>\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\n            {{ 'order.line-fulfillment-none' | translate }}\n        </label>\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\n            <div class=\"fulfillment-title\">\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\n                    'order.item-count' | translate: { count: item.count }\n                }})\n            </div>\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\n                {{ item.fulfillment.method }}\n            </vdr-labeled-data>\n            <vdr-labeled-data\n                *ngIf=\"item.fulfillment.trackingCode\"\n                [label]=\"'order.tracking-code' | translate\"\n            >\n                {{ item.fulfillment.trackingCode }}\n            </vdr-labeled-data>\n        </div>\n    </vdr-dropdown-menu>\n</vdr-dropdown>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\n\n@Component({\n    selector: 'vdr-line-fulfillment',\n    templateUrl: './line-fulfillment.component.html',\n    styleUrls: ['./line-fulfillment.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineFulfillmentComponent implements OnChanges {\n    @Input() line: OrderDetail.Lines;\n    @Input() orderState: string;\n    fulfilledCount = 0;\n    fulfillmentStatus: FulfillmentStatus;\n    fulfillments: Array<{\n        count: number;\n        fulfillment: NonNullable<OrderDetailFragment['fulfillments']>[number];\n    }> = [];\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.line) {\n            this.fulfilledCount = this.getDeliveredCount(this.line);\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\n            this.fulfillments = this.getFulfillments(this.line);\n        }\n    }\n\n    /**\n     * Returns the number of items in an OrderLine which are fulfilled.\n     */\n    private getDeliveredCount(line: OrderDetail.Lines): number {\n        return (\n            line.fulfillments?.reduce(\n                (sum, fulfillment) =>\n                    sum + (fulfillment.summary.find(s => s.orderLine.id === line.id)?.quantity ?? 0),\n                0,\n            ) ?? 0\n        );\n    }\n\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\n        if (fulfilledCount === lineQuantity) {\n            return 'full';\n        }\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\n            return 'partial';\n        }\n        return 'none';\n    }\n\n    private getFulfillments(\n        line: OrderDetail.Lines,\n    ): Array<{ count: number; fulfillment: NonNullable<OrderDetailFragment['fulfillments']>[number] }> {\n        return (\n            line.fulfillments?.map(fulfillment => {\n                const summaryLine = fulfillment.summary.find(s => s.orderLine.id === line.id);\n                return {\n                    count: summaryLine?.quantity ?? 0,\n                    fulfillment,\n                };\n            }) ?? []\n        );\n    }\n}\n","<table class=\"order-table table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'order.product-name' | translate }}</th>\n            <th>{{ 'order.product-sku' | translate }}</th>\n            <th>Is Cone</th>\n            <th>{{ 'order.quantity' | translate }}</th>\n            <th>{{ 'order.total' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngFor=\"let line of order.lines\">\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\n                <td class=\"align-middle thumb\">\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle unit-price\">\n                    {{ line.customFields.isCone ? 'Yes' : 'No' }}\n                    <!-- <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                    </div> -->\n                </td>\n                <td class=\"align-middle quantity\">\n                    <ng-container *ngIf=\"!isDraft; else draft\">\n                        {{ line.quantity }}\n                    </ng-container>\n                    <ng-template #draft>\n                        <div class=\"flex\">\n                            <input\n                                class=\"draft-qty\"\n                                type=\"number\"\n                                min=\"0\"\n                                #qtyInput\n                                [value]=\"line.quantity\"\n                                (blur)=\"draftInputBlur(line, qtyInput.valueAsNumber)\"\n                            />\n                            <button class=\"icon-button\" (click)=\"remove.emit({ lineId: line.id })\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\n                </td>\n                <td class=\"align-middle total\">\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\n                    </div>\n\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\n                        <vdr-dropdown *ngIf=\"discounts.length\">\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\n                                {{ 'order.promotions-applied' | translate }}\n                            </div>\n                            <vdr-dropdown-menu>\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\n                                        discount.description\n                                    }}</a>\n                                    <div class=\"promotion-amount\">\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </ng-container>\n                </td>\n            </tr>\n            <!-- <ng-container *ngIf=\"customFieldsForLine[line.id] as customFields\">\n                <tr *ngIf=\"customFields.length\">\n                    <td colspan=\"6\" class=\"custom-fields-row\">\n                        <div class=\"order-line-custom-fields\">\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\n                                <vdr-custom-field-control\n                                    [compact]=\"true\"\n                                    [readonly]=\"true\"\n                                    [customField]=\"field.config\"\n                                    [customFieldsFormGroup]=\"field.formGroup\"\n                                ></vdr-custom-field-control>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </ng-container> -->\n        </ng-container>\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n            <td class=\"align-middle\" colspan=\"2\"></td>\n            <td class=\"align-middle total\">\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <ng-container *ngFor=\"let discount of order.discounts\">\n            <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\n                <td colspan=\"5\" class=\"left clr-align-middle\">\n                    <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\n                    <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\n                        couponCode\n                    }}</vdr-chip>\n                </td>\n                <td class=\"clr-align-middle\">\n                    {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ discount.amount | localeCurrency: order.currencyCode }}\n                    </div>\n                </td>\n            </tr>\n        </ng-container>\n        <tr class=\"sub-total\">\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\n            <td colspan=\"4\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"shipping\">\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\n            <td class=\"clr-align-middle\">{{ getShippingNames(order) }}</td>\n            <td colspan=\"3\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"total\">\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\n            <td colspan=\"4\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.total | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AdjustmentType, CustomFieldConfig, OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-table',\n    templateUrl: './order-table.component.html',\n    styleUrls: ['./order-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderTableComponent implements OnInit {\n    @Input() order: OrderDetail.Fragment;\n    @Input() orderLineCustomFields: CustomFieldConfig[];\n    @Input() isDraft = false;\n    @Output() adjust = new EventEmitter<{ lineId: string; quantity: number }>();\n    @Output() remove = new EventEmitter<{ lineId: string }>();\n    orderLineCustomFieldsVisible = false;\n    customFieldsForLine: {\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: FormGroup; value: any }>;\n    } = {};\n\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\n    }\n\n    get showElided(): boolean {\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\n    }\n\n    ngOnInit(): void {\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\n        this.getLineCustomFields();\n    }\n\n    draftInputBlur(line: OrderDetailFragment['lines'][number], quantity: number) {\n        if (line.quantity !== quantity) {\n            this.adjust.emit({ lineId: line.id, quantity });\n        }\n    }\n\n    toggleOrderLineCustomFields() {\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\n    }\n\n    getLineDiscounts(line: OrderDetail.Lines) {\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\n    }\n\n    private getLineCustomFields() {\n        for (const line of this.order.lines) {\n            const formGroup = new FormGroup({});\n            const result = this.orderLineCustomFields\n                .map(config => {\n                    const value = (line as any).customFields[config.name];\n                    formGroup.addControl(config.name, new FormControl(value));\n                    return {\n                        config,\n                        formGroup,\n                        value,\n                    };\n                })\n                .filter(field => {\n                    return this.orderLineCustomFieldsVisible ? true : field.value != null;\n                });\n            this.customFieldsForLine[line.id] = result;\n        }\n    }\n\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\n        const id = promotion.adjustmentSource.split(':')[1];\n        return ['/marketing', 'promotions', id];\n    }\n\n    getCouponCodeForAdjustment(\n        order: OrderDetail.Fragment,\n        promotionAdjustment: OrderDetail.Discounts,\n    ): string | undefined {\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\n        const promotion = order.promotions.find(p => p.id === id);\n        if (promotion) {\n            return promotion.couponCode || undefined;\n        }\n    }\n\n    getShippingNames(order: OrderDetail.Fragment) {\n        if (order.shippingLines.length) {\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\n        } else {\n            return '';\n        }\n    }\n}\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\n    <div class=\"card-header\">\n        {{ 'common.custom-fields' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\n            <vdr-tabbed-custom-fields\n                entityName=\"Order\"\n                [customFields]=\"customFieldsConfig\"\n                [customFieldsFormGroup]=\"customFieldForm\"\n                [readonly]=\"!editable\"\n                [compact]=\"true\"\n            ></vdr-tabbed-custom-fields>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\n            <clr-icon shape=\"pencil\"></clr-icon>\n            {{ 'common.edit' | translate }}\n        </button>\n        <button\n            class=\"btn btn-sm btn-primary\"\n            (click)=\"onUpdateClick()\"\n            *ngIf=\"editable\"\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\n        >\n            <clr-icon shape=\"check\"></clr-icon>\n            {{ 'common.update' | translate }}\n        </button>\n        <button\n            class=\"btn btn-sm btn-secondary\"\n            (click)=\"onCancelClick()\"\n            *ngIf=\"editable\"\n        >\n            <clr-icon shape=\"times\"></clr-icon>\n            {{ 'common.cancel' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { CustomFieldConfig, ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-custom-fields-card',\n    templateUrl: './order-custom-fields-card.component.html',\n    styleUrls: ['./order-custom-fields-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderCustomFieldsCardComponent implements OnInit {\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\n    @Input() customFieldValues: { [name: string]: any } = {};\n    @Output() updateClick = new EventEmitter<any>();\n    customFieldForm: FormGroup;\n    editable = false;\n    constructor(private formBuilder: FormBuilder, private modalService: ModalService) {}\n\n    ngOnInit() {\n        this.customFieldForm = this.formBuilder.group({});\n        for (const field of this.customFieldsConfig) {\n            this.customFieldForm.addControl(\n                field.name,\n                this.formBuilder.control(this.customFieldValues[field.name]),\n            );\n        }\n    }\n\n    onUpdateClick() {\n        this.updateClick.emit(this.customFieldForm.value);\n        this.customFieldForm.markAsPristine();\n        this.editable = false;\n    }\n\n    onCancelClick() {\n        if (this.customFieldForm.dirty) {\n            this.modalService\n                .dialog({\n                    title: _('catalog.confirm-cancel'),\n                    buttons: [\n                        { type: 'secondary', label: _('common.keep-editing') },\n                        { type: 'danger', label: _('common.discard-changes'), returnValue: true },\n                    ],\n                })\n                .subscribe(result => {\n                    if (result) {\n                        this.customFieldForm.reset();\n                        this.customFieldForm.markAsPristine();\n                        this.editable = false;\n                    }\n                });\n        } else {\n            this.editable = false;\n        }\n    }\n}\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"completeOrder()\"\n            [disabled]=\"!order.customer || !order.lines.length || !order.shippingLines.length\"\n        >\n            <clr-icon shape=\"check\"></clr-icon>\n            {{ 'order.complete-draft-order' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"deleteOrder()\">\n                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                    {{ 'order.delete-draft-order' | translate }}\n                </button>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <vdr-draft-order-variant-selector\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n                [currencyCode]=\"order.currencyCode\"\n                (addItem)=\"addItemToOrder($event)\"\n            ></vdr-draft-order-variant-selector>\n            <vdr-order-table\n                [order]=\"order\"\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n                [isDraft]=\"true\"\n                (adjust)=\"adjustOrderLine($event)\"\n                (remove)=\"removeOrderLine($event)\"\n            ></vdr-order-table>\n            <div class=\"flex\">\n                <button\n                    *ngIf=\"order.couponCodes.length === 0 && !displayCouponCodeInput\"\n                    class=\"btn btn-link btn-sm mr2\"\n                    (click)=\"displayCouponCodeInput = !displayCouponCodeInput\"\n                >\n                    {{ 'order.set-coupon-codes' | translate }}\n                </button>\n                <div *ngIf=\"order.couponCodes.length || displayCouponCodeInput\">\n                    <label>{{ 'order.set-coupon-codes' | translate }}</label>\n                    <vdr-coupon-code-selector\n                        [couponCodes]=\"order.couponCodes\"\n                        (addCouponCode)=\"applyCouponCode($event)\"\n                        (removeCouponCode)=\"removeCouponCode($event)\"\n                    ></vdr-coupon-code-selector>\n                </div>\n            </div>\n            <ng-container *ngIf=\"order.taxSummary.length\">\n                <h4>{{ 'order.tax-summary' | translate }}</h4>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th>{{ 'common.description' | translate }}</th>\n                            <th>{{ 'order.tax-rate' | translate }}</th>\n                            <th>{{ 'order.tax-base' | translate }}</th>\n                            <th>{{ 'order.tax-total' | translate }}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let row of order.taxSummary\">\n                            <td>{{ row.description }}</td>\n                            <td>{{ row.taxRate / 100 | percent }}</td>\n                            <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\n                            <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </ng-container>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <clr-icon *ngIf=\"!order.customer\" shape=\"unknown-status\" class=\"is-warning\"></clr-icon>\n                    <clr-icon *ngIf=\"order.customer\" shape=\"check\" class=\"is-success\"></clr-icon>\n                    {{ 'order.customer' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-customer-label\n                            class=\"block mb2\"\n                            *ngIf=\"order.customer\"\n                            [customer]=\"order.customer\"\n                        ></vdr-customer-label>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setCustomer()\">\n                            {{ 'order.set-customer-for-order' | translate }}\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-block\">\n                    <h4 class=\"card-title\">\n                        <clr-icon\n                            *ngIf=\"!order.billingAddress.streetLine1\"\n                            shape=\"unknown-status\"\n                            class=\"is-warning\"\n                        ></clr-icon>\n                        <clr-icon\n                            *ngIf=\"order.billingAddress.streetLine1\"\n                            shape=\"check\"\n                            class=\"is-success\"\n                        ></clr-icon>\n                        {{ 'order.billing-address' | translate }}\n                    </h4>\n                    <div class=\"card-text\">\n                        <vdr-formatted-address\n                            class=\"block mb2\"\n                            *ngIf=\"order.billingAddress\"\n                            [address]=\"order.billingAddress\"\n                        ></vdr-formatted-address>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setBillingAddress()\">\n                            {{ 'order.set-billing-address' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <clr-icon\n                        *ngIf=\"!order.shippingAddress.streetLine1 || !order.shippingLines.length\"\n                        shape=\"unknown-status\"\n                        class=\"is-warning\"\n                    ></clr-icon>\n                    <clr-icon\n                        *ngIf=\"order.shippingAddress.streetLine1 && order.shippingLines.length\"\n                        shape=\"check\"\n                        class=\"is-success\"\n                    ></clr-icon>\n                    {{ 'order.shipping' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-formatted-address\n                            class=\"block mb2\"\n                            *ngIf=\"order.shippingAddress\"\n                            [address]=\"order.shippingAddress\"\n                        ></vdr-formatted-address>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setShippingAddress()\">\n                            {{ 'order.set-shipping-address' | translate }}\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <div *ngFor=\"let shippingLine of order.shippingLines\">\n                            {{ shippingLine.shippingMethod.name }}\n                        </div>\n                        <button class=\"btn btn-link btn-sm\" (click)=\"setShippingMethod()\">\n                            {{ 'order.set-shipping-method' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <vdr-order-custom-fields-card\n                [customFieldsConfig]=\"customFields\"\n                [customFieldValues]=\"order.customFields\"\n                (updateClick)=\"updateCustomFields($event)\"\n            ></vdr-order-custom-fields-card>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    DraftOrderEligibleShippingMethodsQuery,\n    ModalService,\n    NotificationService,\n    Order,\n    OrderDetail,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable, Subject } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport { SelectAddressDialogComponent } from '../select-address-dialog/select-address-dialog.component';\nimport { SelectCustomerDialogComponent } from '../select-customer-dialog/select-customer-dialog.component';\nimport { SelectShippingMethodDialogComponent } from '../select-shipping-method-dialog/select-shipping-method-dialog.component';\n\n@Component({\n    selector: 'vdr-draft-order-detail',\n    templateUrl: './draft-order-detail.component.html',\n    styleUrls: ['./draft-order-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DraftOrderDetailComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy\n{\n    detailForm = new FormGroup({});\n    eligibleShippingMethods$: Observable<\n        DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder']\n    >;\n    nextStates$: Observable<string[]>;\n    fetchHistory = new Subject<void>();\n    customFields: CustomFieldConfig[];\n    orderLineCustomFields: CustomFieldConfig[];\n    displayCouponCodeInput = false;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    ngOnInit() {\n        this.init();\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.eligibleShippingMethods$ = this.entity$.pipe(\n            switchMap(order =>\n                this.dataService.order\n                    .getDraftOrderEligibleShippingMethods(order.id)\n                    .mapSingle(\n                        ({ eligibleShippingMethodsForDraftOrder }) => eligibleShippingMethodsForDraftOrder,\n                    ),\n            ),\n        );\n        this.customFields = this.getCustomFieldConfig('Order');\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    addItemToOrder(event: { productVariantId: string; quantity: number; customFields: any }) {\n        this.dataService.order.addItemToDraftOrder(this.id, event).subscribe(result => {\n            if (result.addItemToDraftOrder.__typename !== 'Order') {\n                this.notificationService.error((result.addItemToDraftOrder as any).message);\n            }\n        });\n    }\n\n    adjustOrderLine(event: { lineId: string; quantity: number }) {\n        this.dataService.order\n            .adjustDraftOrderLine(this.id, { orderLineId: event.lineId, quantity: event.quantity })\n            .subscribe(result => {\n                if (result.adjustDraftOrderLine.__typename !== 'Order') {\n                    this.notificationService.error((result.adjustDraftOrderLine as any).message);\n                }\n            });\n    }\n\n    removeOrderLine(event: { lineId: string }) {\n        this.dataService.order.removeDraftOrderLine(this.id, event.lineId).subscribe(result => {\n            if (result.removeDraftOrderLine.__typename !== 'Order') {\n                this.notificationService.error((result.removeDraftOrderLine as any).message);\n            }\n        });\n    }\n\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\n        if (!orderAddress) {\n            return [];\n        }\n        return Object.values(orderAddress)\n            .filter(val => val !== 'OrderAddress')\n            .filter(line => !!line);\n    }\n\n    setCustomer() {\n        this.modalService.fromComponent(SelectCustomerDialogComponent).subscribe(result => {\n            if (this.hasId(result)) {\n                this.dataService.order\n                    .setCustomerForDraftOrder(this.id, { customerId: result.id })\n                    .subscribe();\n            } else if (result) {\n                this.dataService.order.setCustomerForDraftOrder(this.id, { input: result }).subscribe();\n            }\n        });\n    }\n\n    setShippingAddress() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(SelectAddressDialogComponent, {\n                        locals: {\n                            customerId: order.customer?.id,\n                            currentAddress: order.shippingAddress ?? undefined,\n                        },\n                    });\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.dataService.order.setDraftOrderShippingAddress(this.id, result).subscribe();\n                }\n            });\n    }\n\n    setBillingAddress() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(SelectAddressDialogComponent, {\n                        locals: {\n                            customerId: order.customer?.id,\n                            currentAddress: order.billingAddress ?? undefined,\n                        },\n                    });\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.dataService.order.setDraftOrderBillingAddress(this.id, result).subscribe();\n                }\n            });\n    }\n\n    applyCouponCode(couponCode: string) {\n        this.dataService.order.applyCouponCodeToDraftOrder(this.id, couponCode).subscribe();\n    }\n\n    removeCouponCode(couponCode: string) {\n        this.dataService.order.removeCouponCodeFromDraftOrder(this.id, couponCode).subscribe();\n    }\n\n    setShippingMethod() {\n        combineLatest(this.entity$, this.eligibleShippingMethods$)\n            .pipe(\n                take(1),\n                switchMap(([order, methods]) =>\n                    this.modalService.fromComponent(SelectShippingMethodDialogComponent, {\n                        locals: {\n                            eligibleShippingMethods: methods,\n                            currencyCode: order.currencyCode,\n                            currentSelectionId: order.shippingLines?.[0]?.shippingMethod.id,\n                        },\n                    }),\n                ),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.dataService.order.setDraftOrderShippingMethod(this.id, result).subscribe();\n                }\n            });\n    }\n\n    updateCustomFields(customFieldsValue: any) {\n        this.dataService.order\n            .updateOrderCustomFields({\n                id: this.id,\n                customFields: customFieldsValue,\n            })\n            .subscribe();\n    }\n\n    deleteOrder() {\n        this.dataService.order.deleteDraftOrder(this.id).subscribe(({ deleteDraftOrder }) => {\n            if (deleteDraftOrder.result === DeletionResult.DELETED) {\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Order',\n                });\n                this.router.navigate(['/orders']);\n            } else if (deleteDraftOrder.message) {\n                this.notificationService.error(deleteDraftOrder.message);\n            }\n        });\n    }\n\n    completeOrder() {\n        this.dataService.order\n            .transitionToState(this.id, 'ArrangingPayment')\n            .subscribe(({ transitionOrderToState }) => {\n                if (transitionOrderToState?.__typename === 'Order') {\n                    this.router.navigate(['/orders', this.id]);\n                } else if (transitionOrderToState?.__typename === 'OrderStateTransitionError') {\n                    this.notificationService.error(transitionOrderToState.transitionError);\n                }\n            });\n    }\n\n    private hasId<T extends { id: string }>(input: T | any): input is { id: string } {\n        return typeof input === 'object' && !!input.id;\n    }\n\n    protected setFormValues(entity: Order.Fragment): void {\n        // empty\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\n\n<div class=\"fulfillment-wrapper\">\n    <div class=\"order-table\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                    <th>{{ 'order.fulfill' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let line of order.lines\"\n                class=\"order-line\"\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\n            >\n                <td class=\"align-middle thumb\">\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\n                        type=\"number\"\n                        [max]=\"fulfillmentQuantities[line.id].max\"\n                        min=\"0\"\n                    />\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"shipping-details\">\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\n        <vdr-configurable-input\n            [operationDefinition]=\"fulfillmentHandlerDef\"\n            [operation]=\"fulfillmentHandler\"\n            [formControl]=\"fulfillmentHandlerControl\"\n            [removable]=\"false\"\n        ></vdr-configurable-input>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\n        {{ 'order.create-fulfillment' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    configurableOperationValueIsValid,\n    DataService,\n    Dialog,\n    FulfillOrderInput,\n    GlobalFlag,\n    OrderDetail,\n    OrderDetailFragment,\n    toConfigurableOperationInput,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-fulfill-order-dialog',\n    templateUrl: './fulfill-order-dialog.component.html',\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\n    resolveWith: (result?: FulfillOrderInput) => void;\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\n    fulfillmentHandler: ConfigurableOperation;\n    fulfillmentHandlerControl = new FormControl();\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\n\n    // Provided by modalService.fromComponent() call\n    order: OrderDetailFragment;\n\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\n                return {\n                    ...result,\n                    [line.id]: { fulfillCount, max: fulfillCount },\n                };\n            }, {});\n            this.changeDetector.markForCheck();\n        });\n\n        this.dataService.shippingMethod\n            .getShippingMethodOperations()\n            .mapSingle(data => data.fulfillmentHandlers)\n            .subscribe(handlers => {\n                this.fulfillmentHandlerDef =\n                    handlers.find(\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\n                    ) || handlers[0];\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\n                this.changeDetector.markForCheck();\n            });\n    }\n\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\n        const { trackInventory, stockOnHand } = line.productVariant;\n        const effectiveTracInventory =\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\n\n        const unfulfilledCount = this.getUnfulfilledCount(line);\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\n    }\n\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\n        const fulfilled =\n            line.fulfillments\n                ?.map(f => f.summary)\n                .flat()\n                .filter(row => row.orderLine.id === line.id)\n                .reduce((sum, row) => sum + row.quantity, 0) ?? 0;\n        return line.quantity - fulfilled;\n    }\n\n    canSubmit(): boolean {\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\n            (total, { fulfillCount }) => total + fulfillCount,\n            0,\n        );\n        const formIsValid =\n            configurableOperationValueIsValid(\n                this.fulfillmentHandlerDef,\n                this.fulfillmentHandlerControl.value,\n            ) && this.fulfillmentHandlerControl.valid;\n        return formIsValid && 0 < totalCount;\n    }\n\n    select() {\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\n            orderLineId,\n            quantity: fulfillCount,\n        }));\n        this.resolveWith({\n            lines,\n            handler: toConfigurableOperationInput(\n                this.fulfillmentHandler,\n                this.fulfillmentHandlerControl.value,\n            ),\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-fulfillment-state-label',\n    templateUrl: './fulfillment-state-label.component.html',\n    styleUrls: ['./fulfillment-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Pending':\n            case 'Shipped':\n                return 'warning';\n            case 'Delivered':\n                return 'success';\n            case 'Cancelled':\n                return 'error';\n        }\n    }\n}\n","<div class=\"items-list\">\n    <ul>\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\n            <div class=\"quantity\">{{ item.quantity }}</div>\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\n            {{ item.name }}\n        </li>\n    </ul>\n</div>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-simple-item-list',\n    templateUrl: './simple-item-list.component.html',\n    styleUrls: ['./simple-item-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SimpleItemListComponent {\n    @Input() items: Array<{ name: string; quantity: number }>;\n}\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\n    {{ fulfillment?.method }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\n    {{ fulfillment?.trackingCode }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\n</vdr-labeled-data>\n<ng-container *ngFor=\"let customField of customFieldConfig\">\n    <vdr-custom-field-control\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\n        [readonly]=\"true\"\n        [compact]=\"true\"\n        [customField]=\"customField\"\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\n    ></vdr-custom-field-control>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, OrderDetail, ServerConfigService } from '@vendure/admin-ui/core';\nimport { isObject } from '@vendure/common/lib/shared-utils';\n\n@Component({\n    selector: 'vdr-fulfillment-detail',\n    templateUrl: './fulfillment-detail.component.html',\n    styleUrls: ['./fulfillment-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\n    @Input() fulfillmentId: string;\n    @Input() order: OrderDetail.Fragment;\n\n    customFieldConfig: CustomFieldConfig[] = [];\n    customFieldFormGroup = new FormGroup({});\n\n    constructor(private serverConfigService: ServerConfigService) {}\n\n    ngOnInit() {\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.buildCustomFieldsFormGroup();\n    }\n\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\n    }\n\n    get items(): Array<{ name: string; quantity: number }> {\n        return (\n            this.fulfillment?.summary.map(row => {\n                return {\n                    name:\n                        this.order.lines.find(line => line.id === row.orderLine.id)?.productVariant.name ??\n                        '',\n                    quantity: row.quantity,\n                };\n            }) ?? []\n        );\n    }\n\n    buildCustomFieldsFormGroup() {\n        const customFields = (this.fulfillment as any).customFields;\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\n            this.customFieldFormGroup.addControl(fieldDef.name, new FormControl(customFields[fieldDef.name]));\n        }\n    }\n\n    customFieldIsObject(customField: unknown) {\n        return Array.isArray(customField) || isObject(customField);\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header fulfillment-header\">\n        <div>{{ 'order.fulfillment' | translate }}</div>\n        <div class=\"fulfillment-state\">\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <vdr-fulfillment-detail\n            *ngIf=\"!!fulfillment\"\n            [fulfillmentId]=\"fulfillment?.id\"\n            [order]=\"order\"\n        ></vdr-fulfillment-detail>\n    </div>\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\n            </button>\n        </ng-container>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\n                    <button\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionState.emit(nextState)\"\n                    >\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                            {{ 'order.cancel-fulfillment' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-fulfillment-card',\n    templateUrl: './fulfillment-card.component.html',\n    styleUrls: ['./fulfillment-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentCardComponent {\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\n    @Input() order: OrderDetail.Fragment;\n    @Output() transitionState = new EventEmitter<string>();\n\n    nextSuggestedState(): string | undefined {\n        if (!this.fulfillment) {\n            return;\n        }\n        const { nextStates } = this.fulfillment;\n        const namedStateOrDefault = (targetState: string) =>\n            nextStates.includes(targetState) ? targetState : nextStates[0];\n        switch (this.fulfillment?.state) {\n            case 'Pending':\n                return namedStateOrDefault('Shipped');\n            case 'Shipped':\n                return namedStateOrDefault('Delivered');\n            default:\n                return nextStates.find(s => s !== 'Cancelled');\n        }\n    }\n\n    nextOtherStates(): string[] {\n        if (!this.fulfillment) {\n            return [];\n        }\n        const suggested = this.nextSuggestedState();\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\n    }\n}\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\n    modification.note\n}}</vdr-labeled-data>\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\n    {{ getSurcharge(surcharge.id)?.description }}\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\n>\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\n</vdr-labeled-data>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-modification-detail',\n    templateUrl: './modification-detail.component.html',\n    styleUrls: ['./modification-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModificationDetailComponent implements OnChanges {\n    @Input() order: OrderDetailFragment;\n    @Input() modification: OrderDetail.Modifications;\n    private addedItems = new Map<OrderDetail.Lines, number>();\n    private removedItems = new Map<OrderDetail.Lines, number>();\n\n    ngOnChanges(): void {\n        const { added, removed } = this.getModifiedLines();\n        this.addedItems = added;\n        this.removedItems = removed;\n    }\n\n    getSurcharge(id: string) {\n        return this.order.surcharges.find(m => m.id === id);\n    }\n\n    getAddedItems() {\n        return [...this.addedItems.entries()].map(([line, count]) => {\n            return { name: line.productVariant.name, quantity: count };\n        });\n    }\n\n    getRemovedItems() {\n        return [...this.removedItems.entries()].map(([line, count]) => {\n            return { name: line.productVariant.name, quantity: count };\n        });\n    }\n\n    private getModifiedLines() {\n        const added = new Map<OrderDetail.Lines, number>();\n        const removed = new Map<OrderDetail.Lines, number>();\n        for (const _item of this.modification.orderItems || []) {\n            const result = this.getOrderLineAndItem(_item.id);\n            if (result) {\n                const { line, item } = result;\n                if (item.cancelled) {\n                    const count = removed.get(line) ?? 0;\n                    removed.set(line, count + 1);\n                } else {\n                    const count = added.get(line) ?? 0;\n                    added.set(line, count + 1);\n                }\n            }\n        }\n        return { added, removed };\n    }\n\n    private getOrderLineAndItem(itemId: string) {\n        for (const line of this.order.lines) {\n            const item = line.items.find(i => i.id === itemId);\n            if (item) {\n                return { line, item };\n            }\n        }\n    }\n}\n","export const NODE_HEIGHT = 72;\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\n    <div\n        class=\"node\"\n        [class.active-target]=\"activeTarget$ | async\"\n    >\n        {{ node.name | stateI18nToken | translate }}\n    </div>\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\n        <div class=\"cancelled-edge\">\n        </div>\n        <clr-icon shape=\"dot-circle\"></clr-icon>\n        <div class=\"cancelled-node\">\n            {{ cancelledState | stateI18nToken | translate }}\n        </div>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NODE_HEIGHT } from './constants';\nimport { StateNode } from './types';\n\n@Component({\n    selector: 'vdr-order-process-node',\n    templateUrl: './order-process-node.component.html',\n    styleUrls: ['./order-process-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessNodeComponent implements OnChanges {\n    @Input() node: StateNode;\n    @Input() index: number;\n    @Input() active: boolean;\n    active$ = new BehaviorSubject<boolean>(false);\n    activeTarget$ = new BehaviorSubject<boolean>(false);\n    isCancellable = false;\n    // We use a class field here to prevent the\n    // i18n extractor from extracting a \"Cancelled\" key\n    cancelledState = 'Cancelled';\n\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\n        if (changes.active) {\n            this.active$.next(this.active);\n        }\n    }\n\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\n        const nodeHeight =\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\n        return {\n            x: 10,\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\n        };\n    }\n\n    getStyle() {\n        const pos = this.getPos();\n        return {\n            'top.px': pos.y,\n            'left.px': pos.x,\n        };\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OrderProcessNodeComponent } from './order-process-node.component';\n\n@Component({\n    selector: 'vdr-order-process-edge',\n    templateUrl: './order-process-edge.component.html',\n    styleUrls: ['./order-process-edge.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessEdgeComponent implements OnInit {\n    @Input() from: OrderProcessNodeComponent;\n    @Input() to: OrderProcessNodeComponent;\n    @Input() index: number;\n    active$: Observable<boolean>;\n\n    ngOnInit() {\n        this.active$ = this.from.active$\n            .asObservable()\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\n    }\n\n    getStyle() {\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\n        const dX = Math.abs(startPos.x - endPos.x);\n        const dY = Math.abs(startPos.y - endPos.y);\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\n        return {\n            'top.px': startPos.y,\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\n            'height.px': length,\n            'width.px': 1,\n            ...(direction === 'up'\n                ? {\n                      transform: 'rotateZ(180deg)',\n                      'transform-origin': 'top',\n                  }\n                : {}),\n        };\n    }\n}\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\n    <vdr-order-process-node\n        [node]=\"state\"\n        [index]=\"i\"\n        [active]=\"(activeState$ | async) === state.name\"\n        (mouseenter)=\"onMouseOver(state.name)\"\n        (mouseleave)=\"onMouseOut()\"\n    ></vdr-order-process-node>\n</ng-container>\n<ng-container *ngFor=\"let edge of edges\">\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\n</ng-container>\n","<div\n    [attr.data-from]=\"from.node.name\"\n    [attr.data-to]=\"to.node.name\"\n    [ngStyle]=\"getStyle()\"\n    [class.active]=\"active$ | async\"\n    class=\"edge\">\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    OnChanges,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    ViewChildren,\n} from '@angular/core';\nimport { OrderProcessState } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { NODE_HEIGHT } from './constants';\nimport { OrderProcessNodeComponent } from './order-process-node.component';\nimport { StateNode } from './types';\n\n@Component({\n    selector: 'vdr-order-process-graph',\n    templateUrl: './order-process-graph.component.html',\n    styleUrls: ['./order-process-graph.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\n    @Input() states: OrderProcessState[];\n    @Input() initialState?: string;\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\n    activeState$: Observable<string | undefined>;\n    nodes: StateNode[] = [];\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\n\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    @HostBinding('style.height.px')\n    get outerHeight(): number {\n        return this.nodes.length * NODE_HEIGHT;\n    }\n\n    ngOnInit() {\n        this.setActiveState$.next(this.initialState);\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.populateNodes();\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => this.populateEdges());\n    }\n\n    onMouseOver(stateName: string) {\n        this.setActiveState$.next(stateName);\n    }\n\n    onMouseOut() {\n        this.setActiveState$.next(this.initialState);\n    }\n\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\n        if (this.nodeComponents) {\n            return this.nodeComponents.find((n) => n.node.name === state);\n        }\n    }\n\n    private populateNodes() {\n        const stateNodeMap = new Map<string, StateNode>();\n        for (const state of this.states) {\n            stateNodeMap.set(state.name, {\n                name: state.name,\n                to: [],\n            });\n        }\n\n        for (const [name, stateNode] of stateNodeMap.entries()) {\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\n            for (const target of targets) {\n                const targetNode = stateNodeMap.get(target);\n                if (targetNode) {\n                    stateNode.to.push(targetNode);\n                }\n            }\n        }\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\n    }\n\n    private populateEdges() {\n        for (const node of this.nodes) {\n            const nodeCmp = this.getNodeFor(node.name);\n            let index = 0;\n            for (const to of node.to) {\n                const toCmp = this.getNodeFor(to.name);\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\n                    this.edges.push({\n                        to: toCmp,\n                        from: nodeCmp,\n                        index,\n                    });\n                    index++;\n                }\n            }\n        }\n        this.edges = [...this.edges];\n        this.changeDetector.markForCheck();\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\n\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n    CancelOrderInput,\n    DataService,\n    Dialog,\n    OrderProcessState,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-order-process-graph-dialog',\n    templateUrl: './order-process-graph-dialog.component.html',\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\n    activeState: string;\n    states: OrderProcessState[] = [];\n    constructor(private serverConfigService: ServerConfigService) {}\n\n    ngOnInit(): void {\n        this.states = this.serverConfigService.getOrderProcessStates();\n    }\n\n    resolveWith: (result: void | undefined) => void;\n}\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\n\n<div class=\"refund-wrapper\">\n    <div class=\"order-table\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.unit-price' | translate }}</th>\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.refund' | translate }}</th>\n                    <th>{{ 'order.cancel' | translate }}</th>\n                </tr>\n            </thead>\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\n                <td class=\"align-middle thumb\">\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">\n                    {{ line.quantity }}\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                </td>\n                <td class=\"align-middle quantity\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class=\"align-middle quantity\">\n                    <div class=\"prorated-wrapper\">\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\n                        <ng-container *ngIf=\"line.discounts as discounts\">\n                            <vdr-dropdown *ngIf=\"discounts.length\">\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\n                                </div>\n                                <vdr-dropdown-menu>\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\n                                        {{ discount.description }}\n                                        <div class=\"promotion-amount\">\n                                            {{\n                                                discount.amount / 100 / line.quantity\n                                                    | number: '1.0-2'\n                                                    | currency: order.currencyCode\n                                            }}\n                                        </div>\n                                    </div>\n                                </vdr-dropdown-menu>\n                            </vdr-dropdown>\n                        </ng-container>\n                    </div>\n                </td>\n                <td class=\"align-middle quantity-col\">\n                    <input\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\n                        type=\"number\"\n                        [max]=\"line.quantity\"\n                        min=\"0\"\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\n                    />\n                </td>\n                <td class=\"align-middle\">\n                    <div class=\"cancel-checkbox-wrapper\">\n                        <input\n                            type=\"checkbox\"\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                            clrCheckbox\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\n                        />\n                    </div>\n                </td>\n                <td class=\"align-middle\">\n                    <div class=\"cancel-checkbox-wrapper\">\n                        <input\n                            type=\"checkbox\"\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                            clrCheckbox\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\n                        />\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"refund-details mt4\" [class.faded]=\"!isRefunding() && !isCancelling()\">\n        <div>\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\n            <ng-select\n                [disabled]=\"!isRefunding() && !isCancelling()\"\n                [items]=\"reasons\"\n                bindLabel=\"name\"\n                autofocus\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\n                bindValue=\"id\"\n                [addTag]=\"true\"\n                [(ngModel)]=\"reason\"\n            ></ng-select>\n        </div>\n\n        <div>\n            <clr-select-container>\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\n                    <option\n                        *ngFor=\"let payment of settledPayments\"\n                        [ngValue]=\"payment\"\n                        [disabled]=\"payment.state !== 'Settled'\"\n                    >\n                        #{{ payment.id }} {{ payment.method }}:\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\n                    </option>\n                </select>\n            </clr-select-container>\n\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\n                <label>\n                    {{ 'order.refund-shipping' | translate }} ({{\n                        order.shippingWithTax | localeCurrency: order.currencyCode\n                    }})\n                </label>\n            </clr-checkbox-wrapper>\n            <clr-input-container>\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\n                <vdr-currency-input\n                    clrInput\n                    [disabled]=\"!isRefunding()\"\n                    [currencyCode]=\"order.currencyCode\"\n                    [(ngModel)]=\"adjustment\"\n                ></vdr-currency-input>\n            </clr-input-container>\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\n                <div class=\"order-total\">\n                    {{ 'order.payment-amount' | translate }}:\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\n                </div>\n                <div class=\"refund-total\">\n                    {{ 'order.refund-total' | translate }}:\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\n                </div>\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\n                    {{\n                        'order.refund-total-error'\n                            | translate\n                                : {\n                                      min: 0 | currency: order.currencyCode,\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\n                                  }\n                    }}\n                </div>\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\n                    {{ 'order.refund-total-warning' | translate }}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\n            {{\n                'order.refund-with-amount'\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\n            }}\n        </ng-container>\n        <ng-template #cancelling>\n            {{ 'order.cancel-selected-items' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CancelOrderInput,\n    Dialog,\n    getAppConfig,\n    I18nService,\n    OrderDetail,\n    OrderDetailFragment,\n    OrderLineInput,\n    RefundOrderInput,\n} from '@vendure/admin-ui/core';\nimport { summate } from '@vendure/common/lib/shared-utils';\n\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\n\n@Component({\n    selector: 'vdr-refund-order-dialog',\n    templateUrl: './refund-order-dialog.component.html',\n    styleUrls: ['./refund-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RefundOrderDialogComponent\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }>\n{\n    order: OrderDetailFragment;\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\n    reason: string;\n    settledPayments: OrderDetail.Payments[];\n    selectedPayment: OrderDetail.Payments;\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\n    refundShipping = false;\n    adjustment = 0;\n    reasons = getAppConfig().cancellationReasons ?? [\n        _('order.refund-reason-customer-request'),\n        _('order.refund-reason-not-available'),\n    ];\n\n    constructor(private i18nService: I18nService) {\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\n    }\n\n    get refundTotal(): number {\n        const itemTotal = this.order.lines.reduce((total, line) => {\n            const lineRef = this.lineQuantities[line.id];\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\n            return total + line.proratedUnitPriceWithTax * refundCount;\n        }, 0);\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\n    }\n\n    get settledPaymentsTotal(): number {\n        return this.settledPayments\n            .map(payment => {\n                const paymentTotal = payment.amount;\n                const alreadyRefundedTotal = summate(\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\n                    'total',\n                );\n                return paymentTotal - alreadyRefundedTotal;\n            })\n            .reduce((sum, amount) => sum + amount, 0);\n    }\n\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\n        const refunds =\n            this.order.payments?.reduce(\n                (all, payment) => [...all, ...payment.refunds],\n                [] as OrderDetail.Refunds[],\n            ) ?? [];\n\n        const refundable = line.items.filter(i => {\n            if (i.cancelled) {\n                return false;\n            }\n            if (i.refundId == null) {\n                return true;\n            }\n            const refund = refunds.find(r => r.id === i.refundId);\n            return refund?.state === 'Failed';\n        });\n        return 0 < refundable.length;\n    }\n\n    ngOnInit() {\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\n            return {\n                ...result,\n                [line.id]: {\n                    quantity: 0,\n                    refund: false,\n                    cancel: false,\n                },\n            };\n        }, {});\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\n        if (this.settledPayments.length) {\n            this.selectedPayment = this.settledPayments[0];\n        }\n    }\n\n    handleZeroQuantity(line?: SelectionLine) {\n        if (line?.quantity === 0) {\n            line.cancel = false;\n            line.refund = false;\n        }\n    }\n\n    isRefunding(): boolean {\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\n            return isRefunding || (0 < line.quantity && line.refund);\n        }, false);\n        return result;\n    }\n\n    isCancelling(): boolean {\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\n            return isCancelling || (0 < line.quantity && line.cancel);\n        }, false);\n        return result;\n    }\n\n    canSubmit(): boolean {\n        if (this.isRefunding()) {\n            return !!(\n                this.selectedPayment &&\n                this.reason &&\n                0 < this.refundTotal &&\n                this.refundTotal <= this.settledPaymentsTotal\n            );\n        } else if (this.isCancelling()) {\n            return !!this.reason;\n        }\n        return false;\n    }\n\n    select() {\n        const payment = this.selectedPayment;\n        if (payment) {\n            const refundLines = this.getOrderLineInput(line => line.refund);\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\n\n            this.resolveWith({\n                refund: {\n                    lines: refundLines,\n                    reason: this.reason,\n                    shipping: this.refundShipping ? this.order.shippingWithTax : 0,\n                    adjustment: this.adjustment,\n                    paymentId: payment.id,\n                },\n                cancel: {\n                    lines: cancelLines,\n                    orderId: this.order.id,\n                    reason: this.reason,\n                    cancelShipping: this.refundShipping,\n                },\n            });\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\n        return Object.entries(this.lineQuantities)\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\n            .map(([orderLineId, line]) => ({\n                orderLineId,\n                quantity: line.quantity,\n            }));\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\n<p class=\"instruction\">\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\n</p>\n<clr-input-container>\n    <label>{{ 'order.transaction-id' | translate }}</label>\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\n</clr-input-container>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\n        {{ 'order.settle-refund' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { OrderDetail } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-settle-refund-dialog',\n    templateUrl: './settle-refund-dialog.component.html',\n    styleUrls: ['./settle-refund-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettleRefundDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    transactionId = '';\n    refund: OrderDetail.Refunds;\n\n    submit() {\n        this.resolveWith(this.transactionId);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\n    {{ payment.method }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\n    {{ payment.amount | localeCurrency: currencyCode }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\n    {{ payment.errorMessage }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\n    {{ payment.transactionId }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\n</vdr-labeled-data>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-payment-detail',\n    templateUrl: './payment-detail.component.html',\n    styleUrls: ['./payment-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentDetailComponent {\n    @Input() payment: OrderDetail.Payments;\n    @Input() currencyCode: CurrencyCode;\n}\n","<h4>{{ 'order.order-history' | translate }}</h4>\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\n        <div class=\"note-entry\">\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\n                {{ 'common.add-note' | translate }}\n            </button>\n        </div>\n        <div class=\"visibility-select\">\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\n                <label>{{ 'order.note-is-private' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\n                {{ 'order.note-only-visible-to-administrators' | translate }}\n            </span>\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\n                {{ 'order.note-visible-to-customer' | translate }}\n            </span>\n        </div>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry\n        *ngFor=\"let entry of history\"\n        [displayType]=\"getDisplayType(entry)\"\n        [iconShape]=\"getTimelineIcon(entry)\"\n        [createdAt]=\"entry.createdAt\"\n        [name]=\"getName(entry)\"\n        [featured]=\"isFeatured(entry)\"\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\n        (expandClick)=\"expanded = !expanded\"\n    >\n        <ng-container [ngSwitch]=\"entry.type\">\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\n                    {{ 'order.history-order-fulfilled' | translate }}\n                </div>\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\n                    {{ 'order.history-order-cancelled' | translate }}\n                </div>\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\n                    {{\n                        'order.history-order-transition'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\n                <div class=\"title\">\n                    {{ 'order.history-order-modified' | translate }}\n                </div>\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\n                    {{ 'order.modify-order-price-difference' | translate }}:\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\n                        'order.modification-settled' | translate\n                    }}</vdr-chip>\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\n                        'order.modification-not-settled' | translate\n                    }}</vdr-chip>\n                    <vdr-history-entry-detail>\n                        <vdr-modification-detail\n                            [order]=\"order\"\n                            [modification]=\"modification\"\n                        ></vdr-modification-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\n                    <div class=\"title\">\n                        {{ 'order.history-payment-settled' | translate }}\n                    </div>\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\n                        <vdr-payment-detail\n                            [payment]=\"payment\"\n                            [currencyCode]=\"order.currencyCode\"\n                        ></vdr-payment-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n                <ng-template #regularPaymentTransition>\n                    {{\n                        'order.history-payment-transition'\n                            | translate\n                                : {\n                                      from: entry.data.from,\n                                      to: entry.data.to,\n                                      id: getPayment(entry)?.transactionId\n                                  }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\n                {{\n                    'order.history-refund-transition'\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\n                }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\n                        {{ entry.data.reason }}\n                    </vdr-labeled-data>\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\n                    </vdr-labeled-data>\n                    <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\n                        {{ entry.data.shippingCancelled }}\n                    </vdr-labeled-data>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\n                {{ 'order.history-fulfillment-created' | translate }}\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]=\"fulfillment.id\"\n                        [order]=\"order\"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\n                    <div class=\"title\">\n                        {{ 'order.history-fulfillment-delivered' | translate }}\n                    </div>\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\n                    <div class=\"title\">\n                        {{ 'order.history-fulfillment-shipped' | translate }}\n                    </div>\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\n                    {{\n                        'order.history-fulfillment-transition'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-container>\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]=\"fulfillment.id\"\n                        [order]=\"order\"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\n                <div class=\"flex\">\n                    <div class=\"note-text\">\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\n                            'common.public' | translate\n                        }}</span>\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\n                            'common.private' | translate\n                        }}</span>\n                        {{ entry.data.note }}\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <vdr-dropdown>\n                        <button class=\"icon-button\" vdrDropdownTrigger>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"updateNote.emit(entry)\"\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"edit\"></clr-icon>\n                                {{ 'common.edit' | translate }}\n                            </button>\n                            <div class=\"dropdown-divider\"></div>\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"deleteNote.emit(entry)\"\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\n                {{ 'order.history-coupon-code-applied' | translate }}:\n                <vdr-chip>\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\n                        entry.data.couponCode\n                    }}</a>\n                </vdr-chip>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\n                {{ 'order.history-coupon-code-removed' | translate }}:\n                <vdr-chip\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\n                >\n            </ng-container>\n        </ng-container>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\n        <div class=\"title\">\n            {{ 'order.history-order-created' | translate }}\n        </div>\n    </vdr-timeline-entry>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    GetOrderHistory,\n    HistoryEntry,\n    HistoryEntryType,\n    OrderDetail,\n    OrderDetailFragment,\n    TimelineDisplayType,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-history',\n    templateUrl: './order-history.component.html',\n    styleUrls: ['./order-history.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent {\n    @Input() order: OrderDetailFragment;\n    @Input() history: GetOrderHistory.Items[];\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\n    note = '';\n    noteIsPrivate = true;\n    expanded = false;\n    readonly type = HistoryEntryType;\n\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return 'success';\n            }\n            if (entry.data.to === 'Cancelled') {\n                return 'error';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return 'success';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\n                return 'error';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\n            return 'error';\n        }\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\n            return 'warning';\n        }\n        return 'default';\n    }\n\n    getTimelineIcon(entry: GetOrderHistory.Items) {\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return ['success-standard', 'is-solid'];\n            }\n            if (entry.data.to === 'Cancelled') {\n                return 'ban';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\n            if (entry.data.to === 'Settled') {\n                return 'credit-card';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\n            return 'note';\n        }\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\n            return 'pencil';\n        }\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\n            if (entry.data.to === 'Shipped') {\n                return 'truck';\n            }\n            if (entry.data.to === 'Delivered') {\n                return 'truck';\n            }\n        }\n    }\n\n    isFeatured(entry: GetOrderHistory.Items): boolean {\n        switch (entry.type) {\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\n                return (\n                    entry.data.to === 'Delivered' ||\n                    entry.data.to === 'Cancelled' ||\n                    entry.data.to === 'Settled'\n                );\n            }\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\n            case HistoryEntryType.ORDER_NOTE:\n            case HistoryEntryType.ORDER_MODIFIED:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\n        if (\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\n            this.order.fulfillments\n        ) {\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\n        }\n    }\n\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\n        }\n    }\n\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\n        const itemMap = new Map<string, number>();\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\n        for (const line of this.order.lines) {\n            for (const item of line.items) {\n                if (cancelledItemIds.includes(item.id)) {\n                    const count = itemMap.get(line.productVariant.name);\n                    if (count != null) {\n                        itemMap.set(line.productVariant.name, count + 1);\n                    } else {\n                        itemMap.set(line.productVariant.name, 1);\n                    }\n                }\n            }\n        }\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\n    }\n\n    getModification(id: string) {\n        return this.order.modifications.find(m => m.id === id);\n    }\n\n    getName(entry: GetOrderHistory.Items): string {\n        const { administrator } = entry;\n        if (administrator) {\n            return `${administrator.firstName} ${administrator.lastName}`;\n        } else {\n            const customer = this.order.customer;\n            if (customer) {\n                return `${customer.firstName} ${customer.lastName}`;\n            }\n        }\n        return '';\n    }\n\n    addNoteToOrder() {\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\n        this.note = '';\n        this.noteIsPrivate = true;\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-payment-state-label',\n    templateUrl: './payment-state-label.component.html',\n    styleUrls: ['./payment-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Authorized':\n                return 'warning';\n            case 'Settled':\n                return 'success';\n            case 'Declined':\n            case 'Cancelled':\n                return 'error';\n        }\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-refund-state-label',\n    templateUrl: './refund-state-label.component.html',\n    styleUrls: ['./refund-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RefundStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Pending':\n                return 'warning';\n            case 'Settled':\n                return 'success';\n            case 'Failed':\n                return 'error';\n        }\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header payment-header\">\n        <div>\n            {{ 'order.payment' | translate }}\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\n        </div>\n        <div class=\"payment-state\">\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\n    </div>\n    <ng-container *ngFor=\"let refund of payment.refunds\">\n        <div class=\"card-header payment-header\">\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\n            {{ 'order.refund' | translate }} #{{ refund.id }}\n            <div class=\"clr-flex-fill\"></div>\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\n        </div>\n        <div class=\"card-block\">\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\n                {{ refund.createdAt | localeDate: 'medium' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\n                {{ refund.total | localeCurrency: currencyCode }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\n                {{ refund.transactionId }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\n                {{ refund.reason }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\n            </vdr-labeled-data>\n        </div>\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\n                {{ 'order.settle-refund' | translate }}\n            </button>\n        </div>\n    </ng-container>\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\n        <button\n            class=\"btn btn-sm btn-primary\"\n            *ngIf=\"payment.nextStates.includes('Settled')\"\n            (click)=\"settlePayment.emit(payment)\"\n        >\n            {{ 'order.settle-payment' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\n                    <button\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\n                    >\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\n                            {{\n                                'order.transition-to-state'\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\n                            }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                            {{ 'order.cancel-payment' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CurrencyCode } from '@vendure/admin-ui/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-payment-card',\n    templateUrl: './order-payment-card.component.html',\n    styleUrls: ['./order-payment-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderPaymentCardComponent {\n    @Input() payment: OrderDetail.Payments;\n    @Input() currencyCode: CurrencyCode;\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\n\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\n        return !!refund && Object.keys(refund.metadata).length > 0;\n    }\n\n    nextOtherStates(): string[] {\n        if (!this.payment) {\n            return [];\n        }\n        return this.payment.nextStates.filter(s => s !== 'Settled' && s !== 'Error');\n    }\n}\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\">\n                <button\n                    class=\"icon-button\"\n                    (click)=\"openStateDiagram()\"\n                    [title]=\"'order.order-state-diagram' | translate\"\n                >\n                    <clr-icon shape=\"list\"></clr-icon>\n                </button>\n            </vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"\n                (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\n            \"\n            (click)=\"addManualPayment(order)\"\n        >\n            {{ 'order.add-payment-to-order' | translate }}\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\n        </button>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"\n                order.active === false &&\n                order.state !== 'ArrangingAdditionalPayment' &&\n                order.state !== 'ArrangingPayment' &&\n                0 < outstandingPaymentAmount(order)\n            \"\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\n        >\n            {{ 'order.arrange-additional-payment' | translate }}\n        </button>\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\n            {{ 'order.fulfill-order' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'order.modify-order' | translate }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                </ng-container>\n                <button\n                    type=\"button\"\n                    class=\"btn\"\n                    vdrDropdownItem\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\n                    (click)=\"cancelOrRefund(order)\"\n                >\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\n                        {{ 'order.refund-and-cancel-order' | translate }}\n                    </ng-container>\n                    <ng-template #cancelOnly>\n                        {{ 'order.cancel-order' | translate }}\n                    </ng-template>\n                </button>\n\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        *ngFor=\"let nextState of nextStates$ | async\"\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionToState(nextState)\"\n                    >\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\n                        {{\n                            'order.transition-to-state'\n                                | translate: { state: (nextState | stateI18nToken | translate) }\n                        }}\n                    </button>\n                </ng-container>\n                <div class=\"dropdown-divider\"></div>\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\n                    {{ 'order.manually-transition-to-state' | translate }}\n                </button>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <vdr-order-table\n                [order]=\"order\"\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n            ></vdr-order-table>\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th>{{ 'common.description' | translate }}</th>\n                        <th>{{ 'order.tax-rate' | translate }}</th>\n                        <th>{{ 'order.tax-base' | translate }}</th>\n                        <th>{{ 'order.tax-total' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let row of order.taxSummary\">\n                        <td>{{ row.description }}</td>\n                        <td>{{ row.taxRate / 100 | percent }}</td>\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <vdr-custom-detail-component-host\n                locationId=\"order-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-order-history\n                [order]=\"order\"\n                [history]=\"history$ | async\"\n                (addNote)=\"addNote($event)\"\n                (updateNote)=\"updateNote($event)\"\n                (deleteNote)=\"deleteNote($event)\"\n            ></vdr-order-history>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <vdr-order-custom-fields-card\n                [customFieldsConfig]=\"customFields\"\n                [customFieldValues]=\"order.customFields\"\n                (updateClick)=\"updateCustomFields($event)\"\n            ></vdr-order-custom-fields-card>\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    {{ 'order.customer' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\n                            {{ 'order.shipping-address' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\n                            {{ 'order.billing-address' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\n                    </div>\n                </div>\n            </div>\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\n                <vdr-order-payment-card\n                    *ngFor=\"let payment of order.payments\"\n                    [currencyCode]=\"order.currencyCode\"\n                    [payment]=\"payment\"\n                    (settlePayment)=\"settlePayment($event)\"\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\n                    (settleRefund)=\"settleRefund($event)\"\n                ></vdr-order-payment-card>\n            </ng-container>\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\n                <vdr-fulfillment-card\n                    [fulfillment]=\"fulfillment\"\n                    [order]=\"order\"\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\n                ></vdr-fulfillment-card>\n            </ng-container>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CancelOrder,\n    CustomFieldConfig,\n    DataService,\n    EditNoteDialogComponent,\n    FulfillmentFragment,\n    FulfillmentLineSummary,\n    GetOrderHistory,\n    GetOrderQuery,\n    HistoryEntry,\n    HistoryEntryType,\n    ModalService,\n    NotificationService,\n    Order,\n    OrderDetail,\n    OrderDetailFragment,\n    OrderLineFragment,\n    Refund,\n    RefundOrder,\n    ServerConfigService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { pick } from '@vendure/common/lib/pick';\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\n\n@Component({\n    selector: 'vdr-order-detail',\n    templateUrl: './order-detail.component.html',\n    styleUrls: ['./order-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderDetailComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy\n{\n    detailForm = new FormGroup({});\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\n    nextStates$: Observable<string[]>;\n    fetchHistory = new Subject<void>();\n    customFields: CustomFieldConfig[];\n    orderLineCustomFields: CustomFieldConfig[];\n    private readonly defaultStates = [\n        'AddingItems',\n        'ArrangingPayment',\n        'PaymentAuthorized',\n        'PaymentSettled',\n        'PartiallyShipped',\n        'Shipped',\n        'PartiallyDelivered',\n        'Delivered',\n        'Cancelled',\n        'Modifying',\n        'ArrangingAdditionalPayment',\n    ];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    ngOnInit() {\n        this.init();\n        this.entity$.pipe(take(1)).subscribe(order => {\n            if (order.state === 'Modifying') {\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\n            }\n        });\n        this.customFields = this.getCustomFieldConfig('Order');\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.history$ = this.fetchHistory.pipe(\n            startWith(null),\n            switchMap(() => {\n                return this.dataService.order\n                    .getOrderHistory(this.id, {\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    })\n                    .mapStream(data => data.order?.history.items);\n            }),\n        );\n        this.nextStates$ = this.entity$.pipe(\n            map(order => {\n                const isInCustomState = !this.defaultStates.includes(order.state);\n                return isInCustomState\n                    ? order.nextStates\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    openStateDiagram() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order =>\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\n                        closable: true,\n                        locals: {\n                            activeState: order.state,\n                        },\n                    }),\n                ),\n            )\n            .subscribe();\n    }\n\n    transitionToState(state: string) {\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\n            switch (transitionOrderToState?.__typename) {\n                case 'Order':\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\n                    this.fetchHistory.next();\n                    break;\n                case 'OrderStateTransitionError':\n                    this.notificationService.error(transitionOrderToState.transitionError);\n            }\n        });\n    }\n\n    manuallyTransitionToState(order: OrderDetailFragment) {\n        this.orderTransitionService\n            .manuallyTransitionToState({\n                orderId: order.id,\n                nextStates: order.nextStates,\n                cancellable: true,\n                message: _('order.manually-transition-to-state-message'),\n                retry: 0,\n            })\n            .subscribe();\n    }\n\n    transitionToModifying() {\n        this.dataService.order\n            .transitionToState(this.id, 'Modifying')\n            .subscribe(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\n                        break;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState.transitionError);\n                }\n            });\n    }\n\n    updateCustomFields(customFieldsValue: any) {\n        this.dataService.order\n            .updateOrderCustomFields({\n                id: this.id,\n                customFields: customFieldsValue,\n            })\n            .subscribe(() => {\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\n            });\n    }\n\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\n        if (!orderAddress) {\n            return [];\n        }\n        return Object.values(orderAddress)\n            .filter(val => val !== 'OrderAddress')\n            .filter(line => !!line);\n    }\n\n    settlePayment(payment: OrderDetail.Payments) {\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\n            switch (settlePayment.__typename) {\n                case 'Payment':\n                    if (settlePayment.state === 'Settled') {\n                        this.notificationService.success(_('order.settle-payment-success'));\n                    } else {\n                        this.notificationService.error(_('order.settle-payment-error'));\n                    }\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\n                    this.fetchHistory.next();\n                    break;\n                case 'OrderStateTransitionError':\n                case 'PaymentStateTransitionError':\n                case 'SettlePaymentError':\n                    this.notificationService.error(settlePayment.message);\n            }\n        });\n    }\n\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\n        if (state === 'Cancelled') {\n            this.dataService.order.cancelPayment(payment.id).subscribe(({ cancelPayment }) => {\n                switch (cancelPayment.__typename) {\n                    case 'Payment':\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\n                            state,\n                        });\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\n                        this.fetchHistory.next();\n                        break;\n                    case 'PaymentStateTransitionError':\n                        this.notificationService.error(cancelPayment.transitionError);\n                        break;\n                    case 'CancelPaymentError':\n                        this.notificationService.error(cancelPayment.paymentErrorMessage);\n                        break;\n                }\n            });\n        } else {\n            this.dataService.order\n                .transitionPaymentToState(payment.id, state)\n                .subscribe(({ transitionPaymentToState }) => {\n                    switch (transitionPaymentToState.__typename) {\n                        case 'Payment':\n                            this.notificationService.success(\n                                _('order.transitioned-payment-to-state-success'),\n                                {\n                                    state,\n                                },\n                            );\n                            this.dataService.order.getOrder(this.id).single$.subscribe();\n                            this.fetchHistory.next();\n                            break;\n                        case 'PaymentStateTransitionError':\n                            this.notificationService.error(transitionPaymentToState.message);\n                            break;\n                    }\n                });\n        }\n    }\n\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\n        const allFulfillmentSummaryRows: FulfillmentFragment['summary'] = (order.fulfillments ?? []).reduce(\n            (all, fulfillment) => [...all, ...fulfillment.summary],\n            [] as FulfillmentFragment['summary'],\n        );\n        let allItemsFulfilled = true;\n        for (const line of order.lines) {\n            const totalFulfilledCount = allFulfillmentSummaryRows\n                .filter(row => row.orderLine.id === line.id)\n                .reduce((sum, row) => sum + row.quantity, 0);\n            if (totalFulfilledCount < line.quantity) {\n                allItemsFulfilled = false;\n            }\n        }\n        return (\n            !allItemsFulfilled &&\n            !this.hasUnsettledModifications(order) &&\n            this.outstandingPaymentAmount(order) === 0 &&\n            (order.nextStates.includes('Shipped') ||\n                order.nextStates.includes('PartiallyShipped') ||\n                order.nextStates.includes('Delivered'))\n        );\n    }\n\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\n    }\n\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\n        return summate(\n            order.modifications.filter(m => !m.isSettled),\n            'priceChange',\n        );\n    }\n\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\n\n        let amountCovered = 0;\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\n            amountCovered += payment.amount - refundsTotal;\n        }\n        return order.totalWithTax - amountCovered;\n    }\n\n    addManualPayment(order: OrderDetailFragment) {\n        const priorState = order.state;\n        this.modalService\n            .fromComponent(AddManualPaymentDialogComponent, {\n                closable: true,\n                locals: {\n                    outstandingAmount: this.outstandingPaymentAmount(order),\n                    currencyCode: order.currencyCode,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.order.addManualPaymentToOrder({\n                            orderId: this.id,\n                            transactionId: result.transactionId,\n                            method: result.method,\n                            metadata: result.metadata || {},\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n                switchMap(({ addManualPaymentToOrder }) => {\n                    switch (addManualPaymentToOrder.__typename) {\n                        case 'Order':\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\n                            if (priorState === 'ArrangingAdditionalPayment') {\n                                return this.orderTransitionService.transitionToPreModifyingState(\n                                    order.id,\n                                    order.nextStates,\n                                );\n                            } else {\n                                return this.dataService.order\n                                    .transitionToState(this.id, 'PaymentSettled')\n                                    .pipe(mapTo('PaymentSettled'));\n                            }\n                        case 'ManualPaymentStateError':\n                            this.notificationService.error(addManualPaymentToOrder.message);\n                            return EMPTY;\n                        default:\n                            return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.refetchOrder({ result });\n                }\n            });\n    }\n\n    fulfillOrder() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\n                        size: 'xl',\n                        locals: {\n                            order,\n                        },\n                    });\n                }),\n                switchMap(input => {\n                    if (input) {\n                        return this.dataService.order.createFulfillment(input);\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\n            )\n            .subscribe(result => {\n                if (result) {\n                    const { addFulfillmentToOrder } = result;\n                    switch (addFulfillmentToOrder.__typename) {\n                        case 'Fulfillment':\n                            this.notificationService.success(_('order.create-fulfillment-success'));\n                            break;\n                        case 'EmptyOrderLineSelectionError':\n                        case 'InsufficientStockOnHandError':\n                        case 'ItemsAlreadyFulfilledError':\n                        case 'InvalidFulfillmentHandlerError':\n                            this.notificationService.error(addFulfillmentToOrder.message);\n                            break;\n                        case 'FulfillmentStateTransitionError':\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\n                            break;\n                        case 'CreateFulfillmentError':\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\n                            break;\n                        case undefined:\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\n                            break;\n                        default:\n                            assertNever(addFulfillmentToOrder);\n                    }\n                }\n            });\n    }\n\n    transitionFulfillment(id: string, state: string) {\n        this.dataService.order\n            .transitionFulfillmentToState(id, state)\n            .pipe(switchMap(result => this.refetchOrder(result)))\n            .subscribe(() => {\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\n            });\n    }\n\n    cancelOrRefund(order: OrderDetail.Fragment) {\n        const isRefundable = this.orderHasSettledPayments(order);\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\n            this.cancelOrder(order);\n        } else {\n            this.refundOrder(order);\n        }\n    }\n\n    settleRefund(refund: OrderDetail.Refunds) {\n        this.modalService\n            .fromComponent(SettleRefundDialogComponent, {\n                size: 'md',\n                locals: {\n                    refund,\n                },\n            })\n            .pipe(\n                switchMap(transactionId => {\n                    if (transactionId) {\n                        return this.dataService.order.settleRefund(\n                            {\n                                transactionId,\n                                id: refund.id,\n                            },\n                            this.id,\n                        );\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                // switchMap(result => this.refetchOrder(result)),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.notificationService.success(_('order.settle-refund-success'));\n                }\n            });\n    }\n\n    addNote(event: { note: string; isPublic: boolean }) {\n        const { note, isPublic } = event;\n        this.dataService.order\n            .addNoteToOrder({\n                id: this.id,\n                note,\n                isPublic,\n            })\n            .pipe(switchMap(result => this.refetchOrder(result)))\n            .subscribe(result => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    updateNote(entry: HistoryEntry) {\n        this.modalService\n            .fromComponent(EditNoteDialogComponent, {\n                closable: true,\n                locals: {\n                    displayPrivacyControls: true,\n                    note: entry.data.note,\n                    noteIsPrivate: !entry.isPublic,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.order.updateOrderNote({\n                            noteId: entry.id,\n                            isPublic: !result.isPrivate,\n                            note: result.note,\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-update-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    deleteNote(entry: HistoryEntry) {\n        return this.modalService\n            .dialog({\n                title: _('common.confirm-delete-note'),\n                body: entry.data.note,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\n            .subscribe(() => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\n        return !!order.payments?.find(p => p.state === 'Settled');\n    }\n\n    private cancelOrder(order: OrderDetail.Fragment) {\n        this.modalService\n            .fromComponent(CancelOrderDialogComponent, {\n                size: 'xl',\n                locals: {\n                    order,\n                },\n            })\n            .pipe(\n                switchMap(input => {\n                    if (input) {\n                        return this.dataService.order.cancelOrder(input);\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                switchMap(result => this.refetchOrder(result)),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.notificationService.success(_('order.cancelled-order-success'));\n                }\n            });\n    }\n\n    private refundOrder(order: OrderDetail.Fragment) {\n        this.modalService\n            .fromComponent(RefundOrderDialogComponent, {\n                size: 'xl',\n                locals: {\n                    order,\n                },\n            })\n            .pipe(\n                switchMap(input => {\n                    if (!input) {\n                        return of(undefined);\n                    }\n\n                    if (input.cancel.lines?.length) {\n                        return this.dataService.order.cancelOrder(input.cancel).pipe(\n                            map(res => {\n                                const result = res.cancelOrder;\n                                switch (result.__typename) {\n                                    case 'Order':\n                                        this.refetchOrder(result).subscribe();\n                                        this.notificationService.success(_('order.cancelled-order-success'));\n                                        return input;\n                                    case 'CancelActiveOrderError':\n                                    case 'QuantityTooGreatError':\n                                    case 'MultipleOrderError':\n                                    case 'OrderStateTransitionError':\n                                    case 'EmptyOrderLineSelectionError':\n                                        this.notificationService.error(result.message);\n                                        return undefined;\n                                }\n                            }),\n                        );\n                    } else {\n                        return [input];\n                    }\n                }),\n                switchMap(input => {\n                    if (!input) {\n                        return of(undefined);\n                    }\n                    if (input.refund.lines.length) {\n                        return this.dataService.order\n                            .refundOrder(input.refund)\n                            .pipe(map(res => res.refundOrder));\n                    } else {\n                        return [undefined];\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    switch (result.__typename) {\n                        case 'Refund':\n                            this.refetchOrder(result).subscribe();\n                            if (result.state === 'Failed') {\n                                this.notificationService.error(_('order.refund-order-failed'));\n                            } else {\n                                this.notificationService.success(_('order.refund-order-success'));\n                            }\n                            break;\n                        case 'AlreadyRefundedError':\n                        case 'NothingToRefundError':\n                        case 'PaymentOrderMismatchError':\n                        case 'RefundOrderStateError':\n                        case 'RefundStateTransitionError':\n                            this.notificationService.error(result.message);\n                            break;\n                    }\n                }\n            });\n    }\n\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\n        this.fetchHistory.next();\n        if (result) {\n            return this.dataService.order.getOrder(this.id).single$;\n        } else {\n            return of(undefined);\n        }\n    }\n\n    protected setFormValues(entity: Order.Fragment): void {\n        // empty\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\n\nexport enum OrderEditResultType {\n    Refund,\n    Payment,\n    PriceUnchanged,\n    Cancel,\n}\n\ninterface OrderEditsRefundResult {\n    result: OrderEditResultType.Refund;\n    refundPaymentId: string;\n    refundNote?: string;\n}\ninterface OrderEditsPaymentResult {\n    result: OrderEditResultType.Payment;\n}\ninterface OrderEditsPriceUnchangedResult {\n    result: OrderEditResultType.PriceUnchanged;\n}\ninterface OrderEditsCancelResult {\n    result: OrderEditResultType.Cancel;\n}\ntype OrderEditResult =\n    | OrderEditsRefundResult\n    | OrderEditsPaymentResult\n    | OrderEditsPriceUnchangedResult\n    | OrderEditsCancelResult;\n\n@Component({\n    selector: 'vdr-order-edits-preview-dialog',\n    templateUrl: './order-edits-preview-dialog.component.html',\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\n    // Passed in via the modalService\n    order: OrderDetail.Fragment;\n    originalTotalWithTax: number;\n    orderLineCustomFields: CustomFieldConfig[];\n    modifyOrderInput: ModifyOrderInput;\n\n    selectedPayment?: OrderDetail.Payments;\n    refundNote: string;\n    resolveWith: (result?: OrderEditResult) => void;\n\n    get priceDifference(): number {\n        return this.order.totalWithTax - this.originalTotalWithTax;\n    }\n\n    ngOnInit() {\n        this.refundNote = this.modifyOrderInput.note || '';\n    }\n\n    cancel() {\n        this.resolveWith({\n            result: OrderEditResultType.Cancel,\n        });\n    }\n\n    submit() {\n        if (0 < this.priceDifference) {\n            this.resolveWith({\n                result: OrderEditResultType.Payment,\n            });\n        } else if (this.priceDifference < 0) {\n            this.resolveWith({\n                result: OrderEditResultType.Refund,\n                // tslint:disable-next-line:no-non-null-assertion\n                refundPaymentId: this.selectedPayment!.id,\n                refundNote: this.refundNote,\n            });\n        } else {\n            this.resolveWith({\n                result: OrderEditResultType.PriceUnchanged,\n            });\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\n\n<h4 class=\"h4\">\n    {{ 'order.modify-order-price-difference' | translate }}:\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\n</h4>\n<div *ngIf=\"priceDifference < 0\">\n<clr-select-container>\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\n        <option\n            *ngFor=\"let payment of order.payments\"\n            [ngValue]=\"payment\"\n        >\n            #{{ payment.id }} {{ payment.method }}:\n            {{ payment.amount | localeCurrency: order.currencyCode }}\n        </option>\n    </select>\n</clr-select-container>\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\n            {{ 'order.cancel-modification' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <table class=\"order-table table\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>{{ 'order.product-name' | translate }}</th>\n                        <th>{{ 'order.product-sku' | translate }}</th>\n                        <th>{{ 'order.unit-price' | translate }}</th>\n                        <th>{{ 'order.quantity' | translate }}</th>\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\n                        <th>{{ 'order.total' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr\n                        *ngFor=\"let line of order.lines; let i = index\"\n                        class=\"order-line\"\n                        [class.is-cancelled]=\"line.quantity === 0\"\n                        [class.modified]=\"isLineModified(line)\"\n                    >\n                        <td class=\"align-middle thumb\">\n                            <img\n                                *ngIf=\"line.featuredAsset\"\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\n                            />\n                        </td>\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                        <td class=\"align-middle unit-price\">\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class=\"align-middle quantity\">\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                [value]=\"line.quantity\"\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\n                            />\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                            <vdr-line-fulfillment\n                                [line]=\"line\"\n                                [orderState]=\"order.state\"\n                            ></vdr-line-fulfillment>\n                        </td>\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\n                            <vdr-tabbed-custom-fields\n                                entityName=\"OrderLine\"\n                                [customFields]=\"orderLineCustomFields\"\n                                [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\n                                [compact]=\"true\"\n                            ></vdr-tabbed-custom-fields>\n                        </td>\n                        <td class=\"align-middle total\">\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\n                        class=\"modified\"\n                    >\n                        <td class=\"align-middle thumb\">\n                            <img\n                                *ngIf=\"addedLine.productAsset\"\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\n                            />\n                        </td>\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\n                        <td class=\"align-middle unit-price\">\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class=\"align-middle quantity\">\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                [value]=\"addedLine.quantity\"\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\n                            />\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </td>\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                                <vdr-custom-field-control\n                                    [customField]=\"customField\"\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\n                                    entityName=\"OrderLine\"\n                                    [compact]=\"true\"\n                                ></vdr-custom-field-control>\n                            </ng-container>\n                        </td>\n                        <td class=\"align-middle total\">\n                            {{\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\n                                    | currency: order.currencyCode\n                            }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{\n                                    (addedLine.price * addedLine.quantity) / 100\n                                        | currency: order.currencyCode\n                                }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n                        <td class=\"align-middle\"></td>\n                        <td></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"align-middle total\">\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        class=\"surcharge modified\"\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\n                    >\n                        <td class=\"align-middle name left\" colspan=\"2\">\n                            {{ surcharge.description }}\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </td>\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n                        <td class=\"align-middle\"></td>\n                        <td></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"align-middle total\">\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\n                                </div>\n                            </ng-container>\n                        </td>\n                    </tr>\n                    <tr class=\"shipping\">\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\n                        <td colspan=\"3\"></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"clr-align-middle\">\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\n            <clr-accordion>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\n                        </vdr-product-selector>\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\n                            <img\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\n                                [src]=\"asset | assetPreview: 'tiny'\"\n                                class=\"mr4\"\n                            />\n                            <div>\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\n                                <small>{{ addItemSelectedVariant.sku }}</small>\n                                <div>\n                                    {{\n                                        getSelectedItemPrice(addItemSelectedVariant)\n                                            | localeCurrency: order.currencyCode\n                                    }}\n                                </div>\n                            </div>\n                        </div>\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                            <vdr-custom-field-control\n                                [readonly]=\"!addItemSelectedVariant\"\n                                [customField]=\"customField\"\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\n                                entityName=\"OrderLine\"\n                                [compact]=\"true\"\n                            ></vdr-custom-field-control>\n                        </ng-container>\n                        <button\n                            class=\"btn btn-secondary\"\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\n                        >\n                            {{ 'order.add-item-to-order' | translate }}\n                        </button>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.set-coupon-codes' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-coupon-code-selector\n                            [control]=\"couponCodesControl\"\n                        ></vdr-coupon-code-selector>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\">\n                                <vdr-currency-input\n                                    [currencyCode]=\"order.currencyCode\"\n                                    id=\"price\"\n                                    formControlName=\"price\"\n                                ></vdr-currency-input>\n                            </vdr-form-field>\n                            <vdr-form-field\n                                [label]=\"\n                                    'catalog.price-includes-tax-at'\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\n                                \"\n                                for=\"priceIncludesTax\"\n                                ><input\n                                    id=\"priceIncludesTax\"\n                                    type=\"checkbox\"\n                                    clrCheckbox\n                                    formControlName=\"priceIncludesTax\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\">\n                                <vdr-affixed-input suffix=\"%\"\n                                    ><input\n                                        id=\"taxRate\"\n                                        type=\"number\"\n                                        min=\"0\"\n                                        max=\"100\"\n                                        formControlName=\"taxRate\"\n                                /></vdr-affixed-input>\n                            </vdr-form-field>\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\n                            /></vdr-form-field>\n                            <button\n                                class=\"btn btn-secondary\"\n                                [disabled]=\"\n                                    surchargeForm.invalid ||\n                                    surchargeForm.pristine ||\n                                    surchargeForm.get('price')?.value === 0\n                                \"\n                            >\n                                {{ 'order.add-surcharge' | translate }}\n                            </button>\n                        </form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]=\"shippingAddressForm\"\n                            [availableCountries]=\"availableCountries$ | async\"\n                            [customFields]=\"addressCustomFields\"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]=\"billingAddressForm\"\n                            [availableCountries]=\"availableCountries$ | async\"\n                            [customFields]=\"addressCustomFields\"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n            </clr-accordion>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    {{ 'order.modification-summary' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <ul>\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\n                            {{\n                                'order.modification-adding-items'\n                                    | translate: { count: modifyOrderInput.addItems?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\n                            {{\n                                'order.modification-adjusting-lines'\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\n                            {{\n                                'order.modification-adding-surcharges'\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"shippingAddressForm.dirty\">\n                            {{ 'order.modification-updating-shipping-address' | translate }}\n                        </li>\n                        <li *ngIf=\"billingAddressForm.dirty\">\n                            {{ 'order.modification-updating-billing-address' | translate }}\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"card-block\">\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\n                    <clr-checkbox-wrapper class=\"\">\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                </div>\n                <div class=\"card-footer\">\n                    <button\n                        class=\"btn btn-primary\"\n                        [disabled]=\"!canPreviewChanges()\"\n                        (click)=\"previewAndModify(order)\"\n                    >\n                        {{ 'order.preview-changes' | translate }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    AddItemInput,\n    AdjustOrderLineInput,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    ErrorResult,\n    GetAvailableCountries,\n    HistoryEntryType,\n    LanguageCode,\n    ModalService,\n    ModifyOrderInput,\n    NotificationService,\n    OrderAddressFragment,\n    OrderDetail,\n    ProductSelectorSearch,\n    ServerConfigService,\n    SortOrder,\n    SurchargeInput,\n    transformRelationCustomFieldInputs,\n} from '@vendure/admin-ui/core';\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';\nimport { concat, EMPTY, Observable, of, Subject } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    map,\n    mapTo,\n    shareReplay,\n    startWith,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport {\n    OrderEditResultType,\n    OrderEditsPreviewDialogComponent,\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\n\ninterface AddedLine {\n    productVariantId: string;\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\n    productVariantName: string;\n    sku: string;\n    priceWithTax: number;\n    price: number;\n    quantity: number;\n}\n\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\n    addItems: Array<AddItemInput & { customFields?: any }>;\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\n};\n\n@Component({\n    selector: 'vdr-order-editor',\n    templateUrl: './order-editor.component.html',\n    styleUrls: ['./order-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderEditorComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy\n{\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    addressCustomFields: CustomFieldConfig[];\n    detailForm = new FormGroup({});\n    couponCodesControl = new FormControl();\n    orderLineCustomFieldsFormArray: FormArray;\n    addItemCustomFieldsFormArray: FormArray;\n    addItemCustomFieldsForm: FormGroup;\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\n    orderLineCustomFields: CustomFieldConfig[];\n    modifyOrderInput: ModifyOrderData = {\n        dryRun: true,\n        orderId: '',\n        addItems: [],\n        adjustOrderLines: [],\n        surcharges: [],\n        note: '',\n        updateShippingAddress: {},\n        updateBillingAddress: {},\n    };\n    surchargeForm: FormGroup;\n    shippingAddressForm: FormGroup;\n    billingAddressForm: FormGroup;\n    note = '';\n    recalculateShipping = true;\n    previousState: string;\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    get addedLines(): AddedLine[] {\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\n            price.__typename === 'SinglePrice' ? price.value : 0;\n        return (this.modifyOrderInput.addItems || [])\n            .map(row => {\n                const variantInfo = this.addedVariants.get(row.productVariantId);\n                if (variantInfo) {\n                    return {\n                        ...variantInfo,\n                        price: getSinglePriceValue(variantInfo.price),\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\n                        quantity: row.quantity,\n                    };\n                }\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    ngOnInit(): void {\n        this.init();\n        this.dataService.promotion.getPromotions();\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\n            if (order.couponCodes.length) {\n                this.couponCodesControl.setValue(order.couponCodes);\n            }\n            this.surchargeForm = new FormGroup({\n                description: new FormControl('', Validators.required),\n                sku: new FormControl(''),\n                price: new FormControl(0, Validators.required),\n                priceIncludesTax: new FormControl(true),\n                taxRate: new FormControl(0),\n                taxDescription: new FormControl(''),\n            });\n            if (!this.shippingAddressForm) {\n                this.shippingAddressForm = new FormGroup({\n                    fullName: new FormControl(order.shippingAddress?.fullName),\n                    company: new FormControl(order.shippingAddress?.company),\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\n                    city: new FormControl(order.shippingAddress?.city),\n                    province: new FormControl(order.shippingAddress?.province),\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\n                });\n                this.addAddressCustomFieldsFormGroup(this.shippingAddressForm, order.shippingAddress);\n            }\n            if (!this.billingAddressForm) {\n                this.billingAddressForm = new FormGroup({\n                    fullName: new FormControl(order.billingAddress?.fullName),\n                    company: new FormControl(order.billingAddress?.company),\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\n                    city: new FormControl(order.billingAddress?.city),\n                    province: new FormControl(order.billingAddress?.province),\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\n                });\n                this.addAddressCustomFieldsFormGroup(this.billingAddressForm, order.billingAddress);\n            }\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\n            for (const line of order.lines) {\n                const formGroup = new FormGroup({});\n                for (const { name } of this.orderLineCustomFields) {\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\n                }\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\n                        l => l.orderLineId === line.id,\n                    );\n                    if (!modifyRow) {\n                        modifyRow = {\n                            orderLineId: line.id,\n                            quantity: line.quantity,\n                        };\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\n                    }\n                    if (this.orderLineCustomFields.length) {\n                        modifyRow.customFields = value;\n                    }\n                });\n                this.orderLineCustomFieldsFormArray.push(formGroup);\n            }\n        });\n\n        this.addItemCustomFieldsFormArray = new FormArray([]);\n        this.addItemCustomFieldsForm = new FormGroup({});\n        for (const customField of this.orderLineCustomFields) {\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\n        }\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items)\n            .pipe(shareReplay(1));\n        this.dataService.order\n            .getOrderHistory(this.id, {\n                take: 1,\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\n            })\n            .single$.subscribe(({ order }) => {\n                this.previousState = order?.history.items[0].data.from;\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    transitionToPriorState(order: OrderDetail.Fragment) {\n        this.orderTransitionService\n            .transitionToPreModifyingState(order.id, order.nextStates)\n            .subscribe(result => {\n                this.router.navigate(['..'], { relativeTo: this.route });\n            });\n    }\n\n    canPreviewChanges(): boolean {\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\n        return (\n            !!addItems?.length ||\n            !!surcharges?.length ||\n            !!adjustOrderLines?.length ||\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid) ||\n            this.couponCodesControl.dirty\n        );\n    }\n\n    isLineModified(line: OrderDetail.Lines): boolean {\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\n        );\n    }\n\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\n        const { adjustOrderLines } = this.modifyOrderInput;\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\n        if (row && +quantity === line.quantity) {\n            // Remove the modification if the quantity is the same as\n            // the original order\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\n        }\n        if (!row) {\n            row = { orderLineId: line.id, quantity: +quantity };\n            adjustOrderLines?.push(row);\n        }\n        row.quantity = +quantity;\n    }\n\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\n        if (row) {\n            row.quantity = +quantity;\n        }\n    }\n\n    trackByProductVariantId(index: number, item: AddedLine) {\n        return item.productVariantId;\n    }\n\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\n        switch (result?.priceWithTax.__typename) {\n            case 'SinglePrice':\n                return result.priceWithTax.value;\n            default:\n                return 0;\n        }\n    }\n\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\n        if (!result) {\n            return;\n        }\n        const customFields = this.orderLineCustomFields.length\n            ? this.addItemCustomFieldsForm.value\n            : undefined;\n        let row = this.modifyOrderInput.addItems?.find(l =>\n            this.isMatchingAddItemRow(l, result, customFields),\n        );\n        if (!row) {\n            row = { productVariantId: result.productVariantId, quantity: 1 };\n            if (customFields) {\n                row.customFields = customFields;\n            }\n            this.modifyOrderInput.addItems?.push(row);\n        } else {\n            row.quantity++;\n        }\n        if (customFields) {\n            const formGroup = new FormGroup({});\n            for (const [key, value] of Object.entries(customFields)) {\n                formGroup.addControl(key, new FormControl(value));\n            }\n            this.addItemCustomFieldsFormArray.push(formGroup);\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\n                if (row) {\n                    row.customFields = value;\n                }\n            });\n        }\n        this.addItemCustomFieldsForm.reset({});\n        this.addItemSelectedVariant = undefined;\n        this.addedVariants.set(result.productVariantId, result);\n    }\n\n    private isMatchingAddItemRow(\n        row: ModifyOrderData['addItems'][number],\n        result: ProductSelectorSearch.Items,\n        customFields: any,\n    ): boolean {\n        return (\n            row.productVariantId === result.productVariantId &&\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\n        );\n    }\n\n    removeAddedItem(index: number) {\n        this.modifyOrderInput.addItems.splice(index, 1);\n        if (-1 < index) {\n            this.addItemCustomFieldsFormArray.removeAt(index);\n        }\n    }\n\n    getSurchargePrices(surcharge: SurchargeInput) {\n        const priceWithTax = surcharge.priceIncludesTax\n            ? surcharge.price\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\n        const price = surcharge.priceIncludesTax\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\n            : surcharge.price;\n        return {\n            price,\n            priceWithTax,\n        };\n    }\n\n    addSurcharge(value: any) {\n        this.modifyOrderInput.surcharges?.push(value);\n        this.surchargeForm.reset({\n            price: 0,\n            priceIncludesTax: true,\n            taxRate: 0,\n        });\n    }\n\n    removeSurcharge(index: number) {\n        this.modifyOrderInput.surcharges?.splice(index, 1);\n    }\n\n    previewAndModify(order: OrderDetail.Fragment) {\n        const modifyOrderInput: ModifyOrderData = {\n            ...this.modifyOrderInput,\n            adjustOrderLines: this.modifyOrderInput.adjustOrderLines.map(line => {\n                return transformRelationCustomFieldInputs(simpleDeepClone(line), this.orderLineCustomFields);\n            }),\n        };\n        const input: ModifyOrderInput = {\n            ...modifyOrderInput,\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\n            ...(this.shippingAddressForm.dirty\n                ? { updateShippingAddress: this.shippingAddressForm.value }\n                : {}),\n            dryRun: true,\n            couponCodes: this.couponCodesControl.dirty ? this.couponCodesControl.value : undefined,\n            note: this.note ?? '',\n            options: {\n                recalculateShipping: this.recalculateShipping,\n            },\n        };\n        const originalTotalWithTax = order.totalWithTax;\n        this.dataService.order\n            .modifyOrder(input)\n            .pipe(\n                switchMap(({ modifyOrder }) => {\n                    switch (modifyOrder.__typename) {\n                        case 'Order':\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\n                                size: 'xl',\n                                closable: false,\n                                locals: {\n                                    originalTotalWithTax,\n                                    order: modifyOrder,\n                                    orderLineCustomFields: this.orderLineCustomFields,\n                                    modifyOrderInput: input,\n                                },\n                            });\n                        case 'InsufficientStockError':\n                        case 'NegativeQuantityError':\n                        case 'NoChangesSpecifiedError':\n                        case 'OrderLimitError':\n                        case 'OrderModificationStateError':\n                        case 'PaymentMethodMissingError':\n                        case 'RefundPaymentIdMissingError':\n                        case 'CouponCodeLimitError':\n                        case 'CouponCodeExpiredError':\n                        case 'CouponCodeInvalidError': {\n                            this.notificationService.error(modifyOrder.message);\n                            return of(false as const);\n                        }\n                        case null:\n                        case undefined:\n                            return of(false as const);\n                        default:\n                            assertNever(modifyOrder);\n                    }\n                }),\n                switchMap(result => {\n                    if (!result || result.result === OrderEditResultType.Cancel) {\n                        // re-fetch so that the preview values get overwritten in the cache.\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\n                    } else {\n                        // Do the modification\n                        const wetRunInput = {\n                            ...input,\n                            dryRun: false,\n                        };\n                        if (result.result === OrderEditResultType.Refund) {\n                            wetRunInput.refund = {\n                                paymentId: result.refundPaymentId,\n                                reason: result.refundNote,\n                            };\n                        }\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\n                            switchMap(({ modifyOrder }) => {\n                                if (modifyOrder.__typename === 'Order') {\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\n                                    const nextState =\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\n\n                                    return this.dataService.order\n                                        .transitionToState(order.id, nextState)\n                                        .pipe(mapTo(true));\n                                } else {\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\n                                    return EMPTY;\n                                }\n                            }),\n                        );\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.router.navigate(['../'], { relativeTo: this.route });\n                }\n            });\n    }\n\n    private addAddressCustomFieldsFormGroup(\n        parentFormGroup: FormGroup,\n        address?: OrderAddressFragment | null,\n    ) {\n        if (address && this.addressCustomFields.length) {\n            const addressCustomFieldsFormGroup = new FormGroup({});\n            for (const customFieldDef of this.addressCustomFields) {\n                const name = customFieldDef.name;\n                const value = (address as any).customFields?.[name];\n                addressCustomFieldsFormGroup.addControl(name, new FormControl(value));\n            }\n            parentFormGroup.addControl('customFields', addressCustomFieldsFormGroup);\n        }\n    }\n\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\n        /* not used */\n    }\n}\n","<audio src=\"assets/notification.mp3\" id=\"audio_player\"></audio>\n<clr-toggle-wrapper>\n    <input\n        id=\"audioToggle\"\n        type=\"checkbox\"\n        (change)=\"toggleAudio()\"\n        [checked]=\"audioOn\"\n        clrToggle\n        name=\"enabled\"\n    />\n    <label class=\"visible-toggle\"> <span>Play Notification Sound</span></label></clr-toggle-wrapper\n>\n<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"search-form\">\n            <div\n                class=\"filter-presets btn-group btn-outline-primary\"\n                *ngIf=\"activePreset$ | async as activePreset\"\n            >\n                <button\n                    class=\"btn\"\n                    *ngFor=\"let preset of filterPresets\"\n                    [class.btn-primary]=\"activePreset === preset.name\"\n                    (click)=\"selectFilterPreset(preset.name)\"\n                >\n                    {{ preset.label | translate }}\n                </button>\n                <button\n                    class=\"btn\"\n                    [class.btn-primary]=\"activePreset === 'custom'\"\n                    (click)=\"selectFilterPreset('custom')\"\n                >\n                    {{ 'order.filter-custom' | translate }}\n                    <clr-icon shape=\"angle down\"></clr-icon>\n                </button>\n            </div>\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"searchControl\"\n                [placeholder]=\"'order.search-by-order-filters' | translate\"\n                class=\"search-input\"\n            />\n        </div>\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\n            <form [formGroup]=\"customFilterForm\">\n                <div class=\"flex align-center\">\n                    <ng-select\n                        [items]=\"orderStates\"\n                        appendTo=\"body\"\n                        [addTag]=\"false\"\n                        [multiple]=\"true\"\n                        formControlName=\"states\"\n                        [placeholder]=\"'state.all-orders' | translate\"\n                        [clearable]=\"true\"\n                        [searchable]=\"false\"\n                    >\n                        <ng-template ng-option-tmp let-item=\"item\">{{\n                            item | stateI18nToken | translate\n                        }}</ng-template>\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\"\n                                >×</span\n                            >\n                        </ng-template>\n                    </ng-select>\n                    <button\n                        class=\"btn btn-secondary\"\n                        [disabled]=\"customFilterForm.pristine\"\n                        (click)=\"applyCustomFilters()\"\n                    >\n                        {{ 'order.apply-filters' | translate }}\n                        <clr-icon shape=\"filter\"></clr-icon>\n                    </button>\n                </div>\n                <div class=\"flex\">\n                    <div>\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\n                    </div>\n                    <div>\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\n        <ng-container *ngIf=\"canCreateDraftOrder\">\n            <a\n                class=\"btn btn-primary mt1\"\n                *vdrIfPermissions=\"['CreateOrder']\"\n                [routerLink]=\"['./draft/create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-draft-order' | translate }}\n            </a>\n        </ng-container>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [customRowHeight]=\"5\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.time-left' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-order=\"item\">\n        <td class=\"left align-middle\">\n            <vdr-order-label [order]=\"order\"></vdr-order-label>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </td>\n        <td class=\"left align-middle\">{{ order.totalWithTax | localeCurrency: order.currencyCode }}</td>\n        <td class=\"left align-middle\">\n            {{ formatTime(order.orderPlacedAt) }}<br />{{ formatDate(order.orderPlacedAt) }}\n        </td>\n        <td class=\"left align-middle\" style=\"font-size: 16px\">\n            <vdr-cd-timer\n                [autoStart]\n                [scheduledTime]=\"order.customFields.scheduledTime\"\n                [processingTime]=\"processingTime\"\n                [placedTime]=\"order.orderPlacedAt\"\n                format=\"ms\"\n                maxTimeUnit=\"hour\"\n            ></vdr-cd-timer>\n        </td>\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                [large]=\"true\"\n                *ngIf=\"order.nextStates.length > 0\"\n                iconShape=\"step-forward-2\"\n                [label]=\"getNextState(order, true)\"\n                (click)=\"toNextState(order)\"\n            ></vdr-table-row-action>\n            <!-- <vdr-table-row-action\n                iconShape=\"shopping-cart\"\n                [label]=\"'common.open' | translate\"\n                [linkTo]=\"\n                    order.state === 'Modifying'\n                        ? ['./', order.id, 'modify']\n                        : order.state === 'Draft'\n                        ? ['./draft', order.id]\n                        : ['./', order.id]\n                \"\n            ></vdr-table-row-action> -->\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetOrderList,\n    LocalStorageService,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    OrderDataService,\n    OrderItem,\n    OrderListOptions,\n    ServerConfigService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { Order } from '@vendure/common/lib/generated-types';\nimport dayjs from 'dayjs';\nimport { EMPTY, merge, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    filter,\n    map,\n    pairwise,\n    startWith,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\ninterface OrderFilterConfig {\n    active?: boolean;\n    states?: string[];\n}\n\ninterface FilterPreset {\n    name: string;\n    label: string;\n    config: OrderFilterConfig;\n}\n\n@Component({\n    selector: 'vdr-order-list',\n    templateUrl: './order-list.component.html',\n    styleUrls: ['./order-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderListComponent\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\n    implements OnInit, OnDestroy\n{\n    itemList: GetOrderList.Items[] = [];\n    audioElem: HTMLAudioElement;\n    refreshInterval: any;\n    processingTime: number;\n    audioOn = false;\n    searchControl = new FormControl('');\n    searchOrderCodeControl = new FormControl('');\n    searchLastNameControl = new FormControl('');\n    customFilterForm: FormGroup;\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\n    filterPresets: FilterPreset[] = [\n        {\n            name: 'open', // have this show everything\n            label: _('order.filter-preset-open'),\n            config: {\n                active: false,\n                states: this.orderStates.filter(s => s !== 'Completed' && s !== 'Cancelled' && s !== 'Draft'),\n            },\n        },\n\n        {\n            name: 'completed',\n            label: _('order.filter-preset-completed'),\n            config: {\n                states: ['Completed', 'Cancelled'],\n            },\n        },\n        {\n            name: 'active',\n            label: _('order.filter-preset-active'),\n            config: {\n                active: true,\n            },\n        },\n        {\n            name: 'draft',\n            label: _('order.filter-preset-draft'),\n            config: {\n                active: false,\n                states: ['Draft'],\n            },\n        },\n    ];\n    activePreset$: Observable<string>;\n    canCreateDraftOrder = false;\n\n    constructor(\n        private serverConfigService: ServerConfigService,\n        private dataService: DataService,\n        private localStorageService: LocalStorageService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            // tslint:disable-next-line:no-shadowed-variable\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\n            data => data.orders,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) =>\n                this.createQueryOptions(\n                    skip,\n                    take,\n                    this.searchControl.value,\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\n                ),\n        );\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\n        if (lastFilters) {\n            this.setQueryParam(lastFilters, { replaceUrl: true });\n        }\n        this.canCreateDraftOrder = !!this.serverConfigService\n            .getOrderProcessStates()\n            .find(state => state.name === 'Created')\n            ?.to.includes('Draft');\n        if (!this.canCreateDraftOrder) {\n            this.filterPresets = this.filterPresets.filter(p => p.name !== 'draft');\n        }\n    }\n\n    async ngOnInit() {\n        super.ngOnInit();\n        this.activePreset$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('filter') || 'open'),\n            distinctUntilChanged(),\n        );\n        this.dataService.settings.getActiveChannel().single$.subscribe(channel => {\n            this.processingTime = (channel.activeChannel as any)['customFields']['processingTime'];\n        });\n        const searchTerms$ = merge(this.searchControl.valueChanges).pipe(\n            filter(value => 2 < value.length || value.length === 0),\n            debounceTime(250),\n        );\n        merge(searchTerms$, this.route.queryParamMap)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(val => {\n                this.refresh();\n            });\n\n        const queryParamMap = this.route.snapshot.queryParamMap;\n        this.customFilterForm = new FormGroup({\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\n        });\n        this.setItemsPerPage(50); // default to 50\n        this.refreshInterval = setInterval(() => {\n            // const currentList = await this.items$.toPromise();\n            this.refresh();\n            // const newList = await this.items$.toPromise();\n            // console.log(newList.length, currentList.length);\n        }, 15000);\n\n        this.audioElem = document.getElementById('audio_player') as HTMLAudioElement;\n        this.audioElem.muted = true;\n        this.audioElem.addEventListener(\n            'play',\n            () => {\n                this.audioOn = true;\n                this.audioElem!.addEventListener('ended', () => {\n                    this.audioOn = true;\n                    this.audioElem!.muted = false;\n                });\n            },\n            { once: true },\n        );\n\n        this.audioElem.play().then(() => {\n            this.audioOn = true;\n        });\n        this.items$.subscribe(value => {\n            if (this.itemList.length !== 0 && this.itemList.length < value.length) {\n                this.playAudio();\n            }\n            this.itemList = value;\n            // console.log(previousValue?.length, currentValue?.length);\n            /** Do something */\n        });\n        // await this.refreshInterval();\n    }\n    toggleAudio() {\n        if (!this.audioOn) {\n            this.audioElem.play();\n        } else {\n            this.audioOn = !this.audioOn;\n            this.audioElem!.muted = !this.audioOn;\n        }\n    }\n    playAudio() {\n        this.audioElem?.play();\n    }\n    formatTime(date: Date) {\n        return dayjs(date).format('hh:mm A');\n    }\n    formatDate(date: Date) {\n        return dayjs(date).format('DD/MMM');\n    }\n\n    getNextState(order: Order, buttonText: boolean = false) {\n        const authorizedCashPayment = order.payments?.filter(\n            p => p.state === 'Authorized' && p.method === 'cash',\n        )[0];\n        if (order.state === 'PaymentSettled' || order.state === 'PaymentAuthorized') {\n            return 'Processing';\n        }\n        if (order.state === 'Processing') {\n            return buttonText ? 'Ready For Pickup' : 'ReadyForPickup';\n        }\n        if (order.state === 'ReadyForPickup') {\n            if (order.shippingLines[0].shippingMethod.code === 'delivery') {\n                return 'Delivering';\n            }\n            if (authorizedCashPayment) {\n                return buttonText ? 'Collect Cash' : 'Completed';\n            } else {\n                return 'Completed';\n            }\n        }\n        if (order.state === 'Delivering') {\n            if (authorizedCashPayment) {\n                return buttonText ? 'Collect Cash' : 'Completed';\n            } else {\n                return 'Completed';\n            }\n        }\n\n        return 'Processing';\n    }\n\n    toNextState(order: Order) {\n        return this.modalService\n            .dialog({\n                title: `Proceed to ${this.getNextState(order, true)}?`,\n                body: `Are you sure you want to proceed to '${this.getNextState(order, true)}'?`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'primary', label: 'Confirm', returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(async res => {\n                    if (res) {\n                        if (this.getNextState(order) === 'Completed') {\n                            const authorizedCashPayment = order.payments?.filter(\n                                p => p.state === 'Authorized' && p.method === 'cash',\n                            )[0];\n                            if (authorizedCashPayment) {\n                                const output = await this.dataService.order\n                                    .settlePayment(authorizedCashPayment?.id.toString())\n                                    .toPromise();\n                            }\n                        }\n                        await this.dataService.order\n                            .transitionToState(order.id.toString(), this.getNextState(order))\n                            .toPromise();\n                        return true;\n                    }\n                    return EMPTY;\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success('Successfully Updated Order State');\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error('Error Updating Order State');\n                },\n            );\n    }\n\n    selectFilterPreset(presetName: string) {\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\n        this.setQueryParam(\n            {\n                filter: presetName,\n                page: 1,\n                ...filters,\n            },\n            { replaceUrl: true },\n        );\n    }\n\n    applyCustomFilters() {\n        const formValue = this.customFilterForm.value;\n        const customFilters = {\n            states: formValue.states,\n            placedAtStart: formValue.placedAtStart,\n            placedAtEnd: formValue.placedAtEnd,\n        };\n        this.setQueryParam({\n            filter: 'custom',\n            ...customFilters,\n        });\n        this.customFilterForm.markAsPristine();\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\n    }\n\n    private createQueryOptions(\n        // tslint:disable-next-line:no-shadowed-variable\n        skip: number,\n        take: number,\n        searchTerm: string,\n        activeFilterPreset?: string,\n    ): { options: OrderListOptions } {\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\n        // tslint:disable-next-line:no-shadowed-variable\n        let filter: any = {};\n        let filterOperator: LogicalOperator = LogicalOperator.AND;\n        if (filterConfig) {\n            if (filterConfig.config.active != null) {\n                filter.active = {\n                    eq: filterConfig.config.active,\n                };\n            }\n            if (filterConfig.config.states) {\n                filter.state = {\n                    in: filterConfig.config.states,\n                };\n            }\n        } else if (activeFilterPreset === 'custom') {\n            const queryParams = this.route.snapshot.queryParamMap;\n            const states = queryParams.getAll('states') ?? [];\n            const placedAtStart = queryParams.get('placedAtStart');\n            const placedAtEnd = queryParams.get('placedAtEnd');\n            if (states.length) {\n                filter.state = {\n                    in: states,\n                };\n            }\n            if (placedAtStart && placedAtEnd) {\n                filter.orderPlacedAt = {\n                    between: {\n                        start: placedAtStart,\n                        end: placedAtEnd,\n                    },\n                };\n            } else if (placedAtStart) {\n                filter.orderPlacedAt = {\n                    after: placedAtStart,\n                };\n            } else if (placedAtEnd) {\n                filter.orderPlacedAt = {\n                    before: placedAtEnd,\n                };\n            }\n        }\n        if (searchTerm) {\n            filter = {\n                customerLastName: {\n                    contains: searchTerm,\n                },\n                transactionId: {\n                    contains: searchTerm,\n                },\n                code: {\n                    contains: searchTerm,\n                },\n            };\n            filterOperator = LogicalOperator.OR;\n        }\n        return {\n            options: {\n                skip,\n                take,\n                filter: {\n                    ...(filter ?? {}),\n                },\n                sort: {\n                    updatedAt: SortOrder.DESC,\n                },\n                filterOperator,\n            },\n        };\n    }\n\n    getShippingNames(order: Order) {\n        if (order.shippingLines.length) {\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\n        } else {\n            return '';\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    ActivationStart,\n    Resolve,\n    Router,\n    RouterStateSnapshot,\n} from '@angular/router';\nimport { DataService, OrderDetailFragment } from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { DraftOrderDetailComponent } from '../../components/draft-order-detail/draft-order-detail.component';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderResolver implements Resolve<Observable<OrderDetailFragment>> {\n    constructor(private router: Router, private dataService: DataService) {}\n\n    /** @internal */\n    resolve(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot,\n    ): Observable<Observable<OrderDetailFragment>> {\n        const id = route.paramMap.get('id');\n\n        // Complete the entity stream upon navigating away\n        const navigateAway$ = this.router.events.pipe(filter(event => event instanceof ActivationStart));\n\n        const stream = this.dataService.order\n            .getOrder(id!)\n            .mapStream(data => data.order)\n            .pipe(\n                switchMap(order => {\n                    if (order?.state === 'Draft' && route.component !== DraftOrderDetailComponent) {\n                        // Make sure Draft orders only get displayed with the DraftOrderDetailComponent\n                        this.router.navigate(['/orders/draft', id]);\n                        return EMPTY;\n                    } else {\n                        return [order];\n                    }\n                }),\n                takeUntil(navigateAway$),\n                filter(notNullOrUndefined),\n                shareReplay(1),\n            );\n\n        return stream.pipe(\n            take(1),\n            map(() => stream),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, mergeMapTo, tap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderGuard implements CanActivate {\n    constructor(private dataService: DataService, private router: Router) {}\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot,\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        const isDraft = state.url.includes('orders/draft');\n        const id = route.paramMap.get('id');\n        if (isDraft) {\n            if (id === 'create') {\n                return this.dataService.order\n                    .createDraftOrder()\n                    .pipe(\n                        map(({ createDraftOrder }) =>\n                            this.router.parseUrl(`/orders/draft/${createDraftOrder.id}`),\n                        ),\n                    );\n            } else {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BreadcrumbLabelLinkPair,\n    CanDeactivateDetailGuard,\n    detailBreadcrumb,\n    OrderDetail,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { DraftOrderDetailComponent } from './components/draft-order-detail/draft-order-detail.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderResolver } from './providers/routing/order-resolver';\nimport { OrderGuard } from './providers/routing/order.guard';\n\nexport const orderRoutes: Route[] = [\n    {\n        path: '',\n        component: OrderListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.orders'),\n        },\n    },\n    {\n        path: 'draft/:id',\n        component: DraftOrderDetailComponent,\n        resolve: {\n            entity: OrderResolver,\n        },\n        canActivate: [OrderGuard],\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: orderBreadcrumb,\n        },\n    },\n    {\n        path: ':id',\n        component: OrderDetailComponent,\n        resolve: {\n            entity: OrderResolver,\n        },\n        canActivate: [OrderGuard],\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: orderBreadcrumb,\n        },\n    },\n    {\n        path: ':id/modify',\n        component: OrderEditorComponent,\n        resolve: {\n            entity: OrderResolver,\n        },\n        // canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: modifyingOrderBreadcrumb,\n        },\n    },\n];\n\nexport function orderBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<OrderDetail.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.orders',\n        getName: order => order.code,\n        route: '',\n    });\n}\n\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\n    return orderBreadcrumb(data, params).pipe(\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\n            const modifiedBreadcrumbs = breadcrumbs.slice();\n            modifiedBreadcrumbs[0].link[0] = '../';\n            modifiedBreadcrumbs[1].link[0] = '../orders';\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\n        }) as any,\n    );\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\nimport { DraftOrderDetailComponent } from './components/draft-order-detail/draft-order-detail.component';\nimport { DraftOrderVariantSelectorComponent } from './components/draft-order-variant-selector/draft-order-variant-selector.component';\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\nimport { OrderTableComponent } from './components/order-table/order-table.component';\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\nimport { SelectCustomerDialogComponent } from './components/select-customer-dialog/select-customer-dialog.component';\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\nimport { orderRoutes } from './order.routes';\nimport { SelectAddressDialogComponent } from './components/select-address-dialog/select-address-dialog.component';\nimport { CouponCodeSelectorComponent } from './components/coupon-code-selector/coupon-code-selector.component';\nimport { SelectShippingMethodDialogComponent } from './components/select-shipping-method-dialog/select-shipping-method-dialog.component';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\n    declarations: [\n        OrderListComponent,\n        OrderDetailComponent,\n        FulfillOrderDialogComponent,\n        LineFulfillmentComponent,\n        RefundOrderDialogComponent,\n        CancelOrderDialogComponent,\n        PaymentStateLabelComponent,\n        LineRefundsComponent,\n        OrderPaymentCardComponent,\n        RefundStateLabelComponent,\n        SettleRefundDialogComponent,\n        OrderHistoryComponent,\n        FulfillmentDetailComponent,\n        PaymentDetailComponent,\n        SimpleItemListComponent,\n        OrderCustomFieldsCardComponent,\n        OrderProcessGraphComponent,\n        OrderProcessNodeComponent,\n        OrderProcessEdgeComponent,\n        OrderProcessGraphDialogComponent,\n        FulfillmentStateLabelComponent,\n        FulfillmentCardComponent,\n        OrderEditorComponent,\n        OrderTableComponent,\n        OrderEditsPreviewDialogComponent,\n        ModificationDetailComponent,\n        AddManualPaymentDialogComponent,\n        OrderStateSelectDialogComponent,\n        DraftOrderDetailComponent,\n        DraftOrderVariantSelectorComponent,\n        SelectCustomerDialogComponent,\n        SelectAddressDialogComponent,\n        CouponCodeSelectorComponent,\n        SelectShippingMethodDialogComponent,\n    ],\n})\nexport class OrderModule {}\n"]}
{"version":3,"mappings":"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","names":["Y","constructor","n","e","selectors","$","j","this","selectedMemberIds","indexOf","id","filteredMembers","filterTerm","toLocaleLowerCase","members","filter","t","name","includes","code","areAllSelected","length","toggleSelectAll","selectionChange","emit","map","toggleSelectMember","item","re","ngOnInit","currentMembers","availableCountries$","dataService","settings","getCountries","mapStream","countries","items","pipe","L","i","cancel","resolveWith","add","z","buildGrid","setPermission","readonly","permissionChange","permission","value","toggleAll","some","activePermissions","_step","Map","r","permissionDefinitions","l","_step2","test","h","match","f","get","push","set","assignable","gridData","label","description","permissions","Array","from","entries","_ref3","d","extractCrudDescription","replace","ae","super","customFields","getCustomFieldConfig","detailForm","formBuilder","group","emailAddress","a","firstName","lastName","password","roles","reduce","y","Object","getAvailableChannels","values","selectedRolePermissions","init","administrator$","entity$","allRoles$","administrator","getRoles","se","client","userStatus","single$","subscribe","s","disable","serverConfigService","getPermissionDefinitions","ngOnDestroy","destroy","rolesChanged","buildPermissionsMap","getPermissionsForSelectedChannel","_ref8","selectedChannelId","channelId","create","roleIds","createAdministrator","notificationService","success","c","entity","markAsPristine","changeDetector","markForCheck","router","navigate","relativeTo","route","error","save","F","T","updateAdministrator","setFormValues","patchValue","user","setCustomFieldFormValues","setValidators","_step3","_iterator3","channels","_step5","Set","forEach","_loop","keys","_i2","_step4","_iterator4","has","channelCode","le","getAdministrators","administrators","deleteAdministrator","modalService","dialog","title","body","buttons","type","returnValue","b","q","refresh","ce","token","pricesIncludeTax","currencyCode","defaultShippingZoneId","defaultLanguageCode","defaultTaxZoneId","zones$","getZones","mapSingle","zones","availableLanguageCodes$","getAvailableLanguages","saveButtonEnabled","dirty","valid","createChannel","_ref10","auth","currentUser","me","_ref11","_ref12","updateUserChannels","__typename","message","updateChannel","generateToken","defaultShippingZone","defaultTaxZone","Math","random","toString","substr","concat","de","Je","channels$","refresh$","Ye","getChannels","isDefaultChannel","deleteChannel","next","enabled","country$","w","languageCode$","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","createCountry","updateCountry","ue","contentLanguage$","uiState","contentLanguage","searchTerm","valueChanges","Se","countriesWithZones$","_ref22","find","availableLanguages$","destroy$","complete","setLanguage","setContentLanguage","deleteCountry","result","isZone","hasOwnProperty","clear","call","pe","availableLanguages","trackInventory","outOfStockThreshold","updateGlobalSettings","refreshGlobalSettings","ln","globalSettings","ge","checker","handler","getPaymentMethodOperations","checkers","paymentMethodEligibilityCheckers","handlers","paymentMethodHandlers","selectedCheckerDefinition","selectedHandlerDefinition","updateCode","pristine","setValue","Ie","configArgsIsPopulated","controls","selectChecker","selectedChecker","clearValidators","updateValueAndValidity","onlySelf","markAsDirty","selectHandler","selectedHandler","removeChecker","removeHandler","createPaymentMethod","updatePaymentMethod","args","_e","getPaymentMethods","refetchOnChannelChange","paymentMethods","deletePaymentMethod","showModalAndDelete","he","updateActiveAdministrator","fe","channelIds","role$","kn","createRole","updateRole","detectChanges","Ze","visibleRoles$","items$","toggleDisplayLimit","displayLimit","initialLimit","isDefaultRole","deleteRole","be","E","lines","unitPriceWithTax","quantity","loadFromLocalStorage","orderLinesChange","getActiveChannel","activeChannel","selectResult","addToLines","productVariantId","productVariantName","preview","productAsset","sku","priceWithTax","persistToLocalStorage","updateQuantity","removeLine","localStorageService","setForCurrentLocation","getForCurrentLocation","H","getAvailableCountries","city","countryCode","postalCode","province","addressChange","form","subscription","unsubscribe","ve","Ce","fulfillmentHandler","calculator","shippingMethod","getShippingMethodOperations","shippingEligibilityCheckers","calculators","shippingCalculators","fulfillmentHandlers","selectedCalculatorDefinition","activeChannel$","testResult$","fetchTestResult$","selectedCalculator","Ge","shippingAddress","streetLine1","testShippingMethod","eo","to","testDataUpdated","selectCalculator","getUpdatedShippingMethod","createShippingMethod","updateShippingMethod","console","setTestOrderLines","testOrderLines","setTestAddress","testAddress","allTestDataPresent","runTest","fulfillmentHandlerCode","ye","getShippingMethods","shippingMethods","testEligibleShippingMethods","deleteShippingMethod","xe","isDefault","taxCategory$","createTaxCategory","updateTaxCategory","Te","queryResult","getTaxCategories","taxCategories$","taxCategories","deleteTaxCategory","ref","refetch","Ae","taxCategoryId","zoneId","customerGroupId","categoryId","createTaxRate","updateTaxRate","category","zone","customerGroup","Le","getTaxRates","taxRates","deleteTaxRate","G","getCustomFieldsFor","_step6","_iterator6","Fe","data","paramMap","ui","activeZone$","fromComponent","locals","createZone","memberIds","delete","deleteZone","errorMessage","update","updateZone","closeMembers","snapshot","params","contents","queryParamsHandling","addToZone","zoneName","size","addMembersToZone","pi","countryCount","removeFromZone","removeMembersFromZone","V","createdAt","updatedAt","getAdministrator","factory","ɵfac","B","getChannel","channel","K","translations","getCountry","country","W","getGlobalSettings","X","getPaymentMethod","paymentMethod","ee","getActiveAdministrator","activeAdministrator","te","getRole","role","ne","getShippingMethod","oe","getTaxCategory","taxCategory","ie","getTaxRate","taxRate","Ke","path","component","resolve","canDeactivate","breadcrumb","We","Xe","et","tt","nt","ot","it","rt","o","breadcrumbKey","getName","qe","g"],"sources":["webpack:///src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.html","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.html","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.html","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.ts","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.html","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.ts","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.html","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.ts","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.html","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.ts","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.html","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.ts","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.html","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.ts","webpack:///src/lib/settings/src/components/country-list/country-list.component.html","webpack:///src/lib/settings/src/components/country-list/country-list.component.ts","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.html","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.ts","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.html","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.html","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","webpack:///src/lib/settings/src/components/profile/profile.component.html","webpack:///src/lib/settings/src/components/profile/profile.component.ts","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.html","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.ts","webpack:///src/lib/settings/src/components/role-list/role-list.component.html","webpack:///src/lib/settings/src/components/role-list/role-list.component.ts","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.html","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.html","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.ts","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.html","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.html","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.html","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.html","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.html","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.html","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.html","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.html","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.ts","webpack:///src/lib/settings/src/providers/routing/administrator-resolver.ts","webpack:///src/lib/settings/src/providers/routing/channel-resolver.ts","webpack:///src/lib/settings/src/providers/routing/country-resolver.ts","webpack:///src/lib/settings/src/providers/routing/global-settings-resolver.ts","webpack:///src/lib/settings/src/providers/routing/payment-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/profile-resolver.ts","webpack:///src/lib/settings/src/providers/routing/role-resolver.ts","webpack:///src/lib/settings/src/providers/routing/shipping-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-category-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-rate-resolver.ts","webpack:///src/lib/settings/src/settings.routes.ts","webpack:///src/lib/settings/src/settings.module.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[vdrZoneMemberControls]',\n})\nexport class ZoneMemberControlsDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[vdrZoneMemberListHeader]',\n})\nexport class ZoneMemberListHeaderDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","<div class=\"members-header\">\n    <ng-container *ngIf=\"headerTemplate\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate.templateRef\"></ng-container>\n    </ng-container>\n    <input\n        type=\"text\"\n        [placeholder]=\"'settings.filter-by-member-name' | translate\"\n        [(ngModel)]=\"filterTerm\"\n    />\n</div>\n<vdr-data-table\n    [items]=\"filteredMembers()\"\n    [allSelected]=\"areAllSelected()\"\n    [isRowSelectedFn]=\"(['UpdateSettings', 'UpdateZone'] | hasPermission) && isMemberSelected\"\n    (rowSelectChange)=\"toggleSelectMember($event)\"\n    (allSelectChange)=\"toggleSelectAll()\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-member=\"item\">\n        <td class=\"left align-middle\">{{ member.code }}</td>\n        <td class=\"left align-middle\">{{ member.name }}</td>\n        <td class=\"left align-middle\">\n            <clr-icon\n                [class.is-success]=\"member.enabled\"\n                [attr.shape]=\"member.enabled ? 'check' : 'times'\"\n            ></clr-icon>\n        </td>\n        <td class=\"right align-middle\">\n            <ng-container *ngIf=\"controlsTemplate\">\n                <ng-container\n                    *ngTemplateOutlet=\"controlsTemplate.templateRef; context: { member: member }\"\n                ></ng-container>\n            </ng-container>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\nimport { GetZones } from '@vendure/admin-ui/core';\n\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\n\nexport type ZoneMember = { id: string; name: string; code: string };\n\n@Component({\n    selector: 'vdr-zone-member-list',\n    templateUrl: './zone-member-list.component.html',\n    styleUrls: ['./zone-member-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneMemberListComponent {\n    @Input() members: ZoneMember[] = [];\n    @Input() selectedMemberIds: string[] = [];\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\n    filterTerm = '';\n\n    filteredMembers(): ZoneMember[] {\n        if (this.filterTerm !== '') {\n            const term = this.filterTerm.toLocaleLowerCase();\n            return this.members.filter(\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\n            );\n        } else {\n            return this.members;\n        }\n    }\n\n    areAllSelected(): boolean {\n        if (this.members) {\n            return this.selectedMemberIds.length === this.members.length;\n        } else {\n            return false;\n        }\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectionChange.emit([]);\n        } else {\n            this.selectionChange.emit(this.members.map(v => v.id));\n        }\n    }\n\n    toggleSelectMember({ item: member }: { item: ZoneMember }) {\n        if (this.selectedMemberIds.includes(member.id)) {\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\n        } else {\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\n        }\n    }\n\n    isMemberSelected = (member: ZoneMember): boolean => {\n        return -1 < this.selectedMemberIds.indexOf(member.id);\n    };\n}\n","<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\n\n<vdr-zone-member-list\n    [members]=\"availableCountries$ | async\"\n    [selectedMemberIds]=\"selectedMemberIds\"\n    (selectionChange)=\"selectedMemberIds = $event\"\n>\n</vdr-zone-member-list>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-add-country-to-zone-dialog',\n    templateUrl: './add-country-to-zone-dialog.component.html',\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    zoneName: string;\n    currentMembers: GetZones.Members[] = [];\n    availableCountries$: Observable<GetCountryList.Items[]>;\n    selectedMemberIds: string[] = [];\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        const currentMemberIds = this.currentMembers.map(m => m.id);\n        this.availableCountries$ = this.dataService.settings\n            .getCountries(999)\n            .mapStream(data => data.countries.items)\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedMemberIds);\n    }\n}\n","<table class=\"table\">\n    <tbody>\n        <tr *ngFor=\"let section of gridData\">\n            <td class=\"permission-group left\">\n                <div><strong>{{ section.label | translate }}</strong></div>\n                <small>{{ section.description | translate }}</small><br>\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"btn btn-sm btn-link\" (click)=\"toggleAll(section.permissions)\">\n                    {{ 'common.toggle-all' | translate }}\n                </button>\n            </td>\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\n                <vdr-select-toggle\n                    size=\"small\"\n                    [title]=\"permission.description\"\n                    [label]=\"permission.name\"\n                    [disabled]=\"readonly\"\n                    [selected]=\"activePermissions?.includes(permission.name)\"\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\n                ></vdr-select-toggle>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\n        <input\n            id=\"emailAddress\"\n            type=\"text\"\n            formControlName=\"emailAddress\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n        <input\n            id=\"firstName\"\n            type=\"text\"\n            formControlName=\"firstName\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n        <input\n            id=\"lastName\"\n            type=\"text\"\n            formControlName=\"lastName\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n    <vdr-form-field\n        *ngIf=\"!(isNew$ | async) && ('UpdateAdministrator' | hasPermission)\"\n        [label]=\"'settings.password' | translate\"\n        for=\"password\"\n        [readOnlyToggle]=\"true\"\n    >\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"Administrator\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"administrator-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n    <label class=\"clr-control-label\">{{ 'settings.roles' | translate }}</label>\n    <ng-select\n        [items]=\"allRoles$ | async\"\n        [multiple]=\"true\"\n        [hideSelected]=\"true\"\n        formControlName=\"roles\"\n        (change)=\"rolesChanged($event)\"\n        bindLabel=\"description\"\n    ></ng-select>\n\n    <ul class=\"nav\" role=\"tablist\">\n        <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\n            <button\n                [id]=\"channel.channelId\"\n                (click)=\"selectedChannelId = channel.channelId\"\n                class=\"btn btn-link nav-link\"\n                [class.active]=\"selectedChannelId === channel.channelId\"\n                [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\n                type=\"button\"\n            >\n                {{ channel.channelCode | channelCodeToLabel | translate }}\n            </button>\n        </li>\n    </ul>\n    <vdr-permission-grid\n        [activePermissions]=\"getPermissionsForSelectedChannel()\"\n        [permissionDefinitions]=\"permissionDefinitions\"\n        [readonly]=\"true\"\n    ></vdr-permission-grid>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\nimport {\n    Administrator,\n    CreateAdministratorInput,\n    GetAdministrator,\n    LanguageCode,\n    Permission,\n    Role,\n    RoleFragment,\n    UpdateAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nexport interface PermissionsByChannel {\n    channelId: string;\n    channelCode: string;\n    permissions: { [K in Permission]: boolean };\n}\n\n@Component({\n    selector: 'vdr-admin-detail',\n    templateUrl: './admin-detail.component.html',\n    styleUrls: ['./admin-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminDetailComponent\n    extends BaseDetailComponent<GetAdministrator.Administrator>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    administrator$: Observable<GetAdministrator.Administrator>;\n    permissionDefinitions: PermissionDefinition[];\n    allRoles$: Observable<Role.Fragment[]>;\n    selectedRoles: Role.Fragment[] = [];\n    detailForm: FormGroup;\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\n    selectedChannelId: string | null = null;\n\n    getAvailableChannels(): PermissionsByChannel[] {\n        return Object.values(this.selectedRolePermissions);\n    }\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            roles: [[]],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.administrator$ = this.entity$;\n        this.allRoles$ = this.dataService.administrator\n            .getRoles(999)\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\n                const rolesSelect = this.detailForm.get('roles');\n                if (rolesSelect) {\n                    rolesSelect.disable();\n                }\n            }\n        });\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    rolesChanged(roles: Role[]) {\n        this.buildPermissionsMap();\n    }\n\n    getPermissionsForSelectedChannel(): string[] {\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\n            return Object.entries(input)\n                .filter(([permission, active]) => active)\n                .map(([permission, active]) => permission);\n        }\n        if (this.selectedChannelId) {\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\n            if (selectedChannel) {\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\n                return getActivePermissions(permissionMap);\n            }\n        }\n        const channels = Object.values(this.selectedRolePermissions);\n        if (0 < channels.length) {\n            this.selectedChannelId = channels[0].channelId;\n            return getActivePermissions(channels[0].permissions);\n        }\n        return [];\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const administrator: CreateAdministratorInput = {\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            password: formValue.password,\n            customFields: formValue.customFields,\n            roleIds: formValue.roles.map(role => role.id),\n        };\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Administrator',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Administrator',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.administrator$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateAdministratorInput = {\n                        id,\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                        roleIds: formValue.roles.map(role => role.id),\n                    };\n                    return this.dataService.administrator.updateAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n            roles: administrator.user.roles,\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['customFields']),\n                administrator,\n            );\n        }\n        const passwordControl = this.detailForm.get('password');\n        if (passwordControl) {\n            if (!administrator.id) {\n                passwordControl.setValidators([Validators.required]);\n            } else {\n                passwordControl.setValidators([]);\n            }\n        }\n        this.buildPermissionsMap();\n    }\n\n    private buildPermissionsMap() {\n        const permissionsControl = this.detailForm.get('roles');\n        if (permissionsControl) {\n            const roles: RoleFragment[] = permissionsControl.value;\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\n            const channelIdCodeMap = new Map<string, string>();\n\n            for (const role of roles) {\n                for (const channel of role.channels) {\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\n                    const permissionSet = channelPermissions || new Set<Permission>();\n\n                    role.permissions.forEach(p => permissionSet.add(p));\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\n                    channelIdCodeMap.set(channel.id, channel.code);\n                }\n            }\n\n            this.selectedRolePermissions = {} as any;\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\n                // tslint:disable-next-line:no-non-null-assertion\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\n                }\n                this.selectedRolePermissions[channelId] = {\n                    // tslint:disable:no-non-null-assertion\n                    channelId,\n                    channelCode: channelIdCodeMap.get(channelId)!,\n                    permissions: permissionsHash,\n                    // tslint:enable:no-non-null-assertion\n                };\n            }\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"administrator-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'admin.create-new-administrator' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'settings.first-name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.last-name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.email-address' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-administrator=\"item\">\n        <td class=\"left align-middle\">{{ administrator.firstName }}</td>\n        <td class=\"left align-middle\">{{ administrator.lastName }}</td>\n        <td class=\"left align-middle\">{{ administrator.emailAddress }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', administrator.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td>\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteAdministrator(administrator)\"\n                        [disabled]=\"!('DeleteAdministrator' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetAdministrators,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-administrator-list',\n    templateUrl: './administrator-list.component.html',\n    styleUrls: ['./administrator-list.component.scss'],\n})\nexport class AdministratorListComponent extends BaseListComponent<\n    GetAdministrators.Query,\n    GetAdministrators.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\n            (data) => data.administrators,\n        );\n    }\n\n    deleteAdministrator(administrator: GetAdministrators.Items) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-administrator'),\n                body: `${administrator.firstName} ${administrator.lastName}`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap((res) =>\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.refresh();\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"channel-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n        <input\n            id=\"code\"\n            type=\"text\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n            formControlName=\"code\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\n        <input\n            id=\"token\"\n            type=\"text\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n            formControlName=\"token\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.currency' | translate\" for=\"defaultTaxZoneId\">\n        <select\n            clrSelect\n            name=\"currencyCode\"\n            formControlName=\"currencyCode\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let code of currencyCodes\" [value]=\"code\">{{ code | localeCurrencyName }}</option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\n        <select\n            clrSelect\n            name=\"defaultLanguageCode\"\n            formControlName=\"defaultLanguageCode\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let languageCode of availableLanguageCodes$ | async\" [value]=\"languageCode\">\n                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\n            </option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.prices-include-tax' | translate\" for=\"pricesIncludeTax\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"pricesIncludeTax\"\n                formControlName=\"pricesIncludeTax\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.default-tax-zone' | translate\" for=\"defaultTaxZoneId\">\n        <select\n            clrSelect\n            name=\"defaultTaxZoneId\"\n            formControlName=\"defaultTaxZoneId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option selected value style=\"display: none\"></option>\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\n        </select>\n    </vdr-form-field>\n    <clr-alert\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\n        clrAlertType=\"danger\"\n        [clrAlertClosable]=\"false\"\n    >\n        <clr-alert-item>\n            <span class=\"alert-text\">\n                {{ 'error.no-default-tax-zone-set' | translate }}\n            </span>\n        </clr-alert-item>\n    </clr-alert>\n\n    <vdr-form-field [label]=\"'settings.default-shipping-zone' | translate\" for=\"defaultShippingZoneId\">\n        <select\n            clrSelect\n            name=\"defaultShippingZoneId\"\n            formControlName=\"defaultShippingZoneId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option selected value style=\"display: none\"></option>\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\n        </select>\n    </vdr-form-field>\n    <clr-alert\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\n        clrAlertType=\"warning\"\n        [clrAlertClosable]=\"false\"\n    >\n        <clr-alert-item>\n            <span class=\"alert-text\">\n                {{ 'error.no-default-shipping-zone-set' | translate }}\n            </span>\n        </clr-alert-item>\n    </clr-alert>\n\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"Channel\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"channel-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\nimport {\n    Channel,\n    CreateChannelInput,\n    CurrencyCode,\n    GetZones,\n    LanguageCode,\n    UpdateChannelInput,\n} from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap, take } from 'rxjs/operators';\n@Component({\n    selector: 'vdr-channel-detail',\n    templateUrl: './channel-detail.component.html',\n    styleUrls: ['./channel-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChannelDetailComponent\n    extends BaseDetailComponent<Channel.Fragment>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    zones$: Observable<GetZones.Zones[]>;\n    detailForm: FormGroup;\n    currencyCodes = Object.values(CurrencyCode);\n    availableLanguageCodes$: Observable<LanguageCode[]>;\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        protected serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Channel');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            token: ['', Validators.required],\n            pricesIncludeTax: [false],\n            currencyCode: [''],\n            defaultShippingZoneId: ['', Validators.required],\n            defaultLanguageCode: [],\n            defaultTaxZoneId: ['', Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input: CreateChannelInput = {\n            code: formValue.code,\n            token: formValue.token,\n            defaultLanguageCode: formValue.defaultLanguageCode,\n            pricesIncludeTax: formValue.pricesIncludeTax,\n            currencyCode: formValue.currencyCode,\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\n            customFields: formValue.customFields,\n        };\n        this.dataService.settings\n            .createChannel(input)\n            .pipe(\n                mergeMap(({ createChannel }) =>\n                    this.dataService.auth.currentUser().single$.pipe(\n                        map(({ me }) => ({\n                            me,\n                            createChannel,\n                        })),\n                    ),\n                ),\n                mergeMap(({ me, createChannel }) =>\n                    // tslint:disable-next-line:no-non-null-assertion\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\n                ),\n            )\n            .subscribe(data => {\n                switch (data.__typename) {\n                    case 'Channel':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Channel',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\n                        break;\n                    case 'LanguageNotAvailableError':\n                        this.notificationService.error(data.message);\n                        break;\n                }\n            });\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(channel => {\n                    const input = {\n                        id: channel.id,\n                        code: formValue.code,\n                        token: formValue.token,\n                        pricesIncludeTax: formValue.pricesIncludeTax,\n                        currencyCode: formValue.currencyCode,\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\n                        defaultLanguageCode: formValue.defaultLanguageCode,\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\n                        customFields: formValue.customFields,\n                    } as UpdateChannelInput;\n                    return this.dataService.settings.updateChannel(input);\n                }),\n            )\n            .subscribe(({ updateChannel }) => {\n                switch (updateChannel.__typename) {\n                    case 'Channel':\n                        this.notificationService.success(_('common.notify-update-success'), {\n                            entity: 'Channel',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        break;\n                    case 'LanguageNotAvailableError':\n                        this.notificationService.error(updateChannel.message);\n                }\n            });\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            code: entity.code,\n            token: entity.token || this.generateToken(),\n            pricesIncludeTax: entity.pricesIncludeTax,\n            currencyCode: entity.currencyCode,\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\n            defaultLanguageCode: entity.defaultLanguageCode,\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\n        }\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\n            const codeControl = this.detailForm.get('code');\n            if (codeControl) {\n                codeControl.disable();\n            }\n        }\n    }\n\n    private generateToken(): string {\n        const randomString = () => Math.random().toString(36).substr(3, 10);\n        return `${randomString()}${randomString()}`;\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"channel-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['SuperAdmin', 'CreateChannel']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-channel' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table [items]=\"channels$ | async\">\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-channel=\"item\">\n        <td class=\"left align-middle\">\n            <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n            {{ channel.code | channelCodeToLabel | translate }}\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', channel.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultChannel(channel.code)\">\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteChannel(channel.id)\"\n                        [disabled]=\"!(['SuperAdmin', 'DeleteChannel'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\n\nimport { Channel } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-channel-list',\n    templateUrl: './channel-list.component.html',\n    styleUrls: ['./channel-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChannelListComponent {\n    channels$: Observable<Channel.Fragment[]>;\n    private refresh$ = new Subject();\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        this.channels$ = this.refresh$.pipe(\n            startWith(1),\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    deleteChannel(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\n                mergeMap(() => this.dataService.auth.currentUser().single$),\n                // tslint:disable-next-line:no-non-null-assertion\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Channel',\n                    });\n                    this.refresh$.next(1);\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Channel',\n                    });\n                },\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"country-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"updatePermission\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"enabled\"\n                formControlName=\"enabled\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"Country\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"country-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    Country,\n    CreateCountryInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    findTranslation,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCountryInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-detail',\n    templateUrl: './country-detail.component.html',\n    styleUrls: ['./country-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountryDetailComponent\n    extends BaseDetailComponent<Country.Fragment>\n    implements OnInit, OnDestroy\n{\n    country$: Observable<Country.Fragment>;\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Country');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            enabled: [true],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.country$ = this.entity$;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        customFieldConfig: this.customFields,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.createCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        customFieldConfig: this.customFields,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.updateCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(country, languageCode);\n\n        this.detailForm.patchValue({\n            code: country.code,\n            name: currentTranslation ? currentTranslation.name : '',\n            enabled: country.enabled,\n        });\n\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['customFields']),\n                country,\n                currentTranslation,\n            );\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <input\n            type=\"text\"\n            name=\"searchTerm\"\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\n            class=\"search-input\"\n        />\n        <div>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            [routerLink]=\"['./create']\"\n            *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-country' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table [items]=\"countriesWithZones$ | async\">\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-country=\"item\">\n        <td class=\"left align-middle\">{{ country.code }}</td>\n        <td class=\"left align-middle\">{{ country.name }}</td>\n        <td class=\"left align-middle\">\n            <a\n                [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\"\n                *ngFor=\"let zone of country.zones\"\n            >\n                <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\n            </a>\n        </td>\n        <td class=\"left align-middle\">\n            <clr-icon\n                [class.is-success]=\"country.enabled\"\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\n            ></clr-icon>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', country.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteCountry(country.id)\"\n                        vdrDropdownItem\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetCountryList,\n    GetZones,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ServerConfigService,\n    Zone,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-list',\n    templateUrl: './country-list.component.html',\n    styleUrls: ['./country-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountryListComponent implements OnInit, OnDestroy {\n    searchTerm = new FormControl('');\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\n    zones$: Observable<GetZones.Zones[]>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n\n    private countries: GetCountryList.Items[] = [];\n    private destroy$ = new Subject<void>();\n    private refresh$ = new Subject<void>();\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private serverConfigService: ServerConfigService,\n    ) {}\n\n    ngOnInit() {\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage);\n\n        const countries$ = combineLatest(\n            this.contentLanguage$,\n            this.searchTerm.valueChanges.pipe(startWith(null)),\n        ).pipe(\n            map(([__, term]) => term),\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).single$),\n            tap(data => {\n                this.countries = data.countries.items;\n            }),\n            map(data => data.countries.items),\n        );\n\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\n\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\n            map(([countries, zones]) => {\n                return countries.map(country => ({\n                    ...country,\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\n                }));\n            }),\n        );\n\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next(undefined);\n        this.destroy$.complete();\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    deleteCountry(countryId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-country'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\n                ),\n            )\n            .subscribe(\n                response => {\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'Country',\n                        });\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\n                    } else {\n                        this.notificationService.error(response.deleteCountry.message || '');\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\n        return input.hasOwnProperty('id');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            *vdrIfPermissions=\"updatePermission\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\n        <ng-select\n            [items]=\"languageCodes\"\n            [addTag]=\"false\"\n            [hideSelected]=\"true\"\n            multiple=\"true\"\n            appendTo=\"body\"\n            formControlName=\"availableLanguages\"\n        >\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\n                    ×\n                </span>\n                <span class=\"ng-value-label\">{{ item | localeLanguageName }} ({{ item }})</span>\n            </ng-template>\n            <ng-template ng-option-tmp let-item=\"item\">\n                {{ item | localeLanguageName }} ({{ item }})\n            </ng-template>\n        </ng-select>\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\n        for=\"outOfStockThreshold\"\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\n    >\n        <input\n            id=\"outOfStockThreshold\"\n            type=\"number\"\n            formControlName=\"outOfStockThreshold\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'settings.track-inventory-default' | translate\"\n        for=\"enabled\"\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n    >\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                name=\"enabled\"\n                formControlName=\"trackInventory\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"GlobalSettings\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"global-settings-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    GlobalSettings,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { switchMap, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-global-settings',\n    templateUrl: './global-settings.component.html',\n    styleUrls: ['./global-settings.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    languageCodes = Object.values(LanguageCode);\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\n        this.detailForm = this.formBuilder.group({\n            availableLanguages: [''],\n            trackInventory: false,\n            outOfStockThreshold: [0, Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit(): void {\n        this.init();\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\n                const languagesSelect = this.detailForm.get('availableLanguages');\n                if (languagesSelect) {\n                    languagesSelect.disable();\n                }\n            }\n        });\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n\n        this.dataService.settings\n            .updateGlobalSettings(this.detailForm.value)\n            .pipe(\n                tap(({ updateGlobalSettings }) => {\n                    switch (updateGlobalSettings.__typename) {\n                        case 'GlobalSettings':\n                            this.detailForm.markAsPristine();\n                            this.changeDetector.markForCheck();\n                            this.notificationService.success(_('common.notify-update-success'), {\n                                entity: 'Settings',\n                            });\n                            break;\n                        case 'ChannelDefaultLanguageError':\n                            this.notificationService.error(updateGlobalSettings.message);\n                    }\n                }),\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\n                withLatestFrom(this.dataService.client.uiState().single$),\n            )\n            .subscribe(([{ globalSettings }, { uiState }]) => {\n                const availableLangs = globalSettings.availableLanguages;\n                if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {\n                    this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();\n                }\n            });\n    }\n\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            availableLanguages: entity.availableLanguages,\n            trackInventory: entity.trackInventory,\n            outOfStockThreshold: entity.outOfStockThreshold,\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"payment-method-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            [disabled]=\"detailForm.pristine || detailForm.invalid\"\n            (click)=\"create()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as paymentMethod\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n            (input)=\"updateCode(paymentMethod.code, $event.target.value)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-rich-text-editor\n        formControlName=\"description\"\n        [readonly]=\"!(updatePermission | hasPermission)\"\n        [label]=\"'common.description' | translate\"\n    ></vdr-rich-text-editor>\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"enabled\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"enabled\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"PaymentMethod\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n\n    <vdr-custom-detail-component-host\n        locationId=\"payment-method-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n\n    <div class=\"clr-row mt4\">\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.payment-eligibility-checker' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                [operation]=\"selectedChecker\"\n                [operationDefinition]=\"selectedCheckerDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"removeChecker()\"\n                formControlName=\"checker\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let checker of checkers\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectChecker(checker)\"\n                        >\n                            {{ checker.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.payment-handler' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedHandler && selectedHandlerDefinition\"\n                [operation]=\"selectedHandler\"\n                [operationDefinition]=\"selectedHandlerDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"removeHandler()\"\n                formControlName=\"handler\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let handler of handlers\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectHandler(handler)\"\n                        >\n                            {{ handler.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n    </div>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    ConfigArgDefinition,\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    CreatePaymentMethodInput,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    getConfigArgValue,\n    NotificationService,\n    PaymentMethod,\n    Permission,\n    ServerConfigService,\n    toConfigurableOperationInput,\n    UpdatePaymentMethodInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-payment-method-detail',\n    templateUrl: './payment-method-detail.component.html',\n    styleUrls: ['./payment-method-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodDetailComponent\n    extends BaseDetailComponent<PaymentMethod.Fragment>\n    implements OnInit, OnDestroy\n{\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    checkers: ConfigurableOperationDefinition[] = [];\n    handlers: ConfigurableOperationDefinition[] = [];\n    selectedChecker?: ConfigurableOperation | null;\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\n    selectedHandler?: ConfigurableOperation | null;\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('PaymentMethod');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            description: '',\n            enabled: [true, Validators.required],\n            checker: {},\n            handler: {},\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        combineLatest([\n            this.dataService.settings.getPaymentMethodOperations().single$,\n            this.entity$.pipe(take(1)),\n        ]).subscribe(([data, entity]) => {\n            this.checkers = data.paymentMethodEligibilityCheckers;\n            this.handlers = data.paymentMethodHandlers;\n            this.changeDetector.markForCheck();\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\n                c => c.code === (entity.checker && entity.checker.code),\n            );\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\n                c => c.code === (entity.handler && entity.handler.code),\n            );\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    configArgsIsPopulated(): boolean {\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\n        if (!configArgsGroup) {\n            return false;\n        }\n        return 0 < Object.keys(configArgsGroup.controls).length;\n    }\n\n    selectChecker(checker: ConfigurableOperationDefinition) {\n        this.selectedCheckerDefinition = checker;\n        this.selectedChecker = configurableDefinitionToInstance(checker);\n        const formControl = this.detailForm.get('checker');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedChecker);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    selectHandler(handler: ConfigurableOperationDefinition) {\n        this.selectedHandlerDefinition = handler;\n        this.selectedHandler = configurableDefinitionToInstance(handler);\n        const formControl = this.detailForm.get('handler');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedHandler);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    removeChecker() {\n        this.selectedChecker = null;\n        this.detailForm.markAsDirty();\n    }\n\n    removeHandler() {\n        this.selectedHandler = null;\n        this.detailForm.markAsDirty();\n    }\n\n    create() {\n        const selectedChecker = this.selectedChecker;\n        const selectedHandler = this.selectedHandler;\n        if (!selectedHandler) {\n            return;\n        }\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreatePaymentMethodInput = {\n                        name: formValue.name,\n                        code: formValue.code,\n                        description: formValue.description,\n                        enabled: formValue.enabled,\n                        checker: selectedChecker\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\n                            : null,\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\n                        customFields: formValue.customFields,\n                    };\n                    return this.dataService.settings.createPaymentMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const selectedChecker = this.selectedChecker;\n        const selectedHandler = this.selectedHandler;\n        if (!selectedHandler) {\n            return;\n        }\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdatePaymentMethodInput = {\n                        id,\n                        name: formValue.name,\n                        code: formValue.code,\n                        description: formValue.description,\n                        enabled: formValue.enabled,\n                        checker: selectedChecker\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\n                            : null,\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\n                        customFields: formValue.customFields,\n                    };\n                    return this.dataService.settings.updatePaymentMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\n        this.detailForm.patchValue({\n            name: paymentMethod.name,\n            code: paymentMethod.code,\n            description: paymentMethod.description,\n            enabled: paymentMethod.enabled,\n            checker: paymentMethod.checker || {},\n            handler: paymentMethod.handler || {},\n        });\n        if (!this.selectedChecker) {\n            this.selectedChecker = paymentMethod.checker && {\n                code: paymentMethod.checker.code,\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (!this.selectedHandler) {\n            this.selectedHandler = paymentMethod.handler && {\n                code: paymentMethod.handler.code,\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get('customFields'),\n                paymentMethod,\n            );\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"payment-method-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-payment-method' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-paymentMethod=\"item\">\n        <td class=\"left align-middle\">{{ paymentMethod.code }}</td>\n        <td class=\"left align-middle\">{{ paymentMethod.enabled }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', paymentMethod.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deletePaymentMethod(paymentMethod.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeletePaymentMethod'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetPaymentMethodList,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-payment-method-list',\n    templateUrl: './payment-method-list.component.html',\n    styleUrls: ['./payment-method-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodListComponent extends BaseListComponent<\n    GetPaymentMethodList.Query,\n    GetPaymentMethodList.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\n            data => data.paymentMethods,\n        );\n    }\n\n    deletePaymentMethod(paymentMethodId: string) {\n        this.showModalAndDelete(paymentMethodId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-payment-method'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res =>\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\n                ),\n                map(res => res.deletePaymentMethod),\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\"/>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\"/>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\"/>\n    </vdr-form-field>\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\"/>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.password' | translate\" for=\"password\" [readOnlyToggle]=\"true\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\"/>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"Administrator\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"administrator-profile\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Administrator,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    GetActiveAdministrator,\n    LanguageCode,\n    NotificationService,\n    ServerConfigService,\n    UpdateActiveAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileComponent\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    save() {\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateActiveAdministratorInput = {\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                    };\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get('customFields'),\n                administrator,\n            );\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"role-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\n        <input\n            id=\"description\"\n            type=\"text\"\n            formControlName=\"description\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n            (input)=\"updateCode($event.target.value)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.channel' | translate\">\n        <vdr-channel-assignment-control\n            formControlName=\"channelIds\"\n            [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\n        ></vdr-channel-assignment-control>\n    </vdr-form-field>\n    <label>{{ 'settings.permissions' | translate }}</label>\n    <vdr-permission-grid\n        [permissionDefinitions]=\"permissionDefinitions\"\n        [activePermissions]=\"detailForm.get('permissions')?.value\"\n        (permissionChange)=\"setPermission($event)\"\n        [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n    ></vdr-permission-grid>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"role-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-role' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"visibleRoles$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.description' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.channel' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.permissions' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-role=\"item\">\n        <td class=\"left align-middle\">{{ role.description }}</td>\n        <td class=\"left align-middle\"><span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span></td>\n        <td class=\"left align-middle\">\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\n                <vdr-chip *ngFor=\"let channel of role.channels\">\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                    {{ channel.code | channelCodeToLabel | translate }}\n                </vdr-chip>\n            </ng-container>\n        </td>\n        <td class=\"left align-middle\">\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\n                <vdr-chip *ngFor=\"let permission of role.permissions |  slice: 0:displayLimit[role.id] || 3\">{{ permission }}</vdr-chip>\n                <button\n                    class=\"btn btn-sm btn-secondary btn-icon\"\n                    *ngIf=\"role.permissions.length > initialLimit\"\n                    (click)=\"toggleDisplayLimit(role)\"\n                >\n                    <ng-container *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\">\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ role.permissions.length - initialLimit }}\n                    </ng-container>\n                    <ng-template #collapse>\n                        <clr-icon shape=\"minus\"></clr-icon>\n                    </ng-template>\n                </button>\n            </ng-container>\n            <ng-template #defaultRole>\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\n            </ng-template>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                *ngIf=\"!isDefaultRole(role)\"\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', role.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultRole(role)\">\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteRole(role.id)\"\n                        [disabled]=\"!('SuperAdmin' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-list',\n    templateUrl: './role-list.component.html',\n    styleUrls: ['./role-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    visibleRoles$: Observable<GetRoles.Items[]>;\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\n            data => data.roles,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.visibleRoles$ = this.items$.pipe(\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\n        );\n    }\n\n    toggleDisplayLimit(role: GetRoles.Items) {\n        if (this.displayLimit[role.id] === role.permissions.length) {\n            this.displayLimit[role.id] = this.initialLimit;\n        } else {\n            this.displayLimit[role.id] = role.permissions.length;\n        }\n    }\n\n    isDefaultRole(role: Role): boolean {\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\n    }\n\n    deleteRole(id: string) {\n        this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-role'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Role',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n}\n","<div class=\"test-result card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-result' | translate }}\n    </div>\n    <div class=\"card-block\" *ngFor=\"let quote of testResult\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\n                {{ quote.name }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\n                    {{ quote.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-block\" *ngIf=\"testResult?.length === 0\">\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-methods' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-shipping-eligibility-test-result',\n    templateUrl: './shipping-eligibility-test-result.component.html',\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingEligibilityTestResultComponent {\n    @Input() testResult: ShippingMethodQuote[];\n    @Input() okToRun = false;\n    @Input() testDataUpdated = false;\n    @Input() currencyCode: CurrencyCode;\n    @Output() runTest = new EventEmitter<void>();\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-order' | translate }}\n    </div>\n    <table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\n        <thead>\n            <tr>\n                <th></th>\n                <th>{{ 'order.product-name' | translate }}</th>\n                <th>{{ 'order.product-sku' | translate }}</th>\n                <th>{{ 'order.unit-price' | translate }}</th>\n                <th>{{ 'order.quantity' | translate }}</th>\n                <th>{{ 'order.total' | translate }}</th>\n            </tr>\n        </thead>\n        <tr *ngFor=\"let line of lines\" class=\"order-line\">\n            <td class=\"align-middle thumb\">\n                <img [src]=\"line.preview + '?preset=tiny'\" />\n            </td>\n            <td class=\"align-middle name\">{{ line.name }}</td>\n            <td class=\"align-middle sku\">{{ line.sku }}</td>\n            <td class=\"align-middle unit-price\">\n                {{ line.unitPriceWithTax | localeCurrency: currencyCode }}\n            </td>\n            <td class=\"align-middle quantity\">\n                <input\n                    [(ngModel)]=\"line.quantity\"\n                    (change)=\"updateQuantity()\"\n                    type=\"number\"\n                    max=\"9999\"\n                    min=\"1\"\n                />\n                <button class=\"icon-button\" (click)=\"removeLine(line)\">\n                    <clr-icon shape=\"trash\"></clr-icon>\n                </button>\n            </td>\n            <td class=\"align-middle total\">\n                {{ (line.unitPriceWithTax * line.quantity) | localeCurrency: currencyCode }}\n            </td>\n        </tr>\n        <tr class=\"sub-total\">\n            <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>{{ subTotal | localeCurrency: currencyCode }}</td>\n        </tr>\n    </table>\n\n    <ng-template #emptyPlaceholder>\n        <div class=\"card-block empty-placeholder\">\n            <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\n            <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\n        </div>\n    </ng-template>\n    <div class=\"card-block\">\n        <vdr-product-selector (productSelected)=\"selectResult($event)\"> </vdr-product-selector>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n    CurrencyCode,\n    DataService,\n    LocalStorageService,\n    ProductSelectorSearch,\n} from '@vendure/admin-ui/core';\n\nexport interface TestOrderLine {\n    id: string;\n    name: string;\n    preview: string;\n    sku: string;\n    unitPriceWithTax: number;\n    quantity: number;\n}\n\n@Component({\n    selector: 'vdr-test-order-builder',\n    templateUrl: './test-order-builder.component.html',\n    styleUrls: ['./test-order-builder.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestOrderBuilderComponent implements OnInit {\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\n    lines: TestOrderLine[] = [];\n    currencyCode: CurrencyCode;\n    get subTotal(): number {\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\n    }\n\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\n\n    ngOnInit() {\n        this.lines = this.loadFromLocalStorage();\n        if (this.lines) {\n            this.orderLinesChange.emit(this.lines);\n        }\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\n            this.currencyCode = result.activeChannel.currencyCode;\n        });\n    }\n\n    selectResult(result: ProductSelectorSearch.Items) {\n        if (result) {\n            this.addToLines(result);\n        }\n    }\n\n    private addToLines(result: ProductSelectorSearch.Items) {\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\n            this.lines.push({\n                id: result.productVariantId,\n                name: result.productVariantName,\n                preview: result.productAsset?.preview ?? '',\n                quantity: 1,\n                sku: result.sku,\n                unitPriceWithTax:\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\n            });\n            this.persistToLocalStorage();\n            this.orderLinesChange.emit(this.lines);\n        }\n    }\n\n    updateQuantity() {\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    removeLine(line: TestOrderLine) {\n        this.lines = this.lines.filter(l => l.id !== line.id);\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    private persistToLocalStorage() {\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\n    }\n\n    private loadFromLocalStorage(): TestOrderLine[] {\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-address' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <form [formGroup]=\"form\">\n            <clr-input-container>\n                <label>{{ 'customer.city' | translate }}</label>\n                <input formControlName=\"city\" type=\"text\" clrInput />\n            </clr-input-container>\n            <clr-input-container>\n                <label>{{ 'customer.province' | translate }}</label>\n                <input formControlName=\"province\" type=\"text\" clrInput />\n            </clr-input-container>\n            <clr-input-container>\n                <label>{{ 'customer.postal-code' | translate }}</label>\n                <input formControlName=\"postalCode\" type=\"text\" clrInput />\n            </clr-input-container>\n            <clr-input-container>\n                <label>{{ 'customer.country' | translate }}</label>\n                <select name=\"countryCode\" formControlName=\"countryCode\" clrInput clrSelect>\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\n                        {{ country.name }}\n                    </option>\n                </select>\n            </clr-input-container>\n        </form>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\nimport { Observable, Subscription } from 'rxjs';\n\nexport interface TestAddress {\n    city: string;\n    province: string;\n    postalCode: string;\n    countryCode: string;\n}\n\n@Component({\n    selector: 'vdr-test-address-form',\n    templateUrl: './test-address-form.component.html',\n    styleUrls: ['./test-address-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\n    @Output() addressChange = new EventEmitter<TestAddress>();\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    form: FormGroup;\n    private subscription: Subscription;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dataService: DataService,\n        private localStorageService: LocalStorageService,\n    ) {}\n\n    ngOnInit() {\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items);\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\n        const initialValue: TestAddress = storedValue\n            ? storedValue\n            : {\n                  city: '',\n                  countryCode: '',\n                  postalCode: '',\n                  province: '',\n              };\n        this.addressChange.emit(initialValue);\n\n        this.form = this.formBuilder.group(initialValue);\n        this.subscription = this.form.valueChanges.subscribe(value => {\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\n            this.addressChange.emit(value);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n","<div\n    class=\"test-result card\"\n    [ngClass]=\"{\n        success: testResult?.eligible === true,\n        error: testResult?.eligible === false,\n        unknown: !testResult\n    }\"\n>\n    <div class=\"card-header\">\n        {{ 'settings.test-result' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\n                <div class=\"eligible-icon\">\n                    <clr-icon\n                        shape=\"success-standard\"\n                        class=\"is-solid success\"\n                        *ngIf=\"testResult?.eligible\"\n                    ></clr-icon>\n                    <clr-icon\n                        shape=\"ban\"\n                        class=\"is-solid error\"\n                        *ngIf=\"testResult?.eligible === false\"\n                    ></clr-icon>\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\n                </div>\n                {{ testResult?.eligible }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data\n                    [label]=\"'common.price' | translate\"\n                    *ngIf=\"testResult?.quote?.price != null\"\n                >\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data\n                    [label]=\"'common.price-with-tax' | translate\"\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\n                >\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree\n                *ngIf=\"testResult?.quote?.metadata\"\n                [value]=\"testResult?.quote?.metadata\"\n            ></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-method' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-shipping-method-test-result',\n    templateUrl: './shipping-method-test-result.component.html',\n    styleUrls: ['./shipping-method-test-result.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodTestResultComponent {\n    @Input() testResult: TestShippingMethodResult;\n    @Input() okToRun = false;\n    @Input() testDataUpdated = false;\n    @Input() currencyCode: CurrencyCode;\n    @Output() runTest = new EventEmitter<void>();\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"updatePermission\"\n                [disabled]=\"\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as shippingMethod\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n            (input)=\"updateCode(shippingMethod.code, $event.target.value)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-rich-text-editor\n        formControlName=\"description\"\n        [readonly]=\"!(updatePermission | hasPermission)\"\n        [label]=\"'common.description' | translate\"\n    ></vdr-rich-text-editor>\n    <vdr-form-field [label]=\"'settings.fulfillment-handler' | translate\" for=\"fulfillmentHandler\" class=\"mb2\">\n        <select\n            name=\"fulfillmentHandler\"\n            formControlName=\"fulfillmentHandler\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\n                {{ handler.code }}: {{ handler.description }}\n            </option>\n        </select>\n    </vdr-form-field>\n\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"ShippingMethod\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n\n    <vdr-custom-detail-component-host\n        locationId=\"shipping-method-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n\n    <div class=\"clr-row mt4\">\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.shipping-eligibility-checker' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                [operation]=\"selectedChecker\"\n                [operationDefinition]=\"selectedCheckerDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"selectedChecker = null\"\n                formControlName=\"checker\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let checker of checkers\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectChecker(checker)\"\n                        >\n                            {{ checker.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.shipping-calculator' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\n                [operation]=\"selectedCalculator\"\n                [operationDefinition]=\"selectedCalculatorDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"selectedCalculator = null\"\n                formControlName=\"calculator\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let calculator of calculators\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectCalculator(calculator)\"\n                        >\n                            {{ calculator.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n    </div>\n</form>\n<div class=\"testing-tool\">\n    <clr-accordion>\n        <clr-accordion-panel>\n            <clr-accordion-title>{{ 'settings.test-shipping-method' | translate }}</clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <vdr-test-order-builder\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\n                        ></vdr-test-order-builder>\n                    </div>\n                    <div class=\"clr-col\">\n                        <vdr-test-address-form\n                            (addressChange)=\"setTestAddress($event)\"\n                        ></vdr-test-address-form>\n                        <vdr-shipping-method-test-result\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                            [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\n                            [testDataUpdated]=\"testDataUpdated\"\n                            [testResult]=\"testResult$ | async\"\n                            (runTest)=\"runTest()\"\n                        ></vdr-shipping-method-test-result>\n                    </div>\n                </div>\n            </clr-accordion-content>\n        </clr-accordion-panel>\n    </clr-accordion>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    CreateShippingMethodInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    findTranslation,\n    GetActiveChannel,\n    getConfigArgValue,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    ShippingMethod,\n    TestShippingMethodInput,\n    TestShippingMethodResult,\n    toConfigurableOperationInput,\n    UpdateShippingMethodInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\n\nimport { TestAddress } from '../test-address-form/test-address-form.component';\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\n\n@Component({\n    selector: 'vdr-shipping-method-detail',\n    templateUrl: './shipping-method-detail.component.html',\n    styleUrls: ['./shipping-method-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodDetailComponent\n    extends BaseDetailComponent<ShippingMethod.Fragment>\n    implements OnInit, OnDestroy\n{\n    detailForm: FormGroup;\n    checkers: ConfigurableOperationDefinition[] = [];\n    calculators: ConfigurableOperationDefinition[] = [];\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\n    selectedChecker?: ConfigurableOperation | null;\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\n    selectedCalculator?: ConfigurableOperation | null;\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\n    testAddress: TestAddress;\n    testOrderLines: TestOrderLine[];\n    testDataUpdated = false;\n    testResult$: Observable<TestShippingMethodResult | undefined>;\n    customFields: CustomFieldConfig[];\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            description: '',\n            fulfillmentHandler: ['', Validators.required],\n            checker: {},\n            calculator: {},\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        combineLatest([\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\n            this.entity$.pipe(take(1)),\n        ]).subscribe(([data, entity]) => {\n            this.checkers = data.shippingEligibilityCheckers;\n            this.calculators = data.shippingCalculators;\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\n            this.changeDetector.markForCheck();\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\n                c => c.code === (entity.checker && entity.checker.code),\n            );\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\n                c => c.code === (entity.calculator && entity.calculator.code),\n            );\n        });\n\n        this.activeChannel$ = this.dataService.settings\n            .getActiveChannel()\n            .mapStream(data => data.activeChannel);\n\n        this.testResult$ = this.fetchTestResult$.pipe(\n            switchMap(([address, lines]) => {\n                if (!this.selectedChecker || !this.selectedCalculator) {\n                    return of(undefined);\n                }\n                const formValue = this.detailForm.value;\n                const input: TestShippingMethodInput = {\n                    shippingAddress: { ...address, streetLine1: 'test' },\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\n                };\n                return this.dataService.shippingMethod\n                    .testShippingMethod(input)\n                    .mapSingle(result => result.testShippingMethod);\n            }),\n        );\n\n        // tslint:disable:no-non-null-assertion\n        merge(\n            this.detailForm.get(['checker'])!.valueChanges,\n            this.detailForm.get(['calculator'])!.valueChanges,\n        )\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => (this.testDataUpdated = true));\n        // tslint:enable:no-non-null-assertion\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    selectChecker(checker: ConfigurableOperationDefinition) {\n        this.selectedCheckerDefinition = checker;\n        this.selectedChecker = configurableDefinitionToInstance(checker);\n        const formControl = this.detailForm.get('checker');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedChecker);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\n        this.selectedCalculatorDefinition = calculator;\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\n        const formControl = this.detailForm.get('calculator');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedCalculator);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    create() {\n        const selectedChecker = this.selectedChecker;\n        const selectedCalculator = this.selectedCalculator;\n        if (!selectedChecker || !selectedCalculator) {\n            return;\n        }\n        combineLatest([this.entity$, this.languageCode$])\n            .pipe(\n                take(1),\n                mergeMap(([shippingMethod, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input = {\n                        ...(this.getUpdatedShippingMethod(\n                            shippingMethod,\n                            this.detailForm,\n                            languageCode,\n                        ) as CreateShippingMethodInput),\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\n                    };\n                    return this.dataService.shippingMethod.createShippingMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const selectedChecker = this.selectedChecker;\n        const selectedCalculator = this.selectedCalculator;\n        if (!selectedChecker || !selectedCalculator) {\n            return;\n        }\n        combineLatest([this.entity$, this.languageCode$])\n            .pipe(\n                take(1),\n                mergeMap(([shippingMethod, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input = {\n                        ...(this.getUpdatedShippingMethod(\n                            shippingMethod,\n                            this.detailForm,\n                            languageCode,\n                        ) as UpdateShippingMethodInput),\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\n                    };\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    // tslint:disable-next-line:no-console\n                    console.error(err);\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    setTestOrderLines(event: TestOrderLine[]) {\n        this.testOrderLines = event;\n        this.testDataUpdated = true;\n    }\n\n    setTestAddress(event: TestAddress) {\n        this.testAddress = event;\n        this.testDataUpdated = true;\n    }\n\n    allTestDataPresent(): boolean {\n        return !!(\n            this.testAddress &&\n            this.testOrderLines &&\n            this.testOrderLines.length &&\n            this.selectedChecker &&\n            this.selectedCalculator\n        );\n    }\n\n    runTest() {\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\n        this.testDataUpdated = false;\n    }\n\n    /**\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\n     * can then be persisted to the API.\n     */\n    private getUpdatedShippingMethod(\n        shippingMethod: ShippingMethod.Fragment,\n        formGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\n        const formValue = formGroup.value;\n        const input = createUpdatedTranslatable({\n            translatable: shippingMethod,\n            updatedFields: formValue,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: shippingMethod.name || '',\n                description: shippingMethod.description || '',\n            },\n        });\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\n    }\n\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\n        this.detailForm.patchValue({\n            name: currentTranslation?.name ?? '',\n            description: currentTranslation?.description ?? '',\n            code: shippingMethod.code,\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\n            checker: shippingMethod.checker || {},\n            calculator: shippingMethod.calculator || {},\n        });\n        if (!this.selectedChecker) {\n            this.selectedChecker = shippingMethod.checker && {\n                code: shippingMethod.checker.code,\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (!this.selectedCalculator) {\n            this.selectedCalculator = shippingMethod.calculator && {\n                code: shippingMethod.calculator?.code,\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['customFields']),\n                shippingMethod,\n                currentTranslation,\n            );\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-language-selector\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"contentLanguage$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            [routerLink]=\"['./create']\"\n            *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-shipping-method' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-shippingMethod=\"item\">\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', shippingMethod.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n\n<div class=\"testing-tool\">\n    <clr-accordion>\n        <clr-accordion-panel>\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <vdr-test-order-builder\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\n                        ></vdr-test-order-builder>\n                    </div>\n                    <div class=\"clr-col\">\n                        <vdr-test-address-form\n                            (addressChange)=\"setTestAddress($event)\"\n                        ></vdr-test-address-form>\n                        <vdr-shipping-eligibility-test-result\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                            [okToRun]=\"allTestDataPresent()\"\n                            [testDataUpdated]=\"testDataUpdated\"\n                            [testResult]=\"testResult$ | async\"\n                            (runTest)=\"runTest()\"\n                        ></vdr-shipping-eligibility-test-result>\n                    </div>\n                </div>\n            </clr-accordion-content>\n        </clr-accordion-panel>\n    </clr-accordion>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetActiveChannel,\n    GetShippingMethodList,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ServerConfigService,\n    ShippingMethodQuote,\n    TestEligibleShippingMethodsInput,\n} from '@vendure/admin-ui/core';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\nimport { TestAddress } from '../test-address-form/test-address-form.component';\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\n\n@Component({\n    selector: 'vdr-shipping-method-list',\n    templateUrl: './shipping-method-list.component.html',\n    styleUrls: ['./shipping-method-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodListComponent\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\n    implements OnInit {\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\n    testAddress: TestAddress;\n    testOrderLines: TestOrderLine[];\n    testDataUpdated = false;\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        private serverConfigService: ServerConfigService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\n            data => data.shippingMethods,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.testResult$ = this.fetchTestResult$.pipe(\n            switchMap(([address, lines]) => {\n                const input: TestEligibleShippingMethodsInput = {\n                    shippingAddress: { ...address, streetLine1: 'test' },\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\n                };\n                return this.dataService.shippingMethod\n                    .testEligibleShippingMethods(input)\n                    .mapSingle(result => result.testEligibleShippingMethods);\n            }),\n        );\n        this.activeChannel$ = this.dataService.settings\n            .getActiveChannel()\n            .mapStream(data => data.activeChannel);\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n    }\n\n    deleteShippingMethod(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-shipping-method'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    setTestOrderLines(event: TestOrderLine[]) {\n        this.testOrderLines = event;\n        this.testDataUpdated = true;\n    }\n\n    setTestAddress(event: TestAddress) {\n        this.testAddress = event;\n        this.testDataUpdated = true;\n    }\n\n    allTestDataPresent(): boolean {\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\n    }\n\n    runTest() {\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\n        this.testDataUpdated = false;\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-category-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"!saveButtonEnabled()\"\n                *vdrIfPermissions=\"updatePermission\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"isDefault\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"isDefault\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"TaxCategory\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"tax-category-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\nimport {\n    ConfigurableOperation,\n    CreateTaxCategoryInput,\n    LanguageCode,\n    TaxCategory,\n    UpdateTaxCategoryInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-detail',\n    templateUrl: './tax-category-detail.component.html',\n    styleUrls: ['./tax-category-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryDetailComponent\n    extends BaseDetailComponent<TaxCategory.Fragment>\n    implements OnInit, OnDestroy\n{\n    taxCategory$: Observable<TaxCategory.Fragment>;\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\n\n    private taxCondition: ConfigurableOperation;\n    private taxAction: ConfigurableOperation;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('TaxCategory');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            isDefault: false,\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategory$ = this.entity$;\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = {\n            name: formValue.name,\n            isDefault: formValue.isDefault,\n            customFields: formValue.customFields,\n        } as CreateTaxCategoryInput;\n        this.dataService.settings.createTaxCategory(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxCategory',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxCategory',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.taxCategory$\n            .pipe(\n                take(1),\n                mergeMap(taxCategory => {\n                    const input = {\n                        id: taxCategory.id,\n                        name: formValue.name,\n                        isDefault: formValue.isDefault,\n                        customFields: formValue.customFields,\n                    } as UpdateTaxCategoryInput;\n                    return this.dataService.settings.updateTaxCategory(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxCategory',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxCategory',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            isDefault: entity.isDefault,\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-category-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-tax-category' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table [items]=\"taxCategories$ | async\">\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-taxCategory=\"item\">\n        <td class=\"left align-middle\">{{ taxCategory.name }}</td>\n        <td class=\"left align-middle\">\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', taxCategory.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteTaxCategory(taxCategory)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxCategory'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { QueryResult } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-tax-list',\n    templateUrl: './tax-category-list.component.html',\n    styleUrls: ['./tax-category-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryListComponent {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    private queryResult: QueryResult<GetTaxCategories.Query>;\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        this.queryResult = this.dataService.settings.getTaxCategories();\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\n    }\n\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-tax-category'),\n                body: taxCategory.name,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\n                map(res => res.deleteTaxCategory),\n            )\n            .subscribe(\n                res => {\n                    if (res.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'TaxRate',\n                        });\n                        this.queryResult.ref.refetch();\n                    } else {\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\n                            entity: 'TaxRate',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-rate-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"!saveButtonEnabled()\"\n                *vdrIfPermissions=\"updatePermission\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"enabled\"\n                formControlName=\"enabled\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\n        <vdr-affixed-input suffix=\"%\">\n            <input\n                id=\"value\"\n                type=\"number\"\n                step=\"0.1\"\n                formControlName=\"value\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n            />\n        </vdr-affixed-input>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\n        <select\n            clrSelect\n            name=\"taxCategoryId\"\n            formControlName=\"taxCategoryId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let taxCategory of taxCategories$ | async\" [value]=\"taxCategory.id\">\n                {{ taxCategory.name }}\n            </option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\n        <select\n            clrSelect\n            name=\"zoneId\"\n            formControlName=\"zoneId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\n        </select>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"TaxRate\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"tax-rate-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateTaxRateInput,\n    CustomerGroup,\n    CustomFieldConfig,\n    DataService,\n    GetZones,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    TaxCategory,\n    TaxRate,\n    UpdateTaxRateInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-rate-detail',\n    templateUrl: './tax-rate-detail.component.html',\n    styleUrls: ['./tax-rate-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateDetailComponent\n    extends BaseDetailComponent<TaxRate.Fragment>\n    implements OnInit, OnDestroy\n{\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    zones$: Observable<GetZones.Zones[]>;\n    groups$: Observable<CustomerGroup[]>;\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('TaxRate');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: [true],\n            value: [0, Validators.required],\n            taxCategoryId: [''],\n            zoneId: [''],\n            customerGroupId: [''],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategories$ = this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories);\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = {\n            name: formValue.name,\n            enabled: formValue.enabled,\n            value: formValue.value,\n            categoryId: formValue.taxCategoryId,\n            zoneId: formValue.zoneId,\n            customerGroupId: formValue.customerGroupId,\n            customFields: formValue.customFields,\n        } as CreateTaxRateInput;\n        this.dataService.settings.createTaxRate(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxRate',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxRate',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(taxRate => {\n                    const input = {\n                        id: taxRate.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        value: formValue.value,\n                        categoryId: formValue.taxCategoryId,\n                        zoneId: formValue.zoneId,\n                        customerGroupId: formValue.customerGroupId,\n                        customFields: formValue.customFields,\n                    } as UpdateTaxRateInput;\n                    return this.dataService.settings.updateTaxRate(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxRate',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            value: entity.value,\n            taxCategoryId: entity.category ? entity.category.id : '',\n            zoneId: entity.zone ? entity.zone.id : '',\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-rate-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-tax-rate' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.tax-category' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.tax-rate' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-taxRate=\"item\">\n        <td class=\"left align-middle\">{{ taxRate.name }}</td>\n        <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\n        <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\n        <td class=\"left align-middle\">{{ taxRate.value }}%</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', taxRate.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteTaxRate(taxRate)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-tax-rate-list',\n    templateUrl: './tax-rate-list.component.html',\n    styleUrls: ['./tax-rate-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\n            data => data.taxRates,\n        );\n    }\n\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-tax-rate'),\n                body: taxRate.name,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\n                map(res => res.deleteTaxRate),\n            )\n            .subscribe(\n                res => {\n                    if (res.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'TaxRate',\n                        });\n                        this.refresh();\n                    } else {\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\n                            entity: 'TaxRate',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n}\n","<ng-template vdrDialogTitle>\n    <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\n    <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\n</ng-template>\n<form [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-tabbed-custom-fields\n        entityName=\"Zone\"\n        [customFields]=\"customFields\"\n        [customFieldsFormGroup]=\"form.get('customFields')\"\n        [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\n    ></vdr-tabbed-custom-fields>\n</form>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n        <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\n        <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CreateZoneInput, CustomFieldConfig, Dialog, ServerConfigService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-zone-detail-dialog',\n    templateUrl: './zone-detail-dialog.component.html',\n    styleUrls: ['./zone-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneDetailDialogComponent implements Dialog<CreateZoneInput>, OnInit {\n    zone: { id?: string; name: string; customFields?: { [name: string]: any } };\n    resolveWith: (result?: CreateZoneInput) => void;\n\n    customFields: CustomFieldConfig[];\n    form: FormGroup;\n\n    constructor(private serverConfigService: ServerConfigService, private formBuilder: FormBuilder) {\n        this.customFields = this.serverConfigService.getCustomFieldsFor('Zone');\n    }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            name: [this.zone.name, Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.form.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = this.zone.customFields?.[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.form.value);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"zone-list\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\"\n            (click)=\"create()\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-zone' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"zone-wrapper\">\n    <div class=\"zone-list\">\n        <table class=\"table mt0\">\n            <tbody>\n                <tr\n                    *ngFor=\"let zone of zones$ | async\"\n                    [class.active]=\"zone.id === (activeZone$ | async)?.id\"\n                >\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"zone\"></vdr-entity-info></td>\n                    <td class=\"left align-middle\">\n                        <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\n                    </td>\n                    <td class=\"text-right align-middle\">\n                        <a\n                            class=\"btn btn-link btn-sm\"\n                            [routerLink]=\"['./', { contents: zone.id }]\"\n                            queryParamsHandling=\"preserve\"\n                        >\n                            <clr-icon shape=\"view-list\"></clr-icon>\n                            {{ 'settings.view-zone-members' | translate }}\n                        </a>\n                    </td>\n                    <td class=\"align-middle\">\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(zone)\">\n                            <clr-icon shape=\"edit\"></clr-icon>\n                            {{ 'common.edit' | translate }}\n                        </button>\n                    </td>\n                    <td class=\"align-middle\">\n                        <vdr-dropdown>\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                                {{ 'common.actions' | translate }}\n                                <clr-icon shape=\"caret down\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                <button\n                                    class=\"button\"\n                                    vdrDropdownItem\n                                    (click)=\"delete(zone.id)\"\n                                    [disabled]=\"!(['DeleteSettings', 'DeleteZone'] | hasPermission)\"\n                                >\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                    {{ 'common.delete' | translate }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"zone-members\" [class.expanded]=\"activeZone$ | async\">\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\n            <vdr-zone-member-list\n                [members]=\"activeZone.members\"\n                [selectedMemberIds]=\"selectedMemberIds\"\n                (selectionChange)=\"selectedMemberIds = $event\"\n            >\n                <div *vdrZoneMemberListHeader>\n                    <div class=\"flex\">\n                        <div class=\"header-title-row\">\n                            {{ activeZone.name }} ({{ activeZone.members.length }})\n                        </div>\n                        <div class=\"flex-spacer\"></div>\n                        <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\n                            <clr-icon shape=\"close\"></clr-icon>\n                        </button>\n                    </div>\n                    <div class=\"controls\">\n                        <vdr-dropdown>\n                            <button\n                                type=\"button\"\n                                class=\"btn btn-secondary btn-sm\"\n                                vdrDropdownTrigger\n                                [disabled]=\"selectedMemberIds.length === 0\"\n                            >\n                                {{ 'common.with-selected' | translate: { count: selectedMemberIds.length } }}\n                                <clr-icon shape=\"caret down\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                <button\n                                    type=\"button\"\n                                    class=\"delete-button\"\n                                    (click)=\"removeFromZone(activeZone, selectedMemberIds)\"\n                                    vdrDropdownItem\n                                    [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\n                                >\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                    {{ 'settings.remove-from-zone' | translate }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                        <button class=\"btn btn-secondary btn-sm\" (click)=\"addToZone(activeZone)\">\n                            {{ 'settings.add-countries-to-zone' | translate: { zoneName: activeZone.name } }}\n                        </button>\n                    </div>\n                </div>\n                <div *vdrZoneMemberControls=\"let member = member\">\n                    <vdr-dropdown>\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                            {{ 'common.actions' | translate }}\n                            <clr-icon shape=\"caret down\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <a\n                                type=\"button\"\n                                [routerLink]=\"['/settings', 'countries', member.id]\"\n                                vdrDropdownItem\n                            >\n                                <clr-icon shape=\"edit\"></clr-icon>\n                                {{ 'common.edit' | translate }}\n                            </a>\n                            <button\n                                type=\"button\"\n                                class=\"delete-button\"\n                                (click)=\"removeFromZone(activeZone, [member.id])\"\n                                vdrDropdownItem\n                                [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'settings.remove-from-zone' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-zone-member-list>\n        </ng-container>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetZones,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\n\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-zone-list',\n    templateUrl: './zone-list.component.html',\n    styleUrls: ['./zone-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneListComponent implements OnInit {\n    activeZone$: Observable<GetZones.Zones | undefined>;\n    zones$: Observable<GetZones.Zones[]>;\n    members$: Observable<GetZones.Members[]>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    selectedMemberIds: string[] = [];\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private serverConfigService: ServerConfigService,\n    ) {}\n\n    ngOnInit(): void {\n        const zonesQueryRef = this.dataService.settings.getZones().ref;\n        this.zones$ = zonesQueryRef.valueChanges.pipe(map(data => data.data.zones));\n        const activeZoneId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n            tap(() => (this.selectedMemberIds = [])),\n        );\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\n            map(([zones, activeZoneId]) => {\n                if (activeZoneId) {\n                    return zones.find(z => z.id === activeZoneId);\n                }\n            }),\n        );\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => zonesQueryRef.refetch()));\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    create() {\n        this.modalService\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.settings.createZone({ ...result, memberIds: [] }) : EMPTY,\n                ),\n                // refresh list\n                switchMap(() => this.dataService.settings.getZones().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Zone',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    delete(zoneId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-zone'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\n\n                switchMap(result => {\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\n                        // refresh list\n                        return this.dataService.settings\n                            .getZones()\n                            .mapSingle(() => ({ errorMessage: false }));\n                    } else {\n                        return of({ errorMessage: result.deleteZone.message });\n                    }\n                }),\n            )\n            .subscribe(\n                result => {\n                    if (typeof result.errorMessage === 'string') {\n                        this.notificationService.error(result.errorMessage);\n                    } else {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'Zone',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    update(zone: GetZones.Zones) {\n        this.modalService\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.settings.updateZone({ id: zone.id, ...result }) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Zone',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    closeMembers() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    addToZone(zone: GetZones.Zones) {\n        this.modalService\n            .fromComponent(AddCountryToZoneDialogComponent, {\n                locals: {\n                    zoneName: zone.name,\n                    currentMembers: zone.members,\n                },\n                size: 'md',\n            })\n            .pipe(\n                switchMap(memberIds =>\n                    memberIds\n                        ? this.dataService.settings\n                              .addMembersToZone(zone.id, memberIds)\n                              .pipe(mapTo(memberIds))\n                        : EMPTY,\n                ),\n            )\n            .subscribe({\n                next: result => {\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\n                        countryCount: result.length,\n                        zoneName: zone.name,\n                    });\n                },\n                error: err => {\n                    this.notificationService.error(err);\n                },\n            });\n    }\n\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\n            complete: () => {\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\n                    countryCount: memberIds.length,\n                    zoneName: zone.name,\n                });\n            },\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Administrator, Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Administrator' as 'Administrator',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                emailAddress: '',\n                firstName: '',\n                lastName: '',\n                user: { roles: [] } as any,\n            },\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Channel',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                token: '',\n                pricesIncludeTax: false,\n                currencyCode: CurrencyCode.USD,\n                defaultLanguageCode: getDefaultUiLanguage(),\n                defaultShippingZone: {} as any,\n                defaultTaxZone: {} as any,\n            },\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Country } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Country',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                name: '',\n                enabled: false,\n                translations: [],\n            },\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the global settings.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\n            {} as any,\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { PaymentMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'PaymentMethod',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                code: '',\n                description: '',\n                enabled: true,\n                checker: undefined as any,\n                handler: undefined as any,\n            },\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Administrator, Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Administrator' as 'Administrator',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                emailAddress: '',\n                firstName: '',\n                lastName: '',\n                user: { roles: [] } as any,\n            },\n            id =>\n                dataService.administrator\n                    .getActiveAdministrator()\n                    .mapStream(data => data.activeAdministrator),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Role' as 'Role',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                description: '',\n                permissions: [],\n                channels: [],\n            },\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ShippingMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'ShippingMethod',\n                createdAt: '',\n                updatedAt: '',\n                id: '',\n                code: '',\n                name: '',\n                description: '',\n                fulfillmentHandlerCode: undefined as any,\n                checker: undefined as any,\n                calculator: undefined as any,\n                translations: [],\n            },\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'TaxCategory',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                isDefault: false,\n            },\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'TaxRate',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                value: 0,\n                enabled: true,\n                category: {} as any,\n                zone: {} as any,\n                customerGroup: null,\n            },\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Administrator,\n    CanDeactivateDetailGuard,\n    Channel,\n    Country,\n    createResolveData,\n    detailBreadcrumb,\n    Role,\n    ShippingMethod,\n    TaxCategory,\n    TaxRate,\n} from '@vendure/admin-ui/core';\n\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\nimport { ChannelResolver } from './providers/routing/channel-resolver';\nimport { CountryResolver } from './providers/routing/country-resolver';\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\nimport { ProfileResolver } from './providers/routing/profile-resolver';\nimport { RoleResolver } from './providers/routing/role-resolver';\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\n\nexport const settingsRoutes: Route[] = [\n    {\n        path: 'profile',\n        component: ProfileComponent,\n        resolve: createResolveData(ProfileResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: _('breadcrumb.profile'),\n        },\n    },\n    {\n        path: 'administrators',\n        component: AdministratorListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.administrators'),\n        },\n    },\n    {\n        path: 'administrators/:id',\n        component: AdminDetailComponent,\n        resolve: createResolveData(AdministratorResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: administratorBreadcrumb },\n    },\n    {\n        path: 'channels',\n        component: ChannelListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.channels'),\n        },\n    },\n    {\n        path: 'channels/:id',\n        component: ChannelDetailComponent,\n        resolve: createResolveData(ChannelResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: channelBreadcrumb },\n    },\n    {\n        path: 'roles',\n        component: RoleListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.roles'),\n        },\n    },\n    {\n        path: 'roles/:id',\n        component: RoleDetailComponent,\n        resolve: createResolveData(RoleResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: roleBreadcrumb },\n    },\n    {\n        path: 'tax-categories',\n        component: TaxCategoryListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.tax-categories'),\n        },\n    },\n    {\n        path: 'tax-categories/:id',\n        component: TaxCategoryDetailComponent,\n        resolve: createResolveData(TaxCategoryResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: taxCategoryBreadcrumb,\n        },\n    },\n    {\n        path: 'tax-rates',\n        component: TaxRateListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.tax-rates'),\n        },\n    },\n    {\n        path: 'tax-rates/:id',\n        component: TaxRateDetailComponent,\n        resolve: createResolveData(TaxRateResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: taxRateBreadcrumb,\n        },\n    },\n    {\n        path: 'countries',\n        component: CountryListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.countries'),\n        },\n    },\n    {\n        path: 'countries/:id',\n        component: CountryDetailComponent,\n        resolve: createResolveData(CountryResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: countryBreadcrumb,\n        },\n    },\n    {\n        path: 'zones',\n        component: ZoneListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.zones'),\n        },\n    },\n    {\n        path: 'shipping-methods',\n        component: ShippingMethodListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.shipping-methods'),\n        },\n    },\n    {\n        path: 'shipping-methods/:id',\n        component: ShippingMethodDetailComponent,\n        resolve: createResolveData(ShippingMethodResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: shippingMethodBreadcrumb,\n        },\n    },\n    {\n        path: 'payment-methods',\n        component: PaymentMethodListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.payment-methods'),\n        },\n    },\n    {\n        path: 'payment-methods/:id',\n        component: PaymentMethodDetailComponent,\n        resolve: createResolveData(PaymentMethodResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: paymentMethodBreadcrumb,\n        },\n    },\n    {\n        path: 'global-settings',\n        component: GlobalSettingsComponent,\n        resolve: createResolveData(GlobalSettingsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: _('breadcrumb.global-settings'),\n        },\n    },\n];\n\nexport function administratorBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Administrator>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.administrators',\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\n        route: 'administrators',\n    });\n}\n\nexport function channelBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Channel>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.channels',\n        getName: channel => channel.code,\n        route: 'channels',\n    });\n}\n\nexport function roleBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Role>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.roles',\n        getName: role => role.description,\n        route: 'roles',\n    });\n}\n\nexport function taxCategoryBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<TaxCategory.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.tax-categories',\n        getName: category => category.name,\n        route: 'tax-categories',\n    });\n}\n\nexport function taxRateBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<TaxRate.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.tax-rates',\n        getName: category => category.name,\n        route: 'tax-rates',\n    });\n}\n\nexport function countryBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Country.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.countries',\n        getName: promotion => promotion.name,\n        route: 'countries',\n    });\n}\n\nexport function shippingMethodBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ShippingMethod.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.shipping-methods',\n        getName: method => method.name,\n        route: 'shipping-methods',\n    });\n}\n\nexport function paymentMethodBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ShippingMethod.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.payment-methods',\n        getName: method => method.code,\n        route: 'payment-methods',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\nimport { settingsRoutes } from './settings.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\n    declarations: [\n        TaxCategoryListComponent,\n        TaxCategoryDetailComponent,\n        AdministratorListComponent,\n        RoleListComponent,\n        RoleDetailComponent,\n        AdminDetailComponent,\n        PermissionGridComponent,\n        CountryListComponent,\n        CountryDetailComponent,\n        TaxRateListComponent,\n        TaxRateDetailComponent,\n        ChannelListComponent,\n        ChannelDetailComponent,\n        ShippingMethodListComponent,\n        ShippingMethodDetailComponent,\n        PaymentMethodListComponent,\n        PaymentMethodDetailComponent,\n        GlobalSettingsComponent,\n        TestOrderBuilderComponent,\n        TestAddressFormComponent,\n        ShippingMethodTestResultComponent,\n        ShippingEligibilityTestResultComponent,\n        ZoneListComponent,\n        AddCountryToZoneDialogComponent,\n        ZoneMemberListComponent,\n        ZoneMemberListHeaderDirective,\n        ZoneMemberControlsDirective,\n        ZoneDetailDialogComponent,\n        ProfileComponent,\n    ],\n})\nexport class SettingsModule {}\n"]}
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { currentChannelIsNotDefault, DataService, DeletionResult, getChannelCodeFromUserStatus, isMultiChannel, ModalService, NotificationService, Permission, } from '@vendure/admin-ui/core';
import { unique } from '@vendure/common/lib/unique';
import { EMPTY, of } from 'rxjs';
import { map, mapTo, switchMap } from 'rxjs/operators';
import { AssignToChannelDialogComponent } from '../assign-to-channel-dialog/assign-to-channel-dialog.component';
const ɵ0 = userPermissions => userPermissions.includes(Permission.DeleteFacet) ||
    userPermissions.includes(Permission.DeleteCatalog), ɵ1 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    function showModalAndDelete(facetIds, message) {
        return modalService
            .dialog({
            title: _('catalog.confirm-bulk-delete-facets'),
            translationVars: {
                count: selection.length,
            },
            size: message ? 'lg' : 'md',
            body: message,
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                {
                    type: 'danger',
                    label: message ? _('common.force-delete') : _('common.delete'),
                    returnValue: true,
                },
            ],
        })
            .pipe(switchMap(res => res
            ? dataService.facet
                .deleteFacets(facetIds, !!message)
                .pipe(map(res2 => res2.deleteFacets))
            : of([])));
    }
    showModalAndDelete(unique(selection.map(f => f.id)))
        .pipe(switchMap(result => {
        var _a;
        let deletedCount = 0;
        const errors = [];
        const errorIds = [];
        let i = 0;
        for (const item of result) {
            if (item.result === DeletionResult.DELETED) {
                deletedCount++;
            }
            else if (item.message) {
                errors.push(item.message);
                errorIds.push((_a = selection[i]) === null || _a === void 0 ? void 0 : _a.id);
            }
            i++;
        }
        if (0 < errorIds.length) {
            return showModalAndDelete(errorIds, errors.join('\n')).pipe(map(result2 => {
                const deletedCount2 = result2.filter(r => r.result === DeletionResult.DELETED).length;
                return deletedCount + deletedCount2;
            }));
        }
        else {
            return of(deletedCount);
        }
    }))
        .subscribe(deletedCount => {
        if (deletedCount) {
            hostComponent.refresh();
            clearSelection();
            notificationService.success(_('catalog.notify-bulk-delete-facets-success'), {
                count: deletedCount,
            });
        }
    });
};
export const deleteFacetsBulkAction = {
    location: 'facet-list',
    label: _('common.delete'),
    icon: 'trash',
    iconClass: 'is-danger',
    requiresPermission: ɵ0,
    onClick: ɵ1,
};
const ɵ2 = userPermissions => userPermissions.includes(Permission.UpdateFacet) ||
    userPermissions.includes(Permission.UpdateCatalog), ɵ3 = ({ injector }) => isMultiChannel(injector.get(DataService)), ɵ4 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    modalService
        .fromComponent(AssignToChannelDialogComponent, {
        size: 'md',
        locals: {},
    })
        .pipe(switchMap(result => {
        if (result) {
            return dataService.facet
                .assignFacetsToChannel({
                facetIds: selection.map(f => f.id),
                channelId: result.id,
            })
                .pipe(mapTo(result));
        }
        else {
            return EMPTY;
        }
    }))
        .subscribe(result => {
        notificationService.success(_('catalog.assign-facets-to-channel-success'), {
            count: selection.length,
            channelCode: result.code,
        });
        clearSelection();
    });
};
export const assignFacetsToChannelBulkAction = {
    location: 'facet-list',
    label: _('catalog.assign-to-channel'),
    icon: 'layers',
    requiresPermission: ɵ2,
    isVisible: ɵ3,
    onClick: ɵ4,
};
const ɵ5 = ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)), ɵ6 = userPermissions => userPermissions.includes(Permission.UpdateFacet) ||
    userPermissions.includes(Permission.UpdateCatalog), ɵ7 = ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)), ɵ8 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    const activeChannelId$ = dataService.client
        .userStatus()
        .mapSingle(({ userStatus }) => userStatus.activeChannelId);
    function showModalAndDelete(facetIds, message) {
        return modalService
            .dialog({
            title: _('catalog.remove-from-channel'),
            translationVars: {
                count: selection.length,
            },
            size: message ? 'lg' : 'md',
            body: message,
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                {
                    type: 'danger',
                    label: message ? _('common.force-remove') : _('common.remove'),
                    returnValue: true,
                },
            ],
        })
            .pipe(switchMap(res => res
            ? activeChannelId$.pipe(switchMap(activeChannelId => activeChannelId
                ? dataService.facet.removeFacetsFromChannel({
                    channelId: activeChannelId,
                    facetIds,
                    force: !!message,
                })
                : EMPTY), map(res2 => res2.removeFacetsFromChannel))
            : EMPTY));
    }
    showModalAndDelete(unique(selection.map(f => f.id)))
        .pipe(switchMap(result => {
        var _a;
        let removedCount = selection.length;
        const errors = [];
        const errorIds = [];
        let i = 0;
        for (const item of result) {
            if (item.__typename === 'FacetInUseError') {
                errors.push(item.message);
                errorIds.push((_a = selection[i]) === null || _a === void 0 ? void 0 : _a.id);
                removedCount--;
            }
            i++;
        }
        if (0 < errorIds.length) {
            return showModalAndDelete(errorIds, errors.join('\n')).pipe(map(result2 => {
                const notRemovedCount = result2.filter(r => r.__typename === 'FacetInUseError').length;
                return selection.length - notRemovedCount;
            }));
        }
        else {
            return of(removedCount);
        }
    }), switchMap(removedCount => removedCount
        ? getChannelCodeFromUserStatus(dataService).then(({ channelCode }) => ({
            channelCode,
            removedCount,
        }))
        : EMPTY))
        .subscribe(({ removedCount, channelCode }) => {
        if (removedCount) {
            hostComponent.refresh();
            clearSelection();
            notificationService.success(_('catalog.notify-remove-facets-from-channel-success'), {
                count: removedCount,
                channelCode,
            });
        }
    });
};
export const removeFacetsFromChannelBulkAction = {
    location: 'facet-list',
    label: _('catalog.remove-from-channel'),
    getTranslationVars: ɵ5,
    icon: 'layers',
    iconClass: 'is-warning',
    requiresPermission: ɵ6,
    isVisible: ɵ7,
    onClick: ɵ8,
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8 };
//# sourceMappingURL=data:application/json;base64,
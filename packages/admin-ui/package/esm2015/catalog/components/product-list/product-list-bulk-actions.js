import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { currentChannelIsNotDefault, DataService, DeletionResult, getChannelCodeFromUserStatus, isMultiChannel, ModalService, NotificationService, Permission, } from '@vendure/admin-ui/core';
import { unique } from '@vendure/common/lib/unique';
import { EMPTY, from, of } from 'rxjs';
import { mapTo, switchMap } from 'rxjs/operators';
import { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';
import { BulkAddFacetValuesDialogComponent } from '../bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';
const ɵ0 = userPermissions => userPermissions.includes(Permission.DeleteProduct) ||
    userPermissions.includes(Permission.DeleteCatalog), ɵ1 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    modalService
        .dialog({
        title: _('catalog.confirm-bulk-delete-products'),
        translationVars: {
            count: selection.length,
        },
        buttons: [
            { type: 'secondary', label: _('common.cancel') },
            { type: 'danger', label: _('common.delete'), returnValue: true },
        ],
    })
        .pipe(switchMap(response => response
        ? dataService.product.deleteProducts(unique(selection.map(p => p.productId)))
        : EMPTY))
        .subscribe(result => {
        let deleted = 0;
        const errors = [];
        for (const item of result.deleteProducts) {
            if (item.result === DeletionResult.DELETED) {
                deleted++;
            }
            else if (item.message) {
                errors.push(item.message);
            }
        }
        if (0 < deleted) {
            notificationService.success(_('catalog.notify-bulk-delete-products-success'), {
                count: deleted,
            });
        }
        if (0 < errors.length) {
            notificationService.error(errors.join('\n'));
        }
        hostComponent.refresh();
        clearSelection();
    });
};
export const deleteProductsBulkAction = {
    location: 'product-list',
    label: _('common.delete'),
    icon: 'trash',
    iconClass: 'is-danger',
    requiresPermission: ɵ0,
    onClick: ɵ1,
};
const ɵ2 = userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
    userPermissions.includes(Permission.UpdateProduct), ɵ3 = ({ injector }) => isMultiChannel(injector.get(DataService)), ɵ4 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    modalService
        .fromComponent(AssignProductsToChannelDialogComponent, {
        size: 'lg',
        locals: {
            productIds: unique(selection.map(p => p.productId)),
            currentChannelIds: [],
        },
    })
        .subscribe(result => {
        if (result) {
            clearSelection();
        }
    });
};
export const assignProductsToChannelBulkAction = {
    location: 'product-list',
    label: _('catalog.assign-to-channel'),
    icon: 'layers',
    requiresPermission: ɵ2,
    isVisible: ɵ3,
    onClick: ɵ4,
};
const ɵ5 = userPermissions => userPermissions.includes(Permission.UpdateChannel) ||
    userPermissions.includes(Permission.UpdateProduct), ɵ6 = ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)), ɵ7 = ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)), ɵ8 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    const activeChannelId$ = dataService.client
        .userStatus()
        .mapSingle(({ userStatus }) => userStatus.activeChannelId);
    from(getChannelCodeFromUserStatus(injector.get(DataService)))
        .pipe(switchMap(({ channelCode }) => modalService.dialog({
        title: _('catalog.remove-from-channel'),
        translationVars: {
            channelCode,
        },
        buttons: [
            { type: 'secondary', label: _('common.cancel') },
            {
                type: 'danger',
                label: _('common.remove'),
                returnValue: true,
            },
        ],
    })), switchMap(res => res
        ? activeChannelId$.pipe(switchMap(activeChannelId => activeChannelId
            ? dataService.product.removeProductsFromChannel({
                channelId: activeChannelId,
                productIds: selection.map(p => p.productId),
            })
            : EMPTY), mapTo(true))
        : of(false)))
        .subscribe(removed => {
        if (removed) {
            clearSelection();
            notificationService.success(_('common.notify-remove-products-from-channel-success'), {
                count: selection.length,
            });
            setTimeout(() => hostComponent.refresh(), 1000);
        }
    });
};
export const removeProductsFromChannelBulkAction = {
    location: 'product-list',
    label: _('catalog.remove-from-channel'),
    requiresPermission: ɵ5,
    getTranslationVars: ɵ6,
    icon: 'layers',
    iconClass: 'is-warning',
    isVisible: ɵ7,
    onClick: ɵ8,
};
const ɵ9 = userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
    userPermissions.includes(Permission.UpdateProduct), ɵ10 = ({ injector, selection, hostComponent, clearSelection }) => {
    const modalService = injector.get(ModalService);
    const dataService = injector.get(DataService);
    const notificationService = injector.get(NotificationService);
    const mode = hostComponent.groupByProduct ? 'product' : 'variant';
    const ids = mode === 'product'
        ? unique(selection.map(p => p.productId))
        : unique(selection.map(p => p.productVariantId));
    return dataService.facet
        .getAllFacets()
        .mapSingle(data => data.facets.items)
        .pipe(switchMap(facets => modalService.fromComponent(BulkAddFacetValuesDialogComponent, {
        size: 'xl',
        locals: {
            facets,
            mode,
            ids,
        },
    })))
        .subscribe(result => {
        if (result) {
            notificationService.success(_('common.notify-bulk-update-success'), {
                count: selection.length,
                entity: mode === 'product' ? 'Products' : 'ProductVariants',
            });
            clearSelection();
        }
    });
};
export const assignFacetValuesToProductsBulkAction = {
    location: 'product-list',
    label: _('catalog.edit-facet-values'),
    icon: 'tag',
    requiresPermission: ɵ9,
    onClick: ɵ10,
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10 };
//# sourceMappingURL=data:application/json;base64,
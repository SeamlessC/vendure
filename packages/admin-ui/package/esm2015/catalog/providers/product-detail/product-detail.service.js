import { Injectable } from '@angular/core';
import { DataService, DeletionResult, findTranslation, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { forkJoin, of, throwError } from 'rxjs';
import { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';
import { replaceLast } from './replace-last';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
/**
 * Handles the logic for making the API calls to perform CRUD operations on a Product and its related
 * entities. This logic was extracted out of the component because it became too large and hard to follow.
 */
export class ProductDetailService {
    constructor(dataService) {
        this.dataService = dataService;
    }
    getFacets() {
        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);
    }
    getTaxCategories() {
        return this.dataService.settings
            .getTaxCategories()
            .mapSingle(data => data.taxCategories)
            .pipe(shareReplay(1));
    }
    createProductWithVariants(input, createVariantsConfig, languageCode) {
        const createProduct$ = this.dataService.product.createProduct(input);
        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);
        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);
        return forkJoin(createProduct$, createOptionGroups$).pipe(mergeMap(([{ createProduct }, optionGroups]) => {
            const addOptionsToProduct$ = optionGroups.length
                ? forkJoin(optionGroups.map(optionGroup => {
                    return this.dataService.product.addOptionGroupToProduct({
                        productId: createProduct.id,
                        optionGroupId: optionGroup.id,
                    });
                }))
                : of([]);
            return addOptionsToProduct$.pipe(map(() => {
                return { createProduct, optionGroups };
            }));
        }), mergeMap(({ createProduct, optionGroups }) => {
            const variants = createVariantsConfig.variants.map(v => {
                const optionIds = optionGroups.length
                    ? v.optionValues.map((optionName, index) => {
                        const option = optionGroups[index].options.find(o => o.name === optionName);
                        if (!option) {
                            throw new Error(`Could not find a matching ProductOption "${optionName}" when creating variant`);
                        }
                        return option.id;
                    })
                    : [];
                return Object.assign(Object.assign({}, v), { optionIds });
            });
            const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);
            return this.createProductVariants(createProduct, variants, options, languageCode);
        }));
    }
    createProductOptionGroups(groups, languageCode) {
        return groups.length
            ? forkJoin(groups.map(c => {
                return this.dataService.product
                    .createProductOptionGroups({
                    code: normalizeString(c.name, '-'),
                    translations: [{ languageCode, name: c.name }],
                    options: c.values.map(v => ({
                        code: normalizeString(v, '-'),
                        translations: [{ languageCode, name: v }],
                    })),
                })
                    .pipe(map(data => data.createProductOptionGroup));
            }))
            : of([]);
    }
    createProductVariants(product, variantData, options, languageCode) {
        const variants = variantData.map(v => {
            const name = options.length
                ? `${product.name} ${v.optionIds
                    .map(id => options.find(o => o.id === id))
                    .filter(notNullOrUndefined)
                    .map(o => o.name)
                    .join(' ')}`
                : product.name;
            return {
                productId: product.id,
                price: v.price,
                sku: v.sku,
                stockOnHand: v.stock,
                translations: [
                    {
                        languageCode,
                        name,
                    },
                ],
                optionIds: v.optionIds,
            };
        });
        return this.dataService.product.createProductVariants(variants).pipe(map(({ createProductVariants }) => ({
            createProductVariants,
            productId: product.id,
        })));
    }
    updateProduct(updateOptions) {
        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;
        const updateOperations = [];
        const updateVariantsInput = variantsInput || [];
        const variants$ = autoUpdate
            ? this.dataService.product
                .getProductVariants({}, product.id)
                .mapSingle(({ productVariants }) => productVariants.items)
            : of([]);
        return variants$.pipe(mergeMap(variants => {
            var _a, _b, _c, _d;
            if (productInput) {
                updateOperations.push(this.dataService.product.updateProduct(productInput));
                const productOldName = (_b = (_a = findTranslation(product, languageCode)) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';
                const productNewName = (_c = findTranslation(productInput, languageCode)) === null || _c === void 0 ? void 0 : _c.name;
                if (productNewName && productOldName !== productNewName && autoUpdate) {
                    for (const variant of variants) {
                        const currentVariantName = ((_d = findTranslation(variant, languageCode)) === null || _d === void 0 ? void 0 : _d.name) || '';
                        let variantInput;
                        const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);
                        if (existingVariantInput) {
                            variantInput = existingVariantInput;
                        }
                        else {
                            variantInput = {
                                id: variant.id,
                                translations: [{ languageCode, name: currentVariantName }],
                            };
                            updateVariantsInput.push(variantInput);
                        }
                        const variantTranslation = findTranslation(variantInput, languageCode);
                        if (variantTranslation) {
                            if (variantTranslation.name) {
                                variantTranslation.name = replaceLast(variantTranslation.name, productOldName, productNewName);
                            }
                            else {
                                // The variant translation was falsy, which occurs
                                // when defining the product name for a new translation
                                // language that had not yet been defined.
                                variantTranslation.name = [
                                    productNewName,
                                    ...variant.options.map(o => o.name),
                                ].join(' ');
                            }
                        }
                    }
                }
            }
            if (updateVariantsInput.length) {
                updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));
            }
            return forkJoin(updateOperations);
        }));
    }
    updateProductOption(input, product, languageCode) {
        const variants$ = input.autoUpdate
            ? this.dataService.product
                .getProductVariants({}, product.id)
                .mapSingle(({ productVariants }) => productVariants.items)
            : of([]);
        return variants$.pipe(mergeMap(variants => {
            var _a, _b, _c;
            let updateProductVariantNames$ = of([]);
            if (input.autoUpdate) {
                // Update any ProductVariants' names which include the option name
                let oldOptionName;
                const newOptionName = (_a = findTranslation(input, languageCode)) === null || _a === void 0 ? void 0 : _a.name;
                if (!newOptionName) {
                    updateProductVariantNames$ = of([]);
                }
                const variantsToUpdate = [];
                for (const variant of variants) {
                    if (variant.options.map(o => o.id).includes(input.id)) {
                        if (!oldOptionName) {
                            oldOptionName = (_b = findTranslation(variant.options.find(o => o.id === input.id), languageCode)) === null || _b === void 0 ? void 0 : _b.name;
                        }
                        const variantName = ((_c = findTranslation(variant, languageCode)) === null || _c === void 0 ? void 0 : _c.name) || '';
                        if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {
                            variantsToUpdate.push({
                                id: variant.id,
                                translations: [
                                    {
                                        languageCode,
                                        name: replaceLast(variantName, oldOptionName, newOptionName),
                                    },
                                ],
                            });
                        }
                    }
                }
                if (variantsToUpdate.length) {
                    updateProductVariantNames$ =
                        this.dataService.product.updateProductVariants(variantsToUpdate);
                }
            }
            return this.dataService.product
                .updateProductOption(input)
                .pipe(mergeMap(() => updateProductVariantNames$));
        }));
    }
    deleteProductVariant(id, productId) {
        return this.dataService.product.deleteProductVariant(id).pipe(switchMap(result => {
            if (result.deleteProductVariant.result === DeletionResult.DELETED) {
                return this.dataService.product.getProduct(productId).single$;
            }
            else {
                return throwError(result.deleteProductVariant.message);
            }
        }));
    }
}
ProductDetailService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductDetailService_Factory() { return new ProductDetailService(i0.ɵɵinject(i1.DataService)); }, token: ProductDetailService, providedIn: "root" });
ProductDetailService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProductDetailService.ctorParameters = () => [
    { type: DataService }
];
//# sourceMappingURL=data:application/json;base64,
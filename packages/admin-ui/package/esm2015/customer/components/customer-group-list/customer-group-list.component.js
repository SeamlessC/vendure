import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { BaseListComponent, DataService, DeletionResult, ModalService, NotificationService, } from '@vendure/admin-ui/core';
import { BehaviorSubject, combineLatest, EMPTY, of } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, mapTo, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';
import { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';
export class CustomerGroupListComponent extends BaseListComponent {
    constructor(dataService, notificationService, modalService, route, router) {
        super(router, route);
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.route = route;
        this.router = router;
        this.searchTerm = new FormControl('');
        this.selectedCustomerIds = [];
        this.fetchGroupMembers$ = new BehaviorSubject({
            skip: 0,
            take: 0,
            filterTerm: '',
        });
        this.refreshActiveGroupMembers$ = new BehaviorSubject(undefined);
        super.setQueryFn((...args) => this.dataService.customer.getCustomerGroupList(...args).refetchOnChannelChange(), data => data.customerGroups, (skip, take) => ({
            options: {
                skip,
                take,
                filter: {
                    name: { contains: this.searchTerm.value },
                },
            },
        }));
    }
    ngOnInit() {
        super.ngOnInit();
        this.searchTerm.valueChanges
            .pipe(filter(value => 2 < value.length || value.length === 0), debounceTime(250), takeUntil(this.destroy$))
            .subscribe(() => this.refresh());
        const activeGroupId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged(), tap(() => (this.selectedCustomerIds = [])));
        this.listIsEmpty$ = this.items$.pipe(map(groups => groups.length === 0));
        this.activeGroup$ = combineLatest(this.items$, activeGroupId$).pipe(map(([groups, activeGroupId]) => {
            if (activeGroupId) {
                return groups.find(g => g.id === activeGroupId);
            }
        }), tap(val => (this.activeGroupId = val === null || val === void 0 ? void 0 : val.id)));
        const membersResult$ = combineLatest(this.activeGroup$, this.fetchGroupMembers$, this.refreshActiveGroupMembers$).pipe(switchMap(([activeGroup, { skip, take, filterTerm }]) => {
            if (activeGroup) {
                return this.dataService.customer
                    .getCustomerGroupWithCustomers(activeGroup.id, {
                    skip,
                    take,
                    filter: {
                        emailAddress: {
                            contains: filterTerm,
                        },
                    },
                })
                    .mapStream(res => { var _a; return (_a = res.customerGroup) === null || _a === void 0 ? void 0 : _a.customers; });
            }
            else {
                return of(undefined);
            }
        }));
        this.members$ = membersResult$.pipe(map(res => { var _a; return (_a = res === null || res === void 0 ? void 0 : res.items) !== null && _a !== void 0 ? _a : []; }));
        this.membersTotal$ = membersResult$.pipe(map(res => { var _a; return (_a = res === null || res === void 0 ? void 0 : res.totalItems) !== null && _a !== void 0 ? _a : 0; }));
    }
    create() {
        this.modalService
            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })
            .pipe(switchMap(result => result
            ? this.dataService.customer.createCustomerGroup(Object.assign(Object.assign({}, result), { customerIds: [] }))
            : EMPTY))
            .subscribe(() => {
            this.refresh();
            this.notificationService.success(_('common.notify-create-success'), {
                entity: 'CustomerGroup',
            });
        }, err => {
            this.notificationService.error(_('common.notify-create-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    delete(groupId) {
        this.modalService
            .dialog({
            title: _('customer.confirm-delete-customer-group'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY), switchMap(result => {
            if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {
                // refresh list
                return this.dataService.customer
                    .getCustomerGroupList()
                    .mapSingle(() => ({ errorMessage: false }));
            }
            else {
                return of({ errorMessage: result.deleteCustomerGroup.message });
            }
        }))
            .subscribe(result => {
            if (typeof result.errorMessage === 'string') {
                this.notificationService.error(result.errorMessage);
            }
            else {
                this.refresh();
                this.notificationService.success(_('common.notify-delete-success'), {
                    entity: 'CustomerGroup',
                });
            }
        }, err => {
            this.notificationService.error(_('common.notify-delete-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    update(group) {
        this.modalService
            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })
            .pipe(switchMap(result => result
            ? this.dataService.customer.updateCustomerGroup(Object.assign({ id: group.id }, result))
            : EMPTY))
            .subscribe(() => {
            this.refresh();
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'CustomerGroup',
            });
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    closeMembers() {
        const params = Object.assign({}, this.route.snapshot.params);
        delete params.contents;
        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });
    }
    addToGroup(group) {
        this.modalService
            .fromComponent(AddCustomerToGroupDialogComponent, {
            locals: {
                group,
                route: this.route,
            },
            size: 'md',
            verticalAlign: 'top',
        })
            .pipe(switchMap(customerIds => customerIds
            ? this.dataService.customer
                .addCustomersToGroup(group.id, customerIds)
                .pipe(mapTo(customerIds))
            : EMPTY))
            .subscribe({
            next: result => {
                this.notificationService.success(_(`customer.add-customers-to-group-success`), {
                    customerCount: result.length,
                    groupName: group.name,
                });
                this.refreshActiveGroupMembers$.next();
                this.selectedCustomerIds = [];
            },
        });
    }
    removeFromGroup(group, customerIds) {
        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({
            complete: () => {
                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {
                    customerCount: customerIds.length,
                    groupName: group.name,
                });
                this.refreshActiveGroupMembers$.next();
                this.selectedCustomerIds = [];
            },
        });
    }
}
CustomerGroupListComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-customer-group-list',
                template: "<vdr-action-bar>\n    <vdr-ab-left>\n        <input\n            type=\"text\"\n            name=\"emailSearchTerm\"\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'customer.search-by-group-name' | translate\"\n            class=\"search-input\"\n        />\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" (click)=\"create()\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'customer.create-new-customer-group' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"group-wrapper\">\n    <div class=\"group-list\">\n        <vdr-data-table\n            [class.expanded]=\"activeGroup$ | async\"\n            [items]=\"items$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        >\n            <ng-template let-group=\"item\">\n                <td class=\"left align-middle\" [class.active]=\"group.id === activeGroupId\">\n                    <vdr-entity-info [entity]=\"group\"></vdr-entity-info>\n                </td>\n                <td class=\"left align-middle\" [class.active]=\"group.id === activeGroupId\">\n                    <vdr-chip [colorFrom]=\"group.id\">{{ group.name }}</vdr-chip>\n                </td>\n                <td class=\"left align-middle\" [class.active]=\"group.id === activeGroupId\">\n                    <a\n                        class=\"btn btn-link btn-sm\"\n                        [routerLink]=\"['./', { contents: group.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <clr-icon shape=\"view-list\"></clr-icon>\n                        {{ 'customer.view-group-members' | translate }}\n                    </a>\n                </td>\n                <td class=\"right align-middle\" [class.active]=\"group.id === activeGroupId\">\n                    <button class=\"btn btn-link btn-sm\" (click)=\"update(group)\">\n                        <clr-icon shape=\"edit\"></clr-icon>\n                        {{ 'common.edit' | translate }}\n                    </button>\n                </td>\n                <td [class.active]=\"group.id === activeGroupId\" class=\"align-middle\">\n                    <vdr-dropdown>\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                            {{ 'common.actions' | translate }}\n                            <clr-icon shape=\"caret down\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"delete(group.id)\"\n                                [disabled]=\"!('DeleteCustomerGroup' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </td>\n            </ng-template>\n        </vdr-data-table>\n    </div>\n    <ng-template #emptyPlaceholder>\n        <vdr-empty-placeholder></vdr-empty-placeholder>\n    </ng-template>\n    <div class=\"group-members\" [class.expanded]=\"activeGroup$ | async\">\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\n            <div class=\"flex\">\n                <div class=\"header-title-row\">{{ activeGroup.name }} ({{ membersTotal$ | async }})</div>\n                <div class=\"flex-spacer\"></div>\n                <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\n                    <clr-icon shape=\"close\"></clr-icon>\n                </button>\n            </div>\n            <div class=\"controls\">\n                <vdr-dropdown>\n                    <button\n                        type=\"button\"\n                        class=\"btn btn-secondary btn-sm\"\n                        vdrDropdownTrigger\n                        [disabled]=\"selectedCustomerIds.length === 0\"\n                    >\n                        {{ 'common.with-selected' | translate: { count: selectedCustomerIds.length } }}\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                        <button\n                            type=\"button\"\n                            class=\"delete-button\"\n                            (click)=\"removeFromGroup(activeGroup, selectedCustomerIds)\"\n                            vdrDropdownItem\n                            [disabled]=\"!('UpdateCustomerGroup' | hasPermission)\"\n                        >\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'customer.remove-from-group' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"addToGroup(activeGroup)\">\n                    {{ 'customer.add-customers-to-group' | translate: { groupName: activeGroup.name } }}\n                </button>\n            </div>\n            <vdr-customer-group-member-list\n                [members]=\"members$ | async\"\n                [route]=\"route\"\n                [totalItems]=\"membersTotal$ | async\"\n                [selectedMemberIds]=\"selectedCustomerIds\"\n                (selectionChange)=\"selectedCustomerIds = $event\"\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n            ></vdr-customer-group-member-list>\n        </ng-container>\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".group-wrapper{display:flex;height:calc(100% - 50px)}.group-wrapper .group-list{flex:1;overflow:auto;margin-top:0}.group-wrapper .group-list .active{background-color:var(--clr-global-selection-color)}.group-wrapper .group-list.expanded{width:calc(100% - 40vw)}vdr-data-table ::ng-deep table{margin-top:0}.group-members{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.group-members.expanded{width:40vw;visibility:visible;opacity:1;padding-left:12px}.group-members .close-button{margin:0;background:none;border:none;cursor:pointer}.group-members ::ng-deep table.table{margin-top:0}.group-members ::ng-deep table.table th{top:0}.group-members .controls{display:flex;justify-content:space-between}vdr-empty-placeholder{flex:1}\n"]
            },] }
];
CustomerGroupListComponent.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService },
    { type: ModalService },
    { type: ActivatedRoute },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,
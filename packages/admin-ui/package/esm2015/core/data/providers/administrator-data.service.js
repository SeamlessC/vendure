import { CREATE_ADMINISTRATOR, CREATE_ROLE, DELETE_ADMINISTRATOR, DELETE_ROLE, GET_ACTIVE_ADMINISTRATOR, GET_ADMINISTRATOR, GET_ADMINISTRATORS, GET_ROLE, GET_ROLES, UPDATE_ACTIVE_ADMINISTRATOR, UPDATE_ADMINISTRATOR, UPDATE_ROLE, } from '../definitions/administrator-definitions';
export class AdministratorDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getAdministrators(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ADMINISTRATORS, {
            options: {
                take,
                skip,
            },
        });
    }
    getActiveAdministrator() {
        return this.baseDataService.query(GET_ACTIVE_ADMINISTRATOR, {});
    }
    getAdministrator(id) {
        return this.baseDataService.query(GET_ADMINISTRATOR, {
            id,
        });
    }
    createAdministrator(input) {
        return this.baseDataService.mutate(CREATE_ADMINISTRATOR, { input });
    }
    updateAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ADMINISTRATOR, { input });
    }
    updateActiveAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ACTIVE_ADMINISTRATOR, { input });
    }
    deleteAdministrator(id) {
        return this.baseDataService.mutate(DELETE_ADMINISTRATOR, { id });
    }
    getRoles(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ROLES, {
            options: {
                take,
                skip,
            },
        });
    }
    getRole(id) {
        return this.baseDataService.query(GET_ROLE, { id });
    }
    createRole(input) {
        return this.baseDataService.mutate(CREATE_ROLE, { input });
    }
    updateRole(input) {
        return this.baseDataService.mutate(UPDATE_ROLE, { input });
    }
    deleteRole(id) {
        return this.baseDataService.mutate(DELETE_ROLE, { id });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW5pc3RyYXRvci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2FkbWluaXN0cmF0b3ItZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCQSxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLFdBQVcsRUFDWCxvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLHdCQUF3QixFQUN4QixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUixTQUFTLEVBQ1QsMkJBQTJCLEVBQzNCLG9CQUFvQixFQUNwQixXQUFXLEdBQ2QsTUFBTSwwQ0FBMEMsQ0FBQztBQUlsRCxNQUFNLE9BQU8sd0JBQXdCO0lBQ2pDLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFeEQsaUJBQWlCLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDO1FBQ2pELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLGtCQUFrQixFQUNsQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxJQUFJO2dCQUNKLElBQUk7YUFDUDtTQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBK0Isd0JBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEcsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FDN0IsaUJBQWlCLEVBQ2pCO1lBQ0ksRUFBRTtTQUNMLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUErQjtRQUMvQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixvQkFBb0IsRUFDcEIsRUFBRSxLQUFLLEVBQUUsQ0FDWixDQUFDO0lBQ04sQ0FBQztJQUVELG1CQUFtQixDQUFDLEtBQStCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG9CQUFvQixFQUNwQixFQUFFLEtBQUssRUFBRSxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQseUJBQXlCLENBQUMsS0FBcUM7UUFDM0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMsMkJBQTJCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxFQUFVO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG9CQUFvQixFQUNwQixFQUFFLEVBQUUsRUFBRSxDQUNULENBQUM7SUFDTixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQWUsRUFBRSxFQUFFLE9BQWUsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFxQyxTQUFTLEVBQUU7WUFDN0UsT0FBTyxFQUFFO2dCQUNMLElBQUk7Z0JBQ0osSUFBSTthQUNQO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFVO1FBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBbUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQXNCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQTRDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFzQjtRQUM3QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUE0QyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFFRCxVQUFVLENBQUMsRUFBVTtRQUNqQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUE0QyxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZldGNoUG9saWN5IH0gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xuXG5pbXBvcnQge1xuICAgIENyZWF0ZUFkbWluaXN0cmF0b3IsXG4gICAgQ3JlYXRlQWRtaW5pc3RyYXRvcklucHV0LFxuICAgIENyZWF0ZVJvbGUsXG4gICAgQ3JlYXRlUm9sZUlucHV0LFxuICAgIERlbGV0ZUFkbWluaXN0cmF0b3IsXG4gICAgRGVsZXRlUm9sZSxcbiAgICBHZXRBY3RpdmVBZG1pbmlzdHJhdG9yLFxuICAgIEdldEFkbWluaXN0cmF0b3IsXG4gICAgR2V0QWRtaW5pc3RyYXRvcnMsXG4gICAgR2V0Um9sZSxcbiAgICBHZXRSb2xlcyxcbiAgICBVcGRhdGVBY3RpdmVBZG1pbmlzdHJhdG9yLFxuICAgIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCxcbiAgICBVcGRhdGVBZG1pbmlzdHJhdG9yLFxuICAgIFVwZGF0ZUFkbWluaXN0cmF0b3JJbnB1dCxcbiAgICBVcGRhdGVSb2xlLFxuICAgIFVwZGF0ZVJvbGVJbnB1dCxcbn0gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XG5pbXBvcnQge1xuICAgIENSRUFURV9BRE1JTklTVFJBVE9SLFxuICAgIENSRUFURV9ST0xFLFxuICAgIERFTEVURV9BRE1JTklTVFJBVE9SLFxuICAgIERFTEVURV9ST0xFLFxuICAgIEdFVF9BQ1RJVkVfQURNSU5JU1RSQVRPUixcbiAgICBHRVRfQURNSU5JU1RSQVRPUixcbiAgICBHRVRfQURNSU5JU1RSQVRPUlMsXG4gICAgR0VUX1JPTEUsXG4gICAgR0VUX1JPTEVTLFxuICAgIFVQREFURV9BQ1RJVkVfQURNSU5JU1RSQVRPUixcbiAgICBVUERBVEVfQURNSU5JU1RSQVRPUixcbiAgICBVUERBVEVfUk9MRSxcbn0gZnJvbSAnLi4vZGVmaW5pdGlvbnMvYWRtaW5pc3RyYXRvci1kZWZpbml0aW9ucyc7XG5cbmltcG9ydCB7IEJhc2VEYXRhU2VydmljZSB9IGZyb20gJy4vYmFzZS1kYXRhLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgQWRtaW5pc3RyYXRvckRhdGFTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxuXG4gICAgZ2V0QWRtaW5pc3RyYXRvcnModGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldEFkbWluaXN0cmF0b3JzLlF1ZXJ5LCBHZXRBZG1pbmlzdHJhdG9ycy5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX0FETUlOSVNUUkFUT1JTLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFrZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVBZG1pbmlzdHJhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWN0aXZlQWRtaW5pc3RyYXRvci5RdWVyeT4oR0VUX0FDVElWRV9BRE1JTklTVFJBVE9SLCB7fSk7XG4gICAgfVxuXG4gICAgZ2V0QWRtaW5pc3RyYXRvcihpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRBZG1pbmlzdHJhdG9yLlF1ZXJ5LCBHZXRBZG1pbmlzdHJhdG9yLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBHRVRfQURNSU5JU1RSQVRPUixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY3JlYXRlQWRtaW5pc3RyYXRvcihpbnB1dDogQ3JlYXRlQWRtaW5pc3RyYXRvcklucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q3JlYXRlQWRtaW5pc3RyYXRvci5NdXRhdGlvbiwgQ3JlYXRlQWRtaW5pc3RyYXRvci5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgQ1JFQVRFX0FETUlOSVNUUkFUT1IsXG4gICAgICAgICAgICB7IGlucHV0IH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlQWRtaW5pc3RyYXRvcihpbnB1dDogVXBkYXRlQWRtaW5pc3RyYXRvcklucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlQWRtaW5pc3RyYXRvci5NdXRhdGlvbiwgVXBkYXRlQWRtaW5pc3RyYXRvci5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgVVBEQVRFX0FETUlOSVNUUkFUT1IsXG4gICAgICAgICAgICB7IGlucHV0IH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvcihpbnB1dDogVXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvcklucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XG4gICAgICAgICAgICBVcGRhdGVBY3RpdmVBZG1pbmlzdHJhdG9yLk11dGF0aW9uLFxuICAgICAgICAgICAgVXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvci5WYXJpYWJsZXNcbiAgICAgICAgPihVUERBVEVfQUNUSVZFX0FETUlOSVNUUkFUT1IsIHsgaW5wdXQgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlQWRtaW5pc3RyYXRvcihpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8RGVsZXRlQWRtaW5pc3RyYXRvci5NdXRhdGlvbiwgRGVsZXRlQWRtaW5pc3RyYXRvci5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgREVMRVRFX0FETUlOSVNUUkFUT1IsXG4gICAgICAgICAgICB7IGlkIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0Um9sZXModGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFJvbGVzLlF1ZXJ5LCBHZXRSb2xlcy5WYXJpYWJsZXM+KEdFVF9ST0xFUywge1xuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHRha2UsXG4gICAgICAgICAgICAgICAgc2tpcCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFJvbGUoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0Um9sZS5RdWVyeSwgR2V0Um9sZS5WYXJpYWJsZXM+KEdFVF9ST0xFLCB7IGlkIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVJvbGUoaW5wdXQ6IENyZWF0ZVJvbGVJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZVJvbGUuTXV0YXRpb24sIENyZWF0ZVJvbGUuVmFyaWFibGVzPihDUkVBVEVfUk9MRSwgeyBpbnB1dCB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVSb2xlKGlucHV0OiBVcGRhdGVSb2xlSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVSb2xlLk11dGF0aW9uLCBVcGRhdGVSb2xlLlZhcmlhYmxlcz4oVVBEQVRFX1JPTEUsIHsgaW5wdXQgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlUm9sZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8RGVsZXRlUm9sZS5NdXRhdGlvbiwgRGVsZXRlUm9sZS5WYXJpYWJsZXM+KERFTEVURV9ST0xFLCB7IGlkIH0pO1xuICAgIH1cbn1cbiJdfQ==
import { pick } from '@vendure/common/lib/pick';
import { JobState, } from '../../common/generated-types';
import { ADD_MEMBERS_TO_ZONE, CANCEL_JOB, CREATE_CHANNEL, CREATE_COUNTRY, CREATE_PAYMENT_METHOD, CREATE_TAX_CATEGORY, CREATE_TAX_RATE, CREATE_ZONE, DELETE_CHANNEL, DELETE_COUNTRY, DELETE_PAYMENT_METHOD, DELETE_TAX_CATEGORY, DELETE_TAX_RATE, DELETE_ZONE, GET_ACTIVE_CHANNEL, GET_AVAILABLE_COUNTRIES, GET_CHANNEL, GET_CHANNELS, GET_COUNTRY, GET_COUNTRY_LIST, GET_GLOBAL_SETTINGS, GET_JOBS_BY_ID, GET_JOBS_LIST, GET_JOB_INFO, GET_JOB_QUEUE_LIST, GET_PAYMENT_METHOD, GET_PAYMENT_METHOD_LIST, GET_PAYMENT_METHOD_OPERATIONS, GET_TAX_CATEGORIES, GET_TAX_CATEGORY, GET_TAX_RATE, GET_TAX_RATE_LIST, GET_TAX_RATE_LIST_SIMPLE, GET_ZONES, REMOVE_MEMBERS_FROM_ZONE, UPDATE_CHANNEL, UPDATE_COUNTRY, UPDATE_GLOBAL_SETTINGS, UPDATE_PAYMENT_METHOD, UPDATE_TAX_CATEGORY, UPDATE_TAX_RATE, UPDATE_ZONE, } from '../definitions/settings-definitions';
export class SettingsDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getCountries(take = 10, skip = 0, filterTerm) {
        return this.baseDataService.query(GET_COUNTRY_LIST, {
            options: {
                take,
                skip,
                filter: {
                    name: filterTerm ? { contains: filterTerm } : null,
                },
            },
        });
    }
    getAvailableCountries() {
        return this.baseDataService.query(GET_AVAILABLE_COUNTRIES);
    }
    getCountry(id) {
        return this.baseDataService.query(GET_COUNTRY, { id });
    }
    createCountry(input) {
        return this.baseDataService.mutate(CREATE_COUNTRY, {
            input: pick(input, ['code', 'enabled', 'translations', 'customFields']),
        });
    }
    updateCountry(input) {
        return this.baseDataService.mutate(UPDATE_COUNTRY, {
            input: pick(input, ['id', 'code', 'enabled', 'translations', 'customFields']),
        });
    }
    deleteCountry(id) {
        return this.baseDataService.mutate(DELETE_COUNTRY, {
            id,
        });
    }
    getZones() {
        return this.baseDataService.query(GET_ZONES);
    }
    getZone(id) {
        return this.baseDataService.query(GET_ZONES, { id });
    }
    createZone(input) {
        return this.baseDataService.mutate(CREATE_ZONE, {
            input,
        });
    }
    updateZone(input) {
        return this.baseDataService.mutate(UPDATE_ZONE, {
            input,
        });
    }
    deleteZone(id) {
        return this.baseDataService.mutate(DELETE_ZONE, {
            id,
        });
    }
    addMembersToZone(zoneId, memberIds) {
        return this.baseDataService.mutate(ADD_MEMBERS_TO_ZONE, {
            zoneId,
            memberIds,
        });
    }
    removeMembersFromZone(zoneId, memberIds) {
        return this.baseDataService.mutate(REMOVE_MEMBERS_FROM_ZONE, {
            zoneId,
            memberIds,
        });
    }
    getTaxCategories() {
        return this.baseDataService.query(GET_TAX_CATEGORIES);
    }
    getTaxCategory(id) {
        return this.baseDataService.query(GET_TAX_CATEGORY, {
            id,
        });
    }
    createTaxCategory(input) {
        return this.baseDataService.mutate(CREATE_TAX_CATEGORY, {
            input,
        });
    }
    updateTaxCategory(input) {
        return this.baseDataService.mutate(UPDATE_TAX_CATEGORY, {
            input,
        });
    }
    deleteTaxCategory(id) {
        return this.baseDataService.mutate(DELETE_TAX_CATEGORY, {
            id,
        });
    }
    getTaxRates(take = 10, skip = 0, fetchPolicy) {
        return this.baseDataService.query(GET_TAX_RATE_LIST, {
            options: {
                take,
                skip,
            },
        }, fetchPolicy);
    }
    getTaxRatesSimple(take = 10, skip = 0, fetchPolicy) {
        return this.baseDataService.query(GET_TAX_RATE_LIST_SIMPLE, {
            options: {
                take,
                skip,
            },
        }, fetchPolicy);
    }
    getTaxRate(id) {
        return this.baseDataService.query(GET_TAX_RATE, {
            id,
        });
    }
    createTaxRate(input) {
        return this.baseDataService.mutate(CREATE_TAX_RATE, {
            input,
        });
    }
    updateTaxRate(input) {
        return this.baseDataService.mutate(UPDATE_TAX_RATE, {
            input,
        });
    }
    deleteTaxRate(id) {
        return this.baseDataService.mutate(DELETE_TAX_RATE, {
            id,
        });
    }
    getChannels() {
        return this.baseDataService.query(GET_CHANNELS);
    }
    getChannel(id) {
        return this.baseDataService.query(GET_CHANNEL, {
            id,
        });
    }
    getActiveChannel(fetchPolicy) {
        return this.baseDataService.query(GET_ACTIVE_CHANNEL, {}, fetchPolicy);
    }
    createChannel(input) {
        return this.baseDataService.mutate(CREATE_CHANNEL, {
            input,
        });
    }
    updateChannel(input) {
        return this.baseDataService.mutate(UPDATE_CHANNEL, {
            input,
        });
    }
    deleteChannel(id) {
        return this.baseDataService.mutate(DELETE_CHANNEL, {
            id,
        });
    }
    getPaymentMethods(take = 10, skip = 0) {
        return this.baseDataService.query(GET_PAYMENT_METHOD_LIST, {
            options: {
                skip,
                take,
            },
        });
    }
    getPaymentMethod(id) {
        return this.baseDataService.query(GET_PAYMENT_METHOD, {
            id,
        });
    }
    createPaymentMethod(input) {
        return this.baseDataService.mutate(CREATE_PAYMENT_METHOD, {
            input,
        });
    }
    updatePaymentMethod(input) {
        return this.baseDataService.mutate(UPDATE_PAYMENT_METHOD, {
            input,
        });
    }
    deletePaymentMethod(id, force) {
        return this.baseDataService.mutate(DELETE_PAYMENT_METHOD, {
            id,
            force,
        });
    }
    getPaymentMethodOperations() {
        return this.baseDataService.query(GET_PAYMENT_METHOD_OPERATIONS);
    }
    getGlobalSettings(fetchPolicy) {
        return this.baseDataService.query(GET_GLOBAL_SETTINGS, undefined, fetchPolicy);
    }
    updateGlobalSettings(input) {
        return this.baseDataService.mutate(UPDATE_GLOBAL_SETTINGS, {
            input,
        });
    }
    getJob(id) {
        return this.baseDataService.query(GET_JOB_INFO, { id });
    }
    pollJobs(ids) {
        return this.baseDataService.query(GET_JOBS_BY_ID, {
            ids,
        });
    }
    getAllJobs(options) {
        return this.baseDataService.query(GET_JOBS_LIST, {
            options,
        }, 'cache-first');
    }
    getJobQueues() {
        return this.baseDataService.query(GET_JOB_QUEUE_LIST);
    }
    getRunningJobs() {
        return this.baseDataService.query(GET_JOBS_LIST, {
            options: {
                filter: {
                    state: {
                        eq: JobState.RUNNING,
                    },
                },
            },
        });
    }
    cancelJob(id) {
        return this.baseDataService.mutate(CANCEL_JOB, {
            id,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9kYXRhL3Byb3ZpZGVycy9zZXR0aW5ncy1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhELE9BQU8sRUEyQ0gsUUFBUSxHQWdCWCxNQUFNLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sRUFDSCxtQkFBbUIsRUFDbkIsVUFBVSxFQUNWLGNBQWMsRUFDZCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsV0FBVyxFQUNYLGNBQWMsRUFDZCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsV0FBVyxFQUNYLGtCQUFrQixFQUNsQix1QkFBdUIsRUFDdkIsV0FBVyxFQUNYLFlBQVksRUFDWixXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixjQUFjLEVBQ2QsYUFBYSxFQUNiLFlBQVksRUFDWixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLHVCQUF1QixFQUN2Qiw2QkFBNkIsRUFDN0Isa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLHdCQUF3QixFQUN4QixTQUFTLEVBQ1Qsd0JBQXdCLEVBQ3hCLGNBQWMsRUFDZCxjQUFjLEVBQ2Qsc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixtQkFBbUIsRUFDbkIsZUFBZSxFQUNmLFdBQVcsR0FDZCxNQUFNLHFDQUFxQyxDQUFDO0FBSTdDLE1BQU0sT0FBTyxtQkFBbUI7SUFDNUIsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQUV4RCxZQUFZLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDLEVBQUUs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QUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEI7WUFDSSxLQUFLO1NBQ1IsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVO1FBQ2IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBeUMsWUFBWSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNwRyxDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBMkMsY0FBYyxFQUFFO1lBQ3hGLEdBQUc7U0FDTixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQXdCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLGFBQWEsRUFDYjtZQUNJLE9BQU87U0FDVixFQUNELGFBQWEsQ0FDaEIsQ0FBQztJQUNOLENBQUM7SUFFRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBd0Isa0JBQWtCLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQXlDLGFBQWEsRUFBRTtZQUNyRixPQUFPLEVBQUU7Z0JBQ0wsTUFBTSxFQUFFO29CQUNKLEtBQUssRUFBRTt3QkFDSCxFQUFFLEVBQUUsUUFBUSxDQUFDLE9BQU87cUJBQ3ZCO2lCQUNKO2FBQ0o7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsU0FBUyxDQUFDLEVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBMEMsVUFBVSxFQUFFO1lBQ3BGLEVBQUU7U0FDTCxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGZXRjaFBvbGljeSwgV2F0Y2hRdWVyeUZldGNoUG9saWN5IH0gZnJvbSAnQGFwb2xsby9jbGllbnQvY29yZSc7XG5pbXBvcnQgeyBwaWNrIH0gZnJvbSAnQHZlbmR1cmUvY29tbW9uL2xpYi9waWNrJztcblxuaW1wb3J0IHtcbiAgICBBZGRNZW1iZXJzVG9ab25lLFxuICAgIENhbmNlbEpvYixcbiAgICBDcmVhdGVDaGFubmVsLFxuICAgIENyZWF0ZUNoYW5uZWxJbnB1dCxcbiAgICBDcmVhdGVDb3VudHJ5LFxuICAgIENyZWF0ZUNvdW50cnlJbnB1dCxcbiAgICBDcmVhdGVQYXltZW50TWV0aG9kLFxuICAgIENyZWF0ZVBheW1lbnRNZXRob2RJbnB1dCxcbiAgICBDcmVhdGVUYXhDYXRlZ29yeSxcbiAgICBDcmVhdGVUYXhDYXRlZ29yeUlucHV0LFxuICAgIENyZWF0ZVRheFJhdGUsXG4gICAgQ3JlYXRlVGF4UmF0ZUlucHV0LFxuICAgIENyZWF0ZVpvbmUsXG4gICAgQ3JlYXRlWm9uZUlucHV0LFxuICAgIERlbGV0ZUNoYW5uZWwsXG4gICAgRGVsZXRlQ291bnRyeSxcbiAgICBEZWxldGVQYXltZW50TWV0aG9kLFxuICAgIERlbGV0ZVRheENhdGVnb3J5LFxuICAgIERlbGV0ZVRheFJhdGUsXG4gICAgRGVsZXRlWm9uZSxcbiAgICBHZXRBY3RpdmVDaGFubmVsLFxuICAgIEdldEFsbEpvYnMsXG4gICAgR2V0QXZhaWxhYmxlQ291bnRyaWVzLFxuICAgIEdldENoYW5uZWwsXG4gICAgR2V0Q2hhbm5lbHMsXG4gICAgR2V0Q291bnRyeSxcbiAgICBHZXRDb3VudHJ5TGlzdCxcbiAgICBHZXRHbG9iYWxTZXR0aW5ncyxcbiAgICBHZXRKb2JJbmZvLFxuICAgIEdldEpvYlF1ZXVlTGlzdCxcbiAgICBHZXRKb2JzQnlJZCxcbiAgICBHZXRQYXltZW50TWV0aG9kLFxuICAgIEdldFBheW1lbnRNZXRob2RMaXN0LFxuICAgIEdldFBheW1lbnRNZXRob2RPcGVyYXRpb25zLFxuICAgIEdldFRheENhdGVnb3JpZXMsXG4gICAgR2V0VGF4Q2F0ZWdvcnksXG4gICAgR2V0VGF4UmF0ZSxcbiAgICBHZXRUYXhSYXRlTGlzdCxcbiAgICBHZXRUYXhSYXRlTGlzdFNpbXBsZSxcbiAgICBHZXRab25lLFxuICAgIEdldFpvbmVzLFxuICAgIEpvYkxpc3RPcHRpb25zLFxuICAgIEpvYlN0YXRlLFxuICAgIFJlbW92ZU1lbWJlcnNGcm9tWm9uZSxcbiAgICBVcGRhdGVDaGFubmVsLFxuICAgIFVwZGF0ZUNoYW5uZWxJbnB1dCxcbiAgICBVcGRhdGVDb3VudHJ5LFxuICAgIFVwZGF0ZUNvdW50cnlJbnB1dCxcbiAgICBVcGRhdGVHbG9iYWxTZXR0aW5ncyxcbiAgICBVcGRhdGVHbG9iYWxTZXR0aW5nc0lucHV0LFxuICAgIFVwZGF0ZVBheW1lbnRNZXRob2QsXG4gICAgVXBkYXRlUGF5bWVudE1ldGhvZElucHV0LFxuICAgIFVwZGF0ZVRheENhdGVnb3J5LFxuICAgIFVwZGF0ZVRheENhdGVnb3J5SW5wdXQsXG4gICAgVXBkYXRlVGF4UmF0ZSxcbiAgICBVcGRhdGVUYXhSYXRlSW5wdXQsXG4gICAgVXBkYXRlWm9uZSxcbiAgICBVcGRhdGVab25lSW5wdXQsXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBBRERfTUVNQkVSU19UT19aT05FLFxuICAgIENBTkNFTF9KT0IsXG4gICAgQ1JFQVRFX0NIQU5ORUwsXG4gICAgQ1JFQVRFX0NPVU5UUlksXG4gICAgQ1JFQVRFX1BBWU1FTlRfTUVUSE9ELFxuICAgIENSRUFURV9UQVhfQ0FURUdPUlksXG4gICAgQ1JFQVRFX1RBWF9SQVRFLFxuICAgIENSRUFURV9aT05FLFxuICAgIERFTEVURV9DSEFOTkVMLFxuICAgIERFTEVURV9DT1VOVFJZLFxuICAgIERFTEVURV9QQVlNRU5UX01FVEhPRCxcbiAgICBERUxFVEVfVEFYX0NBVEVHT1JZLFxuICAgIERFTEVURV9UQVhfUkFURSxcbiAgICBERUxFVEVfWk9ORSxcbiAgICBHRVRfQUNUSVZFX0NIQU5ORUwsXG4gICAgR0VUX0FWQUlMQUJMRV9DT1VOVFJJRVMsXG4gICAgR0VUX0NIQU5ORUwsXG4gICAgR0VUX0NIQU5ORUxTLFxuICAgIEdFVF9DT1VOVFJZLFxuICAgIEdFVF9DT1VOVFJZX0xJU1QsXG4gICAgR0VUX0dMT0JBTF9TRVRUSU5HUyxcbiAgICBHRVRfSk9CU19CWV9JRCxcbiAgICBHRVRfSk9CU19MSVNULFxuICAgIEdFVF9KT0JfSU5GTyxcbiAgICBHRVRfSk9CX1FVRVVFX0xJU1QsXG4gICAgR0VUX1BBWU1FTlRfTUVUSE9ELFxuICAgIEdFVF9QQVlNRU5UX01FVEhPRF9MSVNULFxuICAgIEdFVF9QQVlNRU5UX01FVEhPRF9PUEVSQVRJT05TLFxuICAgIEdFVF9UQVhfQ0FURUdPUklFUyxcbiAgICBHRVRfVEFYX0NBVEVHT1JZLFxuICAgIEdFVF9UQVhfUkFURSxcbiAgICBHRVRfVEFYX1JBVEVfTElTVCxcbiAgICBHRVRfVEFYX1JBVEVfTElTVF9TSU1QTEUsXG4gICAgR0VUX1pPTkVTLFxuICAgIFJFTU9WRV9NRU1CRVJTX0ZST01fWk9ORSxcbiAgICBVUERBVEVfQ0hBTk5FTCxcbiAgICBVUERBVEVfQ09VTlRSWSxcbiAgICBVUERBVEVfR0xPQkFMX1NFVFRJTkdTLFxuICAgIFVQREFURV9QQVlNRU5UX01FVEhPRCxcbiAgICBVUERBVEVfVEFYX0NBVEVHT1JZLFxuICAgIFVQREFURV9UQVhfUkFURSxcbiAgICBVUERBVEVfWk9ORSxcbn0gZnJvbSAnLi4vZGVmaW5pdGlvbnMvc2V0dGluZ3MtZGVmaW5pdGlvbnMnO1xuXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzRGF0YVNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZURhdGFTZXJ2aWNlOiBCYXNlRGF0YVNlcnZpY2UpIHt9XG5cbiAgICBnZXRDb3VudHJpZXModGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDAsIGZpbHRlclRlcm0/OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldENvdW50cnlMaXN0LlF1ZXJ5LCBHZXRDb3VudHJ5TGlzdC5WYXJpYWJsZXM+KEdFVF9DT1VOVFJZX0xJU1QsIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgIHNraXAsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbHRlclRlcm0gPyB7IGNvbnRhaW5zOiBmaWx0ZXJUZXJtIH0gOiBudWxsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRBdmFpbGFibGVDb3VudHJpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRBdmFpbGFibGVDb3VudHJpZXMuUXVlcnk+KEdFVF9BVkFJTEFCTEVfQ09VTlRSSUVTKTtcbiAgICB9XG5cbiAgICBnZXRDb3VudHJ5KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldENvdW50cnkuUXVlcnksIEdldENvdW50cnkuVmFyaWFibGVzPihHRVRfQ09VTlRSWSwgeyBpZCB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVDb3VudHJ5KGlucHV0OiBDcmVhdGVDb3VudHJ5SW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVDb3VudHJ5Lk11dGF0aW9uLCBDcmVhdGVDb3VudHJ5LlZhcmlhYmxlcz4oQ1JFQVRFX0NPVU5UUlksIHtcbiAgICAgICAgICAgIGlucHV0OiBwaWNrKGlucHV0LCBbJ2NvZGUnLCAnZW5hYmxlZCcsICd0cmFuc2xhdGlvbnMnLCAnY3VzdG9tRmllbGRzJ10pLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVDb3VudHJ5KGlucHV0OiBVcGRhdGVDb3VudHJ5SW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVDb3VudHJ5Lk11dGF0aW9uLCBVcGRhdGVDb3VudHJ5LlZhcmlhYmxlcz4oVVBEQVRFX0NPVU5UUlksIHtcbiAgICAgICAgICAgIGlucHV0OiBwaWNrKGlucHV0LCBbJ2lkJywgJ2NvZGUnLCAnZW5hYmxlZCcsICd0cmFuc2xhdGlvbnMnLCAnY3VzdG9tRmllbGRzJ10pLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGVDb3VudHJ5KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxEZWxldGVDb3VudHJ5Lk11dGF0aW9uLCBEZWxldGVDb3VudHJ5LlZhcmlhYmxlcz4oREVMRVRFX0NPVU5UUlksIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRab25lcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFpvbmVzLlF1ZXJ5PihHRVRfWk9ORVMpO1xuICAgIH1cblxuICAgIGdldFpvbmUoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0Wm9uZS5RdWVyeSwgR2V0Wm9uZS5WYXJpYWJsZXM+KEdFVF9aT05FUywgeyBpZCB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVab25lKGlucHV0OiBDcmVhdGVab25lSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVab25lLk11dGF0aW9uLCBDcmVhdGVab25lLlZhcmlhYmxlcz4oQ1JFQVRFX1pPTkUsIHtcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVab25lKGlucHV0OiBVcGRhdGVab25lSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVab25lLk11dGF0aW9uLCBVcGRhdGVab25lLlZhcmlhYmxlcz4oVVBEQVRFX1pPTkUsIHtcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGVab25lKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxEZWxldGVab25lLk11dGF0aW9uLCBEZWxldGVab25lLlZhcmlhYmxlcz4oREVMRVRFX1pPTkUsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRNZW1iZXJzVG9ab25lKHpvbmVJZDogc3RyaW5nLCBtZW1iZXJJZHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8QWRkTWVtYmVyc1RvWm9uZS5NdXRhdGlvbiwgQWRkTWVtYmVyc1RvWm9uZS5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgQUREX01FTUJFUlNfVE9fWk9ORSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6b25lSWQsXG4gICAgICAgICAgICAgICAgbWVtYmVySWRzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW1vdmVNZW1iZXJzRnJvbVpvbmUoem9uZUlkOiBzdHJpbmcsIG1lbWJlcklkczogc3RyaW5nW10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxSZW1vdmVNZW1iZXJzRnJvbVpvbmUuTXV0YXRpb24sIFJlbW92ZU1lbWJlcnNGcm9tWm9uZS5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgUkVNT1ZFX01FTUJFUlNfRlJPTV9aT05FLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHpvbmVJZCxcbiAgICAgICAgICAgICAgICBtZW1iZXJJZHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFRheENhdGVnb3JpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRUYXhDYXRlZ29yaWVzLlF1ZXJ5PihHRVRfVEFYX0NBVEVHT1JJRVMpO1xuICAgIH1cblxuICAgIGdldFRheENhdGVnb3J5KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFRheENhdGVnb3J5LlF1ZXJ5LCBHZXRUYXhDYXRlZ29yeS5WYXJpYWJsZXM+KEdFVF9UQVhfQ0FURUdPUlksIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVUYXhDYXRlZ29yeShpbnB1dDogQ3JlYXRlVGF4Q2F0ZWdvcnlJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZVRheENhdGVnb3J5Lk11dGF0aW9uLCBDcmVhdGVUYXhDYXRlZ29yeS5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgQ1JFQVRFX1RBWF9DQVRFR09SWSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlVGF4Q2F0ZWdvcnkoaW5wdXQ6IFVwZGF0ZVRheENhdGVnb3J5SW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVUYXhDYXRlZ29yeS5NdXRhdGlvbiwgVXBkYXRlVGF4Q2F0ZWdvcnkuVmFyaWFibGVzPihcbiAgICAgICAgICAgIFVQREFURV9UQVhfQ0FURUdPUlksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGRlbGV0ZVRheENhdGVnb3J5KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxEZWxldGVUYXhDYXRlZ29yeS5NdXRhdGlvbiwgRGVsZXRlVGF4UmF0ZS5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgREVMRVRFX1RBWF9DQVRFR09SWSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0VGF4UmF0ZXModGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDAsIGZldGNoUG9saWN5PzogRmV0Y2hQb2xpY3kpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFRheFJhdGVMaXN0LlF1ZXJ5LCBHZXRUYXhSYXRlTGlzdC5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX1RBWF9SQVRFX0xJU1QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgICAgICBza2lwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmV0Y2hQb2xpY3ksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0VGF4UmF0ZXNTaW1wbGUodGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDAsIGZldGNoUG9saWN5PzogRmV0Y2hQb2xpY3kpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFRheFJhdGVMaXN0U2ltcGxlLlF1ZXJ5LCBHZXRUYXhSYXRlTGlzdFNpbXBsZS5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX1RBWF9SQVRFX0xJU1RfU0lNUExFLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFrZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZldGNoUG9saWN5LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFRheFJhdGUoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0VGF4UmF0ZS5RdWVyeSwgR2V0VGF4UmF0ZS5WYXJpYWJsZXM+KEdFVF9UQVhfUkFURSwge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVRheFJhdGUoaW5wdXQ6IENyZWF0ZVRheFJhdGVJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZVRheFJhdGUuTXV0YXRpb24sIENyZWF0ZVRheFJhdGUuVmFyaWFibGVzPihDUkVBVEVfVEFYX1JBVEUsIHtcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVUYXhSYXRlKGlucHV0OiBVcGRhdGVUYXhSYXRlSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVUYXhSYXRlLk11dGF0aW9uLCBVcGRhdGVUYXhSYXRlLlZhcmlhYmxlcz4oVVBEQVRFX1RBWF9SQVRFLCB7XG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlVGF4UmF0ZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8RGVsZXRlVGF4UmF0ZS5NdXRhdGlvbiwgRGVsZXRlVGF4UmF0ZS5WYXJpYWJsZXM+KERFTEVURV9UQVhfUkFURSwge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldENoYW5uZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0Q2hhbm5lbHMuUXVlcnk+KEdFVF9DSEFOTkVMUyk7XG4gICAgfVxuXG4gICAgZ2V0Q2hhbm5lbChpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRDaGFubmVsLlF1ZXJ5LCBHZXRDaGFubmVsLlZhcmlhYmxlcz4oR0VUX0NIQU5ORUwsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVDaGFubmVsKGZldGNoUG9saWN5PzogRmV0Y2hQb2xpY3kpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldEFjdGl2ZUNoYW5uZWwuUXVlcnksIEdldEFjdGl2ZUNoYW5uZWwuVmFyaWFibGVzPihcbiAgICAgICAgICAgIEdFVF9BQ1RJVkVfQ0hBTk5FTCxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgZmV0Y2hQb2xpY3ksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2hhbm5lbChpbnB1dDogQ3JlYXRlQ2hhbm5lbElucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q3JlYXRlQ2hhbm5lbC5NdXRhdGlvbiwgQ3JlYXRlQ2hhbm5lbC5WYXJpYWJsZXM+KENSRUFURV9DSEFOTkVMLCB7XG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ2hhbm5lbChpbnB1dDogVXBkYXRlQ2hhbm5lbElucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlQ2hhbm5lbC5NdXRhdGlvbiwgVXBkYXRlQ2hhbm5lbC5WYXJpYWJsZXM+KFVQREFURV9DSEFOTkVMLCB7XG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlQ2hhbm5lbChpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8RGVsZXRlQ2hhbm5lbC5NdXRhdGlvbiwgRGVsZXRlQ2hhbm5lbC5WYXJpYWJsZXM+KERFTEVURV9DSEFOTkVMLCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0UGF5bWVudE1ldGhvZHModGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFBheW1lbnRNZXRob2RMaXN0LlF1ZXJ5LCBHZXRQYXltZW50TWV0aG9kTGlzdC5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX1BBWU1FTlRfTUVUSE9EX0xJU1QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBza2lwLFxuICAgICAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFBheW1lbnRNZXRob2QoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0UGF5bWVudE1ldGhvZC5RdWVyeSwgR2V0UGF5bWVudE1ldGhvZC5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX1BBWU1FTlRfTUVUSE9ELFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjcmVhdGVQYXltZW50TWV0aG9kKGlucHV0OiBDcmVhdGVQYXltZW50TWV0aG9kSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVQYXltZW50TWV0aG9kLk11dGF0aW9uLCBDcmVhdGVQYXltZW50TWV0aG9kLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBDUkVBVEVfUEFZTUVOVF9NRVRIT0QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHVwZGF0ZVBheW1lbnRNZXRob2QoaW5wdXQ6IFVwZGF0ZVBheW1lbnRNZXRob2RJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZVBheW1lbnRNZXRob2QuTXV0YXRpb24sIFVwZGF0ZVBheW1lbnRNZXRob2QuVmFyaWFibGVzPihcbiAgICAgICAgICAgIFVQREFURV9QQVlNRU5UX01FVEhPRCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZGVsZXRlUGF5bWVudE1ldGhvZChpZDogc3RyaW5nLCBmb3JjZTogYm9vbGVhbikge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZVBheW1lbnRNZXRob2QuTXV0YXRpb24sIERlbGV0ZVBheW1lbnRNZXRob2QuVmFyaWFibGVzPihcbiAgICAgICAgICAgIERFTEVURV9QQVlNRU5UX01FVEhPRCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBmb3JjZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0UGF5bWVudE1ldGhvZE9wZXJhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRQYXltZW50TWV0aG9kT3BlcmF0aW9ucy5RdWVyeT4oR0VUX1BBWU1FTlRfTUVUSE9EX09QRVJBVElPTlMpO1xuICAgIH1cblxuICAgIGdldEdsb2JhbFNldHRpbmdzKGZldGNoUG9saWN5PzogV2F0Y2hRdWVyeUZldGNoUG9saWN5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRHbG9iYWxTZXR0aW5ncy5RdWVyeT4oXG4gICAgICAgICAgICBHRVRfR0xPQkFMX1NFVFRJTkdTLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmV0Y2hQb2xpY3ksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlR2xvYmFsU2V0dGluZ3MoaW5wdXQ6IFVwZGF0ZUdsb2JhbFNldHRpbmdzSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVHbG9iYWxTZXR0aW5ncy5NdXRhdGlvbiwgVXBkYXRlR2xvYmFsU2V0dGluZ3MuVmFyaWFibGVzPihcbiAgICAgICAgICAgIFVQREFURV9HTE9CQUxfU0VUVElOR1MsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEpvYihpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRKb2JJbmZvLlF1ZXJ5LCBHZXRKb2JJbmZvLlZhcmlhYmxlcz4oR0VUX0pPQl9JTkZPLCB7IGlkIH0pO1xuICAgIH1cblxuICAgIHBvbGxKb2JzKGlkczogc3RyaW5nW10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldEpvYnNCeUlkLlF1ZXJ5LCBHZXRKb2JzQnlJZC5WYXJpYWJsZXM+KEdFVF9KT0JTX0JZX0lELCB7XG4gICAgICAgICAgICBpZHMsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEFsbEpvYnMob3B0aW9ucz86IEpvYkxpc3RPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRBbGxKb2JzLlF1ZXJ5LCBHZXRBbGxKb2JzLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBHRVRfSk9CU19MSVNULFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NhY2hlLWZpcnN0JyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRKb2JRdWV1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRKb2JRdWV1ZUxpc3QuUXVlcnk+KEdFVF9KT0JfUVVFVUVfTElTVCk7XG4gICAgfVxuXG4gICAgZ2V0UnVubmluZ0pvYnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRBbGxKb2JzLlF1ZXJ5LCBHZXRBbGxKb2JzLlZhcmlhYmxlcz4oR0VUX0pPQlNfTElTVCwge1xuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXE6IEpvYlN0YXRlLlJVTk5JTkcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNhbmNlbEpvYihpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q2FuY2VsSm9iLk11dGF0aW9uLCBDYW5jZWxKb2IuVmFyaWFibGVzPihDQU5DRUxfSk9CLCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19
import { CREATE_PROMOTION, DELETE_PROMOTION, GET_ADJUSTMENT_OPERATIONS, GET_PROMOTION, GET_PROMOTION_LIST, UPDATE_PROMOTION, } from '../definitions/promotion-definitions';
export class PromotionDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getPromotions(take = 10, skip = 0, filter) {
        return this.baseDataService.query(GET_PROMOTION_LIST, {
            options: {
                take,
                skip,
                filter,
            },
        });
    }
    getPromotion(id) {
        return this.baseDataService.query(GET_PROMOTION, {
            id,
        });
    }
    getPromotionActionsAndConditions() {
        return this.baseDataService.query(GET_ADJUSTMENT_OPERATIONS);
    }
    createPromotion(input) {
        return this.baseDataService.mutate(CREATE_PROMOTION, {
            input,
        });
    }
    updatePromotion(input) {
        return this.baseDataService.mutate(UPDATE_PROMOTION, {
            input,
        });
    }
    deletePromotion(id) {
        return this.baseDataService.mutate(DELETE_PROMOTION, { id });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbW90aW9uLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvcHJvbW90aW9uLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxPQUFPLEVBQ0gsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQix5QkFBeUIsRUFDekIsYUFBYSxFQUNiLGtCQUFrQixFQUNsQixnQkFBZ0IsR0FDbkIsTUFBTSxzQ0FBc0MsQ0FBQztBQUk5QyxNQUFNLE9BQU8sb0JBQW9CO0lBQzdCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFeEQsYUFBYSxDQUFDLE9BQWUsRUFBRSxFQUFFLE9BQWUsQ0FBQyxFQUFFLE1BQWlDO1FBQ2hGLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLGtCQUFrQixFQUNsQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxJQUFJO2dCQUNKLElBQUk7Z0JBQ0osTUFBTTthQUNUO1NBQ0osQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELFlBQVksQ0FBQyxFQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQTZDLGFBQWEsRUFBRTtZQUN6RixFQUFFO1NBQ0wsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGdDQUFnQztRQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFnQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBMkI7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsZ0JBQWdCLEVBQ2hCO1lBQ0ksS0FBSztTQUNSLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBMkI7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsZ0JBQWdCLEVBQ2hCO1lBQ0ksS0FBSztTQUNSLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlLENBQUMsRUFBVTtRQUN0QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixnQkFBZ0IsRUFDaEIsRUFBRSxFQUFFLEVBQUUsQ0FDVCxDQUFDO0lBQ04sQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDcmVhdGVQcm9tb3Rpb24sXG4gICAgQ3JlYXRlUHJvbW90aW9uSW5wdXQsXG4gICAgRGVsZXRlUHJvbW90aW9uLFxuICAgIEdldEFkanVzdG1lbnRPcGVyYXRpb25zLFxuICAgIEdldFByb21vdGlvbixcbiAgICBHZXRQcm9tb3Rpb25MaXN0LFxuICAgIFByb21vdGlvbkZpbHRlclBhcmFtZXRlcixcbiAgICBVcGRhdGVQcm9tb3Rpb24sXG4gICAgVXBkYXRlUHJvbW90aW9uSW5wdXQsXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBDUkVBVEVfUFJPTU9USU9OLFxuICAgIERFTEVURV9QUk9NT1RJT04sXG4gICAgR0VUX0FESlVTVE1FTlRfT1BFUkFUSU9OUyxcbiAgICBHRVRfUFJPTU9USU9OLFxuICAgIEdFVF9QUk9NT1RJT05fTElTVCxcbiAgICBVUERBVEVfUFJPTU9USU9OLFxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9wcm9tb3Rpb24tZGVmaW5pdGlvbnMnO1xuXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFByb21vdGlvbkRhdGFTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxuXG4gICAgZ2V0UHJvbW90aW9ucyh0YWtlOiBudW1iZXIgPSAxMCwgc2tpcDogbnVtYmVyID0gMCwgZmlsdGVyPzogUHJvbW90aW9uRmlsdGVyUGFyYW1ldGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRQcm9tb3Rpb25MaXN0LlF1ZXJ5LCBHZXRQcm9tb3Rpb25MaXN0LlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBHRVRfUFJPTU9USU9OX0xJU1QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgICAgICBza2lwLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0UHJvbW90aW9uKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFByb21vdGlvbi5RdWVyeSwgR2V0UHJvbW90aW9uLlZhcmlhYmxlcz4oR0VUX1BST01PVElPTiwge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFByb21vdGlvbkFjdGlvbnNBbmRDb25kaXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWRqdXN0bWVudE9wZXJhdGlvbnMuUXVlcnk+KEdFVF9BREpVU1RNRU5UX09QRVJBVElPTlMpO1xuICAgIH1cblxuICAgIGNyZWF0ZVByb21vdGlvbihpbnB1dDogQ3JlYXRlUHJvbW90aW9uSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVQcm9tb3Rpb24uTXV0YXRpb24sIENyZWF0ZVByb21vdGlvbi5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgQ1JFQVRFX1BST01PVElPTixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlUHJvbW90aW9uKGlucHV0OiBVcGRhdGVQcm9tb3Rpb25JbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZVByb21vdGlvbi5NdXRhdGlvbiwgVXBkYXRlUHJvbW90aW9uLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBVUERBVEVfUFJPTU9USU9OLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkZWxldGVQcm9tb3Rpb24oaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZVByb21vdGlvbi5NdXRhdGlvbiwgRGVsZXRlUHJvbW90aW9uLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBERUxFVEVfUFJPTU9USU9OLFxuICAgICAgICAgICAgeyBpZCB9LFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==
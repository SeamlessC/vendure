import { Injectable } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import * as i0 from "@angular/core";
/**
 * Responsible for registering dashboard widget components and querying for layouts.
 */
export class DashboardWidgetService {
    constructor() {
        this.registry = new Map();
        this.layoutDef = [];
    }
    registerWidget(id, config) {
        if (this.registry.has(id)) {
            throw new Error(`A dashboard widget with the id "${id}" already exists`);
        }
        this.registry.set(id, config);
    }
    getAvailableIds(currentUserPermissions) {
        const hasAllPermissions = (requiredPerms, userPerms) => {
            return requiredPerms.every(p => userPerms.includes(p));
        };
        return [...this.registry.entries()]
            .filter(([id, config]) => {
            return (!config.requiresPermissions ||
                hasAllPermissions(config.requiresPermissions, currentUserPermissions));
        })
            .map(([id]) => id);
    }
    getWidgetById(id) {
        return this.registry.get(id);
    }
    setDefaultLayout(layout) {
        this.layoutDef = layout;
    }
    getDefaultLayout() {
        return this.layoutDef;
    }
    getWidgetLayout(layoutDef) {
        const intermediateLayout = (layoutDef || this.layoutDef)
            .map(({ id, width }) => {
            const config = this.registry.get(id);
            if (!config) {
                return this.idNotFound(id);
            }
            return { id, config, width: this.getValidWidth(id, config, width) };
        })
            .filter(notNullOrUndefined);
        return this.buildLayout(intermediateLayout);
    }
    idNotFound(id) {
        // tslint:disable-next-line:no-console
        console.error(`No dashboard widget was found with the id "${id}"\nAvailable ids: ${[...this.registry.keys()]
            .map(_id => `"${_id}"`)
            .join(', ')}`);
        return;
    }
    getValidWidth(id, config, targetWidth) {
        var _a;
        let adjustedWidth = targetWidth;
        const supportedWidths = ((_a = config.supportedWidths) === null || _a === void 0 ? void 0 : _a.length)
            ? config.supportedWidths
            : [3, 4, 6, 8, 12];
        if (!supportedWidths.includes(targetWidth)) {
            // Fall back to the largest supported width
            const sortedWidths = supportedWidths.sort((a, b) => a - b);
            const fallbackWidth = supportedWidths[sortedWidths.length - 1];
            // tslint:disable-next-line:no-console
            console.error(`The "${id}" widget does not support the specified width (${targetWidth}).\nSupported widths are: [${sortedWidths.join(', ')}].\nUsing (${fallbackWidth}) instead.`);
            adjustedWidth = fallbackWidth;
        }
        return adjustedWidth;
    }
    buildLayout(intermediateLayout) {
        const layout = [];
        let row = [];
        for (const { id, config, width } of intermediateLayout) {
            const rowSize = row.reduce((size, c) => size + c.width, 0);
            if (12 < rowSize + width) {
                layout.push(row);
                row = [];
            }
            row.push({ id, config, width });
        }
        layout.push(row);
        return layout;
    }
}
DashboardWidgetService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DashboardWidgetService_Factory() { return new DashboardWidgetService(); }, token: DashboardWidgetService, providedIn: "root" });
DashboardWidgetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,
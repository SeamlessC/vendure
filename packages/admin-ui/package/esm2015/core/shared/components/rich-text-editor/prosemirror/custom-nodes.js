import { DOMSerializer } from 'prosemirror-model';
const ɵ0 = node => {
    var _a, _b;
    if (node instanceof HTMLIFrameElement) {
        const attrs = {
            allow: node.allow,
            allowfullscreeen: (_a = node.allowFullscreen) !== null && _a !== void 0 ? _a : true,
            frameborder: node.getAttribute('frameborder'),
            height: node.height,
            name: node.name,
            referrerpolicy: node.referrerPolicy,
            src: node.src,
            srcdoc: node.srcdoc || undefined,
            title: (_b = node.title) !== null && _b !== void 0 ? _b : '',
            width: node.width,
        };
        if (node.sandbox.length) {
            attrs.sandbox = node.sandbox;
        }
        return attrs;
    }
    return null;
};
export const iframeNode = {
    group: 'block',
    attrs: {
        allow: {},
        allowfullscreeen: {},
        frameborder: {},
        height: { default: undefined },
        name: { default: '' },
        referrerpolicy: {},
        sandbox: { default: undefined },
        src: {},
        srcdoc: { default: undefined },
        title: { default: undefined },
        width: { default: undefined },
    },
    parseDOM: [
        {
            tag: 'iframe',
            getAttrs: ɵ0,
        },
    ],
    toDOM(node) {
        return ['iframe', Object.assign({}, node.attrs)];
    },
};
export const iframeNodeView = (node, view, getPos, decorations) => {
    const domSerializer = DOMSerializer.fromSchema(view.state.schema);
    const wrapper = document.createElement('div');
    wrapper.classList.add('iframe-wrapper');
    const iframe = domSerializer.serializeNode(node);
    wrapper.appendChild(iframe);
    return {
        dom: wrapper,
    };
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLW5vZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9yaWNoLXRleHQtZWRpdG9yL3Byb3NlbWlycm9yL2N1c3RvbS1ub2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9CLGFBQWEsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztXQXFCOUQsSUFBSSxDQUFDLEVBQUU7O0lBQ2IsSUFBSSxJQUFJLFlBQVksaUJBQWlCLEVBQUU7UUFDbkMsTUFBTSxLQUFLLEdBQXdCO1lBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixnQkFBZ0IsRUFBRSxNQUFBLElBQUksQ0FBQyxlQUFlLG1DQUFJLElBQUk7WUFDOUMsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDO1lBQzdDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksU0FBUztZQUNoQyxLQUFLLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxtQ0FBSSxFQUFFO1lBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNwQixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNyQixLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDaEM7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUF0Q2IsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFhO0lBQ2hDLEtBQUssRUFBRSxPQUFPO0lBQ2QsS0FBSyxFQUFFO1FBQ0gsS0FBSyxFQUFFLEVBQUU7UUFDVCxnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLFdBQVcsRUFBRSxFQUFFO1FBQ2YsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtRQUM5QixJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBQ3JCLGNBQWMsRUFBRSxFQUFFO1FBQ2xCLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7UUFDL0IsR0FBRyxFQUFFLEVBQUU7UUFDUCxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFO1FBQzlCLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7UUFDN0IsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtLQUNoQztJQUNELFFBQVEsRUFBRTtRQUNOO1lBQ0ksR0FBRyxFQUFFLFFBQVE7WUFDYixRQUFRLElBb0JQO1NBQ0o7S0FDSjtJQUNELEtBQUssQ0FBQyxJQUFJO1FBQ04sT0FBTyxDQUFDLFFBQVEsb0JBQU8sSUFBSSxDQUFDLEtBQUssRUFBRyxDQUFDO0lBQ3pDLENBQUM7Q0FDSixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUF3QixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFO0lBQ25GLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDeEMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLE9BQU87UUFDSCxHQUFHLEVBQUUsT0FBTztLQUNmLENBQUM7QUFDTixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdHRycywgRE9NUGFyc2VyLCBET01TZXJpYWxpemVyLCBOb2RlLCBOb2RlU3BlYyB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IE5vZGVWaWV3Q29uc3RydWN0b3IgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcblxuZXhwb3J0IGNvbnN0IGlmcmFtZU5vZGU6IE5vZGVTcGVjID0ge1xuICAgIGdyb3VwOiAnYmxvY2snLFxuICAgIGF0dHJzOiB7XG4gICAgICAgIGFsbG93OiB7fSxcbiAgICAgICAgYWxsb3dmdWxsc2NyZWVlbjoge30sXG4gICAgICAgIGZyYW1lYm9yZGVyOiB7fSxcbiAgICAgICAgaGVpZ2h0OiB7IGRlZmF1bHQ6IHVuZGVmaW5lZCB9LFxuICAgICAgICBuYW1lOiB7IGRlZmF1bHQ6ICcnIH0sXG4gICAgICAgIHJlZmVycmVycG9saWN5OiB7fSxcbiAgICAgICAgc2FuZGJveDogeyBkZWZhdWx0OiB1bmRlZmluZWQgfSxcbiAgICAgICAgc3JjOiB7fSxcbiAgICAgICAgc3JjZG9jOiB7IGRlZmF1bHQ6IHVuZGVmaW5lZCB9LFxuICAgICAgICB0aXRsZTogeyBkZWZhdWx0OiB1bmRlZmluZWQgfSxcbiAgICAgICAgd2lkdGg6IHsgZGVmYXVsdDogdW5kZWZpbmVkIH0sXG4gICAgfSxcbiAgICBwYXJzZURPTTogW1xuICAgICAgICB7XG4gICAgICAgICAgICB0YWc6ICdpZnJhbWUnLFxuICAgICAgICAgICAgZ2V0QXR0cnM6IG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cnM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvdzogbm9kZS5hbGxvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlZW46IG5vZGUuYWxsb3dGdWxsc2NyZWVuID8/IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogbm9kZS5nZXRBdHRyaWJ1dGUoJ2ZyYW1lYm9yZGVyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG5vZGUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJyZXJwb2xpY3k6IG5vZGUucmVmZXJyZXJQb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM6IG5vZGUuc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjZG9jOiBub2RlLnNyY2RvYyB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbm9kZS50aXRsZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBub2RlLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zYW5kYm94Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMuc2FuZGJveCA9IG5vZGUuc2FuZGJveDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHRvRE9NKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFsnaWZyYW1lJywgeyAuLi5ub2RlLmF0dHJzIH1dO1xuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgaWZyYW1lTm9kZVZpZXc6IE5vZGVWaWV3Q29uc3RydWN0b3IgPSAobm9kZSwgdmlldywgZ2V0UG9zLCBkZWNvcmF0aW9ucykgPT4ge1xuICAgIGNvbnN0IGRvbVNlcmlhbGl6ZXIgPSBET01TZXJpYWxpemVyLmZyb21TY2hlbWEodmlldy5zdGF0ZS5zY2hlbWEpO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ2lmcmFtZS13cmFwcGVyJyk7XG4gICAgY29uc3QgaWZyYW1lID0gZG9tU2VyaWFsaXplci5zZXJpYWxpemVOb2RlKG5vZGUpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkb206IHdyYXBwZXIsXG4gICAgfTtcbn07XG4iXX0=
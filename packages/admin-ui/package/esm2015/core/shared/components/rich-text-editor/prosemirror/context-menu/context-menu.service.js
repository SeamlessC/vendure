import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, interval, of, Subject } from 'rxjs';
import { bufferWhen, debounceTime, delayWhen, distinctUntilChanged, filter, map, takeUntil, } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class ContextMenuService {
    constructor() {
        this.menuIsVisible$ = new BehaviorSubject(false);
        this.setContextMenuConfig$ = new Subject();
        const source$ = this.setContextMenuConfig$.asObservable();
        const groupedConfig$ = source$.pipe(bufferWhen(() => source$.pipe(debounceTime(50))), map(group => {
            return group.reduce((acc, cur) => {
                var _a;
                if (!acc) {
                    return cur;
                }
                else {
                    if ((cur === null || cur === void 0 ? void 0 : cur.ref) === acc.ref) {
                        acc.items.push(
                        // de-duplicate items
                        ...((_a = cur === null || cur === void 0 ? void 0 : cur.items.filter(i => !acc.items.find(ai => ai.label === i.label))) !== null && _a !== void 0 ? _a : []));
                    }
                }
                return acc;
            }, undefined);
        }));
        const visible$ = this.menuIsVisible$.pipe(filter(val => val === true));
        const isVisible$ = this.menuIsVisible$.pipe(delayWhen(value => (value ? of(value) : interval(250).pipe(takeUntil(visible$)))), distinctUntilChanged());
        this.contextMenu$ = combineLatest(groupedConfig$, isVisible$).pipe(map(([config, isVisible]) => (isVisible ? config : undefined)));
    }
    setVisibility(isVisible) {
        this.menuIsVisible$.next(isVisible);
    }
    setContextMenu(config) {
        this.setContextMenuConfig$.next(config);
    }
    clearContextMenu() {
        this.setContextMenuConfig$.next(undefined);
    }
}
ContextMenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContextMenuService_Factory() { return new ContextMenuService(); }, token: ContextMenuService, providedIn: "root" });
ContextMenuService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ContextMenuService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvY29udGV4dC1tZW51L2NvbnRleHQtbWVudS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDekYsT0FBTyxFQUNILFVBQVUsRUFDVixZQUFZLEVBQ1osU0FBUyxFQUNULG9CQUFvQixFQUNwQixNQUFNLEVBQ04sR0FBRyxFQUVILFNBQVMsR0FFWixNQUFNLGdCQUFnQixDQUFDOztBQXFCeEIsTUFBTSxPQUFPLGtCQUFrQjtJQUkzQjtRQUZRLG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDckQsMEJBQXFCLEdBQUcsSUFBSSxPQUFPLEVBQWlDLENBQUM7UUFFekUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQy9CLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hELEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNSLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTs7Z0JBQzdCLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ04sT0FBTyxHQUFHLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0gsSUFBSSxDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxHQUFHLE1BQUssR0FBRyxDQUFDLEdBQUcsRUFBRTt3QkFDdEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJO3dCQUNWLHFCQUFxQjt3QkFDckIsR0FBRyxDQUFDLE1BQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsbUNBQ25FLEVBQUUsQ0FBQyxDQUNWLENBQUM7cUJBQ0w7aUJBQ0o7Z0JBQ0QsT0FBTyxHQUFHLENBQUM7WUFDZixDQUFDLEVBQUUsU0FBMEMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUNMLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUV2RSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDdkMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2pGLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7UUFDRixJQUFJLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUM5RCxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDakUsQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhLENBQUMsU0FBa0I7UUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUF5QjtRQUNwQyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7WUFoREosVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgaW50ZXJ2YWwsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGJ1ZmZlcldoZW4sXG4gICAgZGVib3VuY2VUaW1lLFxuICAgIGRlbGF5V2hlbixcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBmaWx0ZXIsXG4gICAgbWFwLFxuICAgIHNraXAsXG4gICAgdGFrZVVudGlsLFxuICAgIHRhcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRNZW51Q29uZmlnIHtcbiAgICByZWY6IGFueTtcbiAgICBpY29uU2hhcGU/OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBlbGVtZW50OiBFbGVtZW50O1xuICAgIGNvb3JkczogeyBsZWZ0OiBudW1iZXI7IHJpZ2h0OiBudW1iZXI7IHRvcDogbnVtYmVyOyBib3R0b206IG51bWJlciB9O1xuICAgIGl0ZW1zOiBDb250ZXh0TWVudUl0ZW1bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0TWVudUl0ZW0ge1xuICAgIHNlcGFyYXRvcj86IGJvb2xlYW47XG4gICAgaWNvbkNsYXNzPzogc3RyaW5nO1xuICAgIGljb25TaGFwZT86IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgb25DbGljazogKCkgPT4gdm9pZDtcbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudVNlcnZpY2Uge1xuICAgIGNvbnRleHRNZW51JDogT2JzZXJ2YWJsZTxDb250ZXh0TWVudUNvbmZpZyB8IHVuZGVmaW5lZD47XG4gICAgcHJpdmF0ZSBtZW51SXNWaXNpYmxlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIHByaXZhdGUgc2V0Q29udGV4dE1lbnVDb25maWckID0gbmV3IFN1YmplY3Q8Q29udGV4dE1lbnVDb25maWcgfCB1bmRlZmluZWQ+KCk7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSQgPSB0aGlzLnNldENvbnRleHRNZW51Q29uZmlnJC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgY29uc3QgZ3JvdXBlZENvbmZpZyQgPSBzb3VyY2UkLnBpcGUoXG4gICAgICAgICAgICBidWZmZXJXaGVuKCgpID0+IHNvdXJjZSQucGlwZShkZWJvdW5jZVRpbWUoNTApKSksXG4gICAgICAgICAgICBtYXAoZ3JvdXAgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBncm91cC5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYWNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cj8ucmVmID09PSBhY2MucmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLml0ZW1zLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlLWR1cGxpY2F0ZSBpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oY3VyPy5pdGVtcy5maWx0ZXIoaSA9PiAhYWNjLml0ZW1zLmZpbmQoYWkgPT4gYWkubGFiZWwgPT09IGkubGFiZWwpKSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQgYXMgQ29udGV4dE1lbnVDb25maWcgfCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgdmlzaWJsZSQgPSB0aGlzLm1lbnVJc1Zpc2libGUkLnBpcGUoZmlsdGVyKHZhbCA9PiB2YWwgPT09IHRydWUpKTtcblxuICAgICAgICBjb25zdCBpc1Zpc2libGUkID0gdGhpcy5tZW51SXNWaXNpYmxlJC5waXBlKFxuICAgICAgICAgICAgZGVsYXlXaGVuKHZhbHVlID0+ICh2YWx1ZSA/IG9mKHZhbHVlKSA6IGludGVydmFsKDI1MCkucGlwZSh0YWtlVW50aWwodmlzaWJsZSQpKSkpLFxuICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudSQgPSBjb21iaW5lTGF0ZXN0KGdyb3VwZWRDb25maWckLCBpc1Zpc2libGUkKS5waXBlKFxuICAgICAgICAgICAgbWFwKChbY29uZmlnLCBpc1Zpc2libGVdKSA9PiAoaXNWaXNpYmxlID8gY29uZmlnIDogdW5kZWZpbmVkKSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc2V0VmlzaWJpbGl0eShpc1Zpc2libGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5tZW51SXNWaXNpYmxlJC5uZXh0KGlzVmlzaWJsZSk7XG4gICAgfVxuXG4gICAgc2V0Q29udGV4dE1lbnUoY29uZmlnOiBDb250ZXh0TWVudUNvbmZpZykge1xuICAgICAgICB0aGlzLnNldENvbnRleHRNZW51Q29uZmlnJC5uZXh0KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgY2xlYXJDb250ZXh0TWVudSgpIHtcbiAgICAgICAgdGhpcy5zZXRDb250ZXh0TWVudUNvbmZpZyQubmV4dCh1bmRlZmluZWQpO1xuICAgIH1cbn1cbiJdfQ==
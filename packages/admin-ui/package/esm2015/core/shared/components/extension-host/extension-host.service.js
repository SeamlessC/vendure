import { Injectable } from '@angular/core';
import { assertNever } from '@vendure/common/lib/shared-utils';
import { parse } from 'graphql';
import { merge, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { DataService } from '../../../data/providers/data.service';
import { NotificationService } from '../../../providers/notification/notification.service';
export class ExtensionHostService {
    constructor(dataService, notificationService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.cancellationMessage$ = new Subject();
        this.destroyMessage$ = new Subject();
        this.handleMessage = (message) => {
            const { data, origin } = message;
            if (this.isExtensionMessage(data)) {
                const cancellation$ = this.cancellationMessage$.pipe(filter(requestId => requestId === data.requestId));
                const end$ = merge(cancellation$, this.destroyMessage$);
                switch (data.type) {
                    case 'cancellation': {
                        this.cancellationMessage$.next(data.requestId);
                        break;
                    }
                    case 'destroy': {
                        this.destroyMessage$.next();
                        break;
                    }
                    case 'active-route': {
                        const routeData = {
                            url: window.location.href,
                            origin: window.location.origin,
                            pathname: window.location.pathname,
                            params: this.routeSnapshot.params,
                            queryParams: this.routeSnapshot.queryParams,
                            fragment: this.routeSnapshot.fragment,
                        };
                        this.sendMessage({ data: routeData, error: false, complete: false, requestId: data.requestId }, origin);
                        this.sendMessage({ data: null, error: false, complete: true, requestId: data.requestId }, origin);
                        break;
                    }
                    case 'graphql-query': {
                        const { document, variables, fetchPolicy } = data.data;
                        this.dataService
                            .query(parse(document), variables, fetchPolicy)
                            .stream$.pipe(takeUntil(end$))
                            .subscribe(this.createObserver(data.requestId, origin));
                        break;
                    }
                    case 'graphql-mutation': {
                        const { document, variables } = data.data;
                        this.dataService
                            .mutate(parse(document), variables)
                            .pipe(takeUntil(end$))
                            .subscribe(this.createObserver(data.requestId, origin));
                        break;
                    }
                    case 'notification': {
                        this.notificationService.notify(data.data);
                        break;
                    }
                    default:
                        assertNever(data);
                }
            }
        };
    }
    init(extensionWindow, routeSnapshot) {
        this.extensionWindow = extensionWindow;
        this.routeSnapshot = routeSnapshot;
        window.addEventListener('message', this.handleMessage);
    }
    destroy() {
        window.removeEventListener('message', this.handleMessage);
        this.destroyMessage$.next();
    }
    ngOnDestroy() {
        this.destroy();
    }
    createObserver(requestId, origin) {
        return {
            next: data => this.sendMessage({ data, error: false, complete: false, requestId }, origin),
            error: err => this.sendMessage({ data: err, error: true, complete: false, requestId }, origin),
            complete: () => this.sendMessage({ data: null, error: false, complete: true, requestId }, origin),
        };
    }
    sendMessage(response, origin) {
        this.extensionWindow.postMessage(response, origin);
    }
    isExtensionMessage(input) {
        return (input.hasOwnProperty('type') && input.hasOwnProperty('data') && input.hasOwnProperty('requestId'));
    }
}
ExtensionHostService.decorators = [
    { type: Injectable }
];
ExtensionHostService.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService }
];
//# sourceMappingURL=data:application/json;base64,
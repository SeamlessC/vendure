import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { BaseListComponent, DataService, ModalService, NotificationService, ServerConfigService, } from '@vendure/admin-ui/core';
import { EMPTY, Subject } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
export class ShippingMethodListComponent extends BaseListComponent {
    constructor(modalService, notificationService, dataService, serverConfigService, router, route) {
        super(router, route);
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.serverConfigService = serverConfigService;
        this.testDataUpdated = false;
        this.fetchTestResult$ = new Subject();
        super.setQueryFn((...args) => this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(), data => data.shippingMethods);
    }
    ngOnInit() {
        super.ngOnInit();
        this.testResult$ = this.fetchTestResult$.pipe(switchMap(([address, lines]) => {
            const input = {
                shippingAddress: Object.assign(Object.assign({}, address), { streetLine1: 'test' }),
                lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),
            };
            return this.dataService.shippingMethod
                .testEligibleShippingMethods(input)
                .mapSingle(result => result.testEligibleShippingMethods);
        }));
        this.activeChannel$ = this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel);
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
        this.contentLanguage$ = this.dataService.client
            .uiState()
            .mapStream(({ uiState }) => uiState.contentLanguage)
            .pipe(tap(() => this.refresh()));
    }
    deleteShippingMethod(id) {
        this.modalService
            .dialog({
            title: _('catalog.confirm-delete-shipping-method'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY))
            .subscribe(() => {
            this.notificationService.success(_('common.notify-delete-success'), {
                entity: 'ShippingMethod',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(_('common.notify-delete-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    setTestOrderLines(event) {
        this.testOrderLines = event;
        this.testDataUpdated = true;
    }
    setTestAddress(event) {
        this.testAddress = event;
        this.testDataUpdated = true;
    }
    allTestDataPresent() {
        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);
    }
    runTest() {
        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);
        this.testDataUpdated = false;
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
}
ShippingMethodListComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-shipping-method-list',
                template: "<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-language-selector\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"contentLanguage$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            [routerLink]=\"['./create']\"\n            *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-shipping-method' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-shippingMethod=\"item\">\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', shippingMethod.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n\n<div class=\"testing-tool\">\n    <clr-accordion>\n        <clr-accordion-panel>\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <vdr-test-order-builder\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\n                        ></vdr-test-order-builder>\n                    </div>\n                    <div class=\"clr-col\">\n                        <vdr-test-address-form\n                            (addressChange)=\"setTestAddress($event)\"\n                        ></vdr-test-address-form>\n                        <vdr-shipping-eligibility-test-result\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                            [okToRun]=\"allTestDataPresent()\"\n                            [testDataUpdated]=\"testDataUpdated\"\n                            [testResult]=\"testResult$ | async\"\n                            (runTest)=\"runTest()\"\n                        ></vdr-shipping-eligibility-test-result>\n                    </div>\n                </div>\n            </clr-accordion-content>\n        </clr-accordion-panel>\n    </clr-accordion>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".testing-tool{margin-top:48px}\n"]
            },] }
];
ShippingMethodListComponent.ctorParameters = () => [
    { type: ModalService },
    { type: NotificationService },
    { type: DataService },
    { type: ServerConfigService },
    { type: Router },
    { type: ActivatedRoute }
];
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { BaseDetailComponent, DataService, LanguageCode, NotificationService, Permission, ServerConfigService, } from '@vendure/admin-ui/core';
import { switchMap, tap, withLatestFrom } from 'rxjs/operators';
export class GlobalSettingsComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.languageCodes = Object.values(LanguageCode);
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];
        this.customFields = this.getCustomFieldConfig('GlobalSettings');
        this.detailForm = this.formBuilder.group({
            availableLanguages: [''],
            trackInventory: false,
            outOfStockThreshold: [0, Validators.required],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {
            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {
                const languagesSelect = this.detailForm.get('availableLanguages');
                if (languagesSelect) {
                    languagesSelect.disable();
                }
            }
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        this.dataService.settings
            .updateGlobalSettings(this.detailForm.value)
            .pipe(tap(({ updateGlobalSettings }) => {
            switch (updateGlobalSettings.__typename) {
                case 'GlobalSettings':
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    this.notificationService.success(_('common.notify-update-success'), {
                        entity: 'Settings',
                    });
                    break;
                case 'ChannelDefaultLanguageError':
                    this.notificationService.error(updateGlobalSettings.message);
            }
        }), switchMap(() => this.serverConfigService.refreshGlobalSettings()), withLatestFrom(this.dataService.client.uiState().single$))
            .subscribe(([{ globalSettings }, { uiState }]) => {
            const availableLangs = globalSettings.availableLanguages;
            if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {
                this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();
            }
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            availableLanguages: entity.availableLanguages,
            trackInventory: entity.trackInventory,
            outOfStockThreshold: entity.outOfStockThreshold,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
}
GlobalSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-global-settings',
                template: "<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            *vdrIfPermissions=\"updatePermission\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\n        <ng-select\n            [items]=\"languageCodes\"\n            [addTag]=\"false\"\n            [hideSelected]=\"true\"\n            multiple=\"true\"\n            appendTo=\"body\"\n            formControlName=\"availableLanguages\"\n        >\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\n                    \u00D7\n                </span>\n                <span class=\"ng-value-label\">{{ item | localeLanguageName }} ({{ item }})</span>\n            </ng-template>\n            <ng-template ng-option-tmp let-item=\"item\">\n                {{ item | localeLanguageName }} ({{ item }})\n            </ng-template>\n        </ng-select>\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\n        for=\"outOfStockThreshold\"\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\n    >\n        <input\n            id=\"outOfStockThreshold\"\n            type=\"number\"\n            formControlName=\"outOfStockThreshold\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'settings.track-inventory-default' | translate\"\n        for=\"enabled\"\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n    >\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                name=\"enabled\"\n                formControlName=\"trackInventory\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"GlobalSettings\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n    <vdr-custom-detail-component-host\n        locationId=\"global-settings-detail\"\n        [entity$]=\"entity$\"\n        [detailForm]=\"detailForm\"\n    ></vdr-custom-detail-component-host>\n</form>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["::ng-deep ng-select .ng-value>span{margin:0!important}::ng-deep ng-select .ng-arrow-wrapper .ng-arrow{margin:0!important}::ng-deep ng-select .ng-select-container>span{margin:0!important}\n"]
            },] }
];
GlobalSettingsComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
//# sourceMappingURL=data:application/json;base64,
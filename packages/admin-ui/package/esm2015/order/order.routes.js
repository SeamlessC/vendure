import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { CanDeactivateDetailGuard, detailBreadcrumb, } from '@vendure/admin-ui/core';
import { map } from 'rxjs/operators';
import { DraftOrderDetailComponent } from './components/draft-order-detail/draft-order-detail.component';
import { OrderDetailComponent } from './components/order-detail/order-detail.component';
import { OrderEditorComponent } from './components/order-editor/order-editor.component';
import { OrderListComponent } from './components/order-list/order-list.component';
import { OrderResolver } from './providers/routing/order-resolver';
import { OrderGuard } from './providers/routing/order.guard';
const ɵ0 = {
    breadcrumb: _('breadcrumb.orders'),
}, ɵ1 = {
    breadcrumb: orderBreadcrumb,
}, ɵ2 = {
    breadcrumb: orderBreadcrumb,
}, ɵ3 = {
    breadcrumb: modifyingOrderBreadcrumb,
};
export const orderRoutes = [
    {
        path: '',
        component: OrderListComponent,
        data: ɵ0,
    },
    {
        path: 'draft/:id',
        component: DraftOrderDetailComponent,
        resolve: {
            entity: OrderResolver,
        },
        canActivate: [OrderGuard],
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ1,
    },
    {
        path: ':id',
        component: OrderDetailComponent,
        resolve: {
            entity: OrderResolver,
        },
        canActivate: [OrderGuard],
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ2,
    },
    {
        path: ':id/modify',
        component: OrderEditorComponent,
        resolve: {
            entity: OrderResolver,
        },
        // canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ3,
    },
];
export function orderBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.orders',
        getName: order => order.code,
        route: '',
    });
}
export function modifyingOrderBreadcrumb(data, params) {
    return orderBreadcrumb(data, params).pipe(map((breadcrumbs) => {
        const modifiedBreadcrumbs = breadcrumbs.slice();
        modifiedBreadcrumbs[0].link[0] = '../';
        modifiedBreadcrumbs[1].link[0] = '../orders';
        return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });
    }));
}
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIucm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9vcmRlci9zcmMvb3JkZXIucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDdEUsT0FBTyxFQUVILHdCQUF3QixFQUN4QixnQkFBZ0IsR0FFbkIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sOERBQThELENBQUM7QUFDekcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDeEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDbEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztXQU0vQztJQUNGLFVBQVUsRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQUM7Q0FDckMsT0FVSztJQUNGLFVBQVUsRUFBRSxlQUFlO0NBQzlCLE9BVUs7SUFDRixVQUFVLEVBQUUsZUFBZTtDQUM5QixPQVNLO0lBQ0YsVUFBVSxFQUFFLHdCQUF3QjtDQUN2QztBQXpDVCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQVk7SUFDaEM7UUFDSSxJQUFJLEVBQUUsRUFBRTtRQUNSLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsSUFBSSxJQUVIO0tBQ0o7SUFDRDtRQUNJLElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSx5QkFBeUI7UUFDcEMsT0FBTyxFQUFFO1lBQ0wsTUFBTSxFQUFFLGFBQWE7U0FDeEI7UUFDRCxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUM7UUFDekIsYUFBYSxFQUFFLENBQUMsd0JBQXdCLENBQUM7UUFDekMsSUFBSSxJQUVIO0tBQ0o7SUFDRDtRQUNJLElBQUksRUFBRSxLQUFLO1FBQ1gsU0FBUyxFQUFFLG9CQUFvQjtRQUMvQixPQUFPLEVBQUU7WUFDTCxNQUFNLEVBQUUsYUFBYTtTQUN4QjtRQUNELFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztRQUN6QixhQUFhLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztRQUN6QyxJQUFJLElBRUg7S0FDSjtJQUNEO1FBQ0ksSUFBSSxFQUFFLFlBQVk7UUFDbEIsU0FBUyxFQUFFLG9CQUFvQjtRQUMvQixPQUFPLEVBQUU7WUFDTCxNQUFNLEVBQUUsYUFBYTtTQUN4QjtRQUNELDZDQUE2QztRQUM3QyxJQUFJLElBRUg7S0FDSjtDQUNKLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZSxDQUFDLElBQVMsRUFBRSxNQUFXO0lBQ2xELE9BQU8sZ0JBQWdCLENBQXVCO1FBQzFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtRQUNuQixFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDYixhQUFhLEVBQUUsbUJBQW1CO1FBQ2xDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQzVCLEtBQUssRUFBRSxFQUFFO0tBQ1osQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxJQUFTLEVBQUUsTUFBVztJQUMzRCxPQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNyQyxHQUFHLENBQUMsQ0FBQyxXQUFzQyxFQUFFLEVBQUU7UUFDM0MsTUFBTSxtQkFBbUIsR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEQsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN2QyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQzdDLE9BQU8sbUJBQW1CLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RixDQUFDLENBQVEsQ0FDWixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG1hcmtlciBhcyBfIH0gZnJvbSAnQGJpZXNiamVyZy9uZ3gtdHJhbnNsYXRlLWV4dHJhY3QtbWFya2VyJztcbmltcG9ydCB7XG4gICAgQnJlYWRjcnVtYkxhYmVsTGlua1BhaXIsXG4gICAgQ2FuRGVhY3RpdmF0ZURldGFpbEd1YXJkLFxuICAgIGRldGFpbEJyZWFkY3J1bWIsXG4gICAgT3JkZXJEZXRhaWwsXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBEcmFmdE9yZGVyRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2RyYWZ0LW9yZGVyLWRldGFpbC9kcmFmdC1vcmRlci1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IE9yZGVyRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29yZGVyLWRldGFpbC9vcmRlci1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IE9yZGVyRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29yZGVyLWVkaXRvci9vcmRlci1lZGl0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IE9yZGVyTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vcmRlci1saXN0L29yZGVyLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IE9yZGVyUmVzb2x2ZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9yb3V0aW5nL29yZGVyLXJlc29sdmVyJztcbmltcG9ydCB7IE9yZGVyR3VhcmQgfSBmcm9tICcuL3Byb3ZpZGVycy9yb3V0aW5nL29yZGVyLmd1YXJkJztcblxuZXhwb3J0IGNvbnN0IG9yZGVyUm91dGVzOiBSb3V0ZVtdID0gW1xuICAgIHtcbiAgICAgICAgcGF0aDogJycsXG4gICAgICAgIGNvbXBvbmVudDogT3JkZXJMaXN0Q29tcG9uZW50LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBicmVhZGNydW1iOiBfKCdicmVhZGNydW1iLm9yZGVycycpLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICBwYXRoOiAnZHJhZnQvOmlkJyxcbiAgICAgICAgY29tcG9uZW50OiBEcmFmdE9yZGVyRGV0YWlsQ29tcG9uZW50LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICBlbnRpdHk6IE9yZGVyUmVzb2x2ZXIsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbkFjdGl2YXRlOiBbT3JkZXJHdWFyZF0sXG4gICAgICAgIGNhbkRlYWN0aXZhdGU6IFtDYW5EZWFjdGl2YXRlRGV0YWlsR3VhcmRdLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBicmVhZGNydW1iOiBvcmRlckJyZWFkY3J1bWIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHBhdGg6ICc6aWQnLFxuICAgICAgICBjb21wb25lbnQ6IE9yZGVyRGV0YWlsQ29tcG9uZW50LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICBlbnRpdHk6IE9yZGVyUmVzb2x2ZXIsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbkFjdGl2YXRlOiBbT3JkZXJHdWFyZF0sXG4gICAgICAgIGNhbkRlYWN0aXZhdGU6IFtDYW5EZWFjdGl2YXRlRGV0YWlsR3VhcmRdLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBicmVhZGNydW1iOiBvcmRlckJyZWFkY3J1bWIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHBhdGg6ICc6aWQvbW9kaWZ5JyxcbiAgICAgICAgY29tcG9uZW50OiBPcmRlckVkaXRvckNvbXBvbmVudCxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgZW50aXR5OiBPcmRlclJlc29sdmVyLFxuICAgICAgICB9LFxuICAgICAgICAvLyBjYW5EZWFjdGl2YXRlOiBbQ2FuRGVhY3RpdmF0ZURldGFpbEd1YXJkXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYnJlYWRjcnVtYjogbW9kaWZ5aW5nT3JkZXJCcmVhZGNydW1iLFxuICAgICAgICB9LFxuICAgIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gb3JkZXJCcmVhZGNydW1iKGRhdGE6IGFueSwgcGFyYW1zOiBhbnkpIHtcbiAgICByZXR1cm4gZGV0YWlsQnJlYWRjcnVtYjxPcmRlckRldGFpbC5GcmFnbWVudD4oe1xuICAgICAgICBlbnRpdHk6IGRhdGEuZW50aXR5LFxuICAgICAgICBpZDogcGFyYW1zLmlkLFxuICAgICAgICBicmVhZGNydW1iS2V5OiAnYnJlYWRjcnVtYi5vcmRlcnMnLFxuICAgICAgICBnZXROYW1lOiBvcmRlciA9PiBvcmRlci5jb2RlLFxuICAgICAgICByb3V0ZTogJycsXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2RpZnlpbmdPcmRlckJyZWFkY3J1bWIoZGF0YTogYW55LCBwYXJhbXM6IGFueSkge1xuICAgIHJldHVybiBvcmRlckJyZWFkY3J1bWIoZGF0YSwgcGFyYW1zKS5waXBlKFxuICAgICAgICBtYXAoKGJyZWFkY3J1bWJzOiBCcmVhZGNydW1iTGFiZWxMaW5rUGFpcltdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZEJyZWFkY3J1bWJzID0gYnJlYWRjcnVtYnMuc2xpY2UoKTtcbiAgICAgICAgICAgIG1vZGlmaWVkQnJlYWRjcnVtYnNbMF0ubGlua1swXSA9ICcuLi8nO1xuICAgICAgICAgICAgbW9kaWZpZWRCcmVhZGNydW1ic1sxXS5saW5rWzBdID0gJy4uL29yZGVycyc7XG4gICAgICAgICAgICByZXR1cm4gbW9kaWZpZWRCcmVhZGNydW1icy5jb25jYXQoeyBsYWJlbDogXygnYnJlYWRjcnVtYi5tb2RpZnlpbmcnKSwgbGluazogWycnXSB9KTtcbiAgICAgICAgfSkgYXMgYW55LFxuICAgICk7XG59XG4iXX0=
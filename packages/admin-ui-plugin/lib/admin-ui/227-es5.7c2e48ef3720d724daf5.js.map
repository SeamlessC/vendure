{"version":3,"mappings":"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","names":["t","at","constructor","n","e","o","a","r","s","super","this","u","customFields","getCustomFieldConfig","ngOnInit","detailForm","name","tags","formBuilder","group","reduce","Object","init","ngOnDestroy","destroy","onAssetChange","get","setValue","markAsDirty","save","dataService","product","updateAsset","id","value","subscribe","notificationService","success","p","entity","error","setFormValues","length","setCustomFieldFormValues","c","selectors","rt","N","getAssetList","assets","l","g","searchTerm$","m","d","filterByTags$","map","h","options","skip","take","filter","contains","sort","createdAt","tagsOperator","paginationConfig$","I","itemsPerPage$","currentPage$","totalItems$","pipe","C","itemsPerPage","_ref2","currentPage","totalItems","Q","S","destroy$","refresh","allTags$","getTagList","mapStream","items","filesSelected","uploading","createAssets","ge","_step","__typename","message","count","deleteAssets","showModalAndDelete","A","result","modalService","dialog","title","translationVars","body","buttons","type","label","returnValue","M","Y","slice","selectAssets","fromComponent","size","V","concat","featuredAsset","emitChangeEvent","changeDetector","markForCheck","setAsFeatured","isFeatured","previewAsset","closable","locals","asset","removeAsset","change","emit","dropListDropped","E","previousContainer","data","container","et","Xt","contentsCurrentPage$","route","queryParamMap","Vt","pt","contentsItemsPerPage$","filterTermControl","valueChanges","G","setContentsPageNumber","filterChanges$","asObservable","Bt","previewUpdatedFilters","collectionIdChange$","parentIdChange$","refresh$","isLoading","v","Z","collection","previewCollectionVariants","parentId","filters","mapSingle","b","Zn","k","getCollectionContents","productVariants","contents$","contentsTotalItems$","ngOnChanges","next","collectionId","currentValue","updatedFilters","complete","setParam","setContentsItemsPerPage","router","navigate","relativeTo","queryParams","queryParamsHandling","replaceUrl","gt","slug","description","visible","array","livePreview","localStorageService","getCollectionFilters","single$","allFilters","collectionFilters","updatedFilters$","te","statusChanges","filterRemoved$","touched","mapOperationsToInputs","arguments","_step2","parentId$","paramMap","entity$","parent","getFilterDefinition","find","code","assetsChanged","values","assetChanges","updateSlug","languageCode$","w","pristine","tt","addFilter","args","push","control","removeFilter","removeAt","markAsTouched","splice","create","dirty","F","getUpdatedCollection","snapshot","createCollection","markAsPristine","updateCollection","contentsComponent","canDeactivate","toggleLivePreview","set","trackByFn","JSON","stringify","patchValue","isPrivate","clear","forEach","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","assetIds","featuredAssetId","entries","_ref13","i","Map","children","_iterator3","_step3","_step4","hasOwnProperty","expanded","includes","j","collections","collectionTree","he","expandedIds","allMoveListItems","onDrop","item","Error","rearrange","index","currentIndex","onMove","onDelete","deleteCollection","getMoveListItems","calculateAllMoveListItems","ancestorIdPath","has","path","join","Set","isRootNode","mt","selectionManager","additiveMode","multiSelect","itemsAreEqual","queryResult","getCollections","refetchOnChannelChange","items$","setCurrentItems","wt","activeCollectionId$","split","expandAll","activeCollectionTitle$","availableLanguages$","serverConfigService","getAvailableLanguages","contentLanguage$","client","uiState","contentLanguage","q","completed$","toggleExpandAll","onRearrange","moveCollection","findIndex","closeContents","params","contents","setLanguage","setContentLanguage","ref","refetch","_t","customValueFields","facet","updateCode","updateValueCode","customValueFieldIsSet","getValuesFormArray","addFacetValue","_step5","addControl","insert","getUpdatedFacet","createFacet","getAllFacets","Et","updateFacet","getCreatedFacetValues","createFacetValues","getFacet","getUpdatedFacetValues","updateFacetValues","$","deleteFacetValue","deleteFacetValues","P","W","_step6","St","qt","Gt","controls","translations","facetId","toString","J","ht","getFacets","facets","xo","toggleDisplayLimit","displayLimit","initialLimit","deleteFacet","Vo","call","wo","re","_assertThisInitialized","_next","notifyNext","notifyComplete","ft","ngAfterViewInit","setTimeout","selector","focus","selectValues","resolveWith","selectedValues","cancel","B","productVariantIds","userStatus","activeChannelId","settings","getChannels","channels","currentChannel","availableChannels","selectedChannelIdControl","selectChannel","variantsPreview$","Yt","getTopVariants","priceFactorControl","_ref26","price","pricePreview","selectedChannel","assign","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","getProduct","_ref27","variantList","toPromise","lastIndexOf","substr","replace","H","getTaxCategories","taxCategories","createProductWithVariants","createProduct","groups","createProductOptionGroups","_ref29","addOptionGroupToProduct","productId","optionGroupId","optionGroups","variants","optionValues","optionIds","_toConsumableArray","createProductVariants","createProductOptionGroup","sku","stockOnHand","stock","_ref31","updateProduct","autoUpdate","productInput","variantsInput","getProductVariants","_step7","ue","jt","le","_loop","updateProductVariants","updateProductOption","_step8","_iterator8","deleteProductVariant","Wo","factory","ɵfac","oxw","filterInput","nt","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","_ref35","Jo","_ref37","filterOperator","bufferSize","refCount","variants$","_step9","productVariantMap","taxCategories$","productDetailService","activeTab$","buildVariantFormArray","facets$","facetValues","getProductFormGroup","facetValues$","productChannels$","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","navigateToTab","location","replaceState","createUrlTree","tab","isDefaultChannel","ve","setPage","setItemsPerPage","assignToChannel","currentChannelIds","removeFromChannel","channelCode","_ref43","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","variant","_ref45","removeVariantsFromChannel","variantAssetsChanged","keys","variantAssetChanges","variantAssetChange","variantId","selectProductFacetValue","displayFacetValueModal","_ref49","removeProductFacetValue","selectVariantFacetValue","Ce","_step10","variantFacetValueChanges","_loop2","variantsToCreateAreValid","createVariantsConfig","every","getUpdatedProduct","console","getUpdatedProductVariants","updateSlugAfterSave","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","emitEvent","vt","searchTerm","productSearchInput","setSearchTerm","selectedFacetValueIds$","getAll","setFacetValues","_key","searchProducts","search","input","term","facetValueOperator","groupByProduct","productVariantId","result$","Te","getPendingSearchIndexUpdates","pendingSearchIndexUpdates","setQueryParam","page","setFacetValueIds","fvids","rebuildSearchIndex","reindex","info","jobQueueService","addJob","state","Intl","NumberFormat","format","duration","indexedItemCount","time","runPendingSearchIndexUpdates","deleteProduct","Ct","optionGroupCustomFields","optionCustomFields","optionGroups$","getOptionGroups","getOptions","invalid","getUpdatedOptionGroup","updateProductOptionGroup","getUpdatedOption","_loop3","_step13","updatedAt","_iterator14","_step14","setControl","xt","confirm","Pe","provide","useExisting","z","multi","formValue","registerOnChange","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","disabled","writeValue","textArea","nativeElement","editName","locked","cancelBubble","editingIndex","nameInputs","updateOption","target","edit","option","removeOption","remove","handleKey","key","addOptionValue","preventDefault","lastSelected","removeLastOption","handleBlur","isFocussed","parseInputIntoOptions","_step15","add","trim","decls","Fe","_i2","Zt","initOptionsAndVariants","currencyCode","onFormChanged","formValueChanged","getVariantsToAdd","generatedVariants","existing","getVariantName","addOptionGroup","isNew","optionsChanged","removeOptionGroup","generateVariants","removeOptionGroupFromProduct","addOption","deleteProductOption","getVariantPrototype","isDefault","optionsAreEqual","optionsAreSubset","Gi","deleteVariant","reFetchProduct","checkUniqueSkus","confirmDeletionOfObsoleteVariants","addOptionGroupsToProduct","addNewOptionsToGroups","fetchOptionGroups","createNewProductVariants","deleteObsoleteVariants","getObsoleteVariants","hasOnlyDefaultVariant","productOptionGroupId","addOptionToGroup","getProductOptionGroup","productOptionGroup","ji","apply","getProductVariantsOptions","flat","groupId","toOptionString","bt","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","At","breadcrumbs","getCollection","Tt","yt","ot","Oe","component","breadcrumb","resolve","Ie","Me","ke","qe","Le","Ve","breadcrumbKey","getName","link","it","we","Kt","Je","De","Ue","Pt","mode","query","ids","products","subscription","changeDetectorRef","unsubscribe","removeFacetValue","facetValuesRemoved","addFacetValues","mutate","Ne","icon","iconClass","requiresPermission","onClick","clearSelection","injector","selection","hostComponent","deleteCollections","_step16","Se","isVisible","_ref74","assignCollectionsToChannel","collectionIds","$e","getTranslationVars","_ref76","_ref77","_ref80","removeCollectionsFromChannel","K","depth","parentName","permissions","hasUpdatePermission$","hasDeletePermission$","selectionChanges$","previousValue","toggleExpanded","moveListItems","root","move","moveUp","moveDown","drop","previousIndex","delete","pipes","Qe","deleteFacets","_step17","Ee","_ref82","assignFacetsToChannel","facetIds","Ye","_ref84","_ref85","removeFacetsFromChannel","force","_step18","then","_ref88","removedCount","de","Ft","groupNameInputs","variantFormValues","copyFromDefault","onFormChange","handleEnter","stopPropagation","variantsChange","Ge","deleteProducts","_step19","je","_ref91","Be","_ref93","_ref94","_ref97","He","Ot","productOption","activeLanguage","customFieldsForm","_step20","_iterator20","update","updateVariantName","codeInputTouched","It","getTaxRatesSimple","taxRates","taxRate$","taxCategoryIdChange$","defaultTaxZone","zone","category","grossPrice$","priceChange$","_ref102","Math","round","selectFacetValueClick","Mt","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","formArray","buildFormGroupMap","trackById","inventoryIsNotTracked","getTaxCategoryName","getStockOnHandMinValue","getSaleableStockLevel","stockAllocated","areAllSelected","selectedVariantIds","assetChange","toggleSelectAll","selectionChange","toggleSelectVariant","indexOf","optionGroupName","optionName","pendingFacetValues","getFacetValueIds","existingFacetValues","formGroupMap","isVariantSelected","editOption","_step21","kt","getFeaturedAsset","pendingAssetChanges","_step22","Nt","registerBulkAction","T","Rt"],"sources":["webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.html","webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.ts","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.html","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","webpack:///src/lib/catalog/src/components/collection-tree/array-to-tree.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.html","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.ts","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.html","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.html","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipUntil.js","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/providers/product-detail/replace-last.ts","webpack:///src/lib/catalog/src/providers/product-detail/product-detail.service.ts","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.html","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list.component.html","webpack:///src/lib/catalog/src/components/product-list/product-list.component.ts","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.html","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.ts","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.html","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.html","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","webpack:///src/lib/catalog/src/providers/routing/asset-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/collection-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/facet-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-variants-resolver.ts","webpack:///src/lib/catalog/src/catalog.routes.ts","webpack:///src/lib/catalog/src/components/assign-to-channel-dialog/assign-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-to-channel-dialog/assign-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.graphql.ts","webpack:///src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component.html","webpack:///src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list-bulk-actions.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list-bulk-actions.ts","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list-bulk-actions.ts","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.html","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","webpack:///src/lib/catalog/src/catalog.module.ts"],"sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"asset-detail\"></vdr-action-bar-items>\n        <button\n            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<vdr-asset-preview\n    [asset]=\"entity$ | async\"\n    [editable]=\"true\"\n    [customFields]=\"customFields\"\n    [customFieldsForm]=\"detailForm.get('customFields')\"\n    (assetChange)=\"onAssetChange($event)\"\n></vdr-asset-preview>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    GetAsset,\n    LanguageCode,\n} from '@vendure/admin-ui/core';\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-asset-detail',\n    templateUrl: './asset-detail.component.html',\n    styleUrls: ['./asset-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\n    detailForm = new FormGroup({});\n    customFields: CustomFieldConfig[];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Asset');\n    }\n\n    ngOnInit() {\n        this.detailForm = new FormGroup({\n            name: new FormControl(''),\n            tags: new FormControl([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\n        this.detailForm.get('name')?.setValue(event.name);\n        this.detailForm.get('tags')?.setValue(event.tags);\n        this.detailForm.markAsDirty();\n    }\n\n    save() {\n        this.dataService.product\n            .updateAsset({\n                id: this.id,\n                name: this.detailForm.value.name,\n                tags: this.detailForm.value.tags,\n                customFields: this.detailForm.value.customFields,\n            })\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Asset',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\n        this.detailForm.get('name')?.setValue(entity.name);\n        this.detailForm.get('tags')?.setValue(entity.tags);\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetAssetList,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    SortOrder,\n    TagFragment,\n} from '@vendure/admin-ui/core';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-asset-list',\n    templateUrl: './asset-list.component.html',\n    styleUrls: ['./asset-list.component.scss'],\n})\nexport class AssetListComponent\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\n    implements OnInit {\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\n    uploading = false;\n    allTags$: Observable<TagFragment[]>;\n    paginationConfig$: Observable<PaginationInstance>;\n\n    constructor(\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\n            data => data.assets,\n            (skip, take) => {\n                const searchTerm = this.searchTerm$.value;\n                const tags = this.filterByTags$.value?.map(t => t.value);\n                return {\n                    options: {\n                        skip,\n                        take,\n                        ...(searchTerm\n                            ? {\n                                  filter: {\n                                      name: { contains: searchTerm },\n                                  },\n                              }\n                            : {}),\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                        tags,\n                        tagsOperator: LogicalOperator.AND,\n                    },\n                };\n            },\n            { take: 25, skip: 0 },\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\n        );\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\n\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\n    }\n\n    filesSelected(files: File[]) {\n        if (files.length) {\n            this.uploading = true;\n            this.dataService.product\n                .createAssets(files)\n                .pipe(finalize(() => (this.uploading = false)))\n                .subscribe(({ createAssets }) => {\n                    let successCount = 0;\n                    for (const result of createAssets) {\n                        switch (result.__typename) {\n                            case 'Asset':\n                                successCount++;\n                                break;\n                            case 'MimeTypeError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                    if (0 < successCount) {\n                        super.refresh();\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\n                            count: successCount,\n                        });\n                    }\n                });\n        }\n    }\n\n    deleteAssets(assets: Asset[]) {\n        this.showModalAndDelete(assets.map(a => a.id))\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(\n                            assets.map(a => a.id),\n                            response.message || '',\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\n                    }\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Assets',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Assets',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(assetIds: string[], message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-assets'),\n                translationVars: {\n                    count: assetIds.length,\n                },\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\n                map(res => res.deleteAssets),\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left [grow]=\"true\">\n        <vdr-asset-search-input\n            class=\"pr4 mt1\"\n            [tags]=\"allTags$ | async\"\n            (searchTermChange)=\"searchTerm$.next($event)\"\n            (tagsChange)=\"filterByTags$.next($event)\"\n        ></vdr-asset-search-input>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"asset-list\"></vdr-action-bar-items>\n        <vdr-asset-file-input\n            (selectFiles)=\"filesSelected($event)\"\n            [uploading]=\"uploading\"\n            dropZoneTarget=\".content-area\"\n        ></vdr-asset-file-input>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-asset-gallery\n    [assets]=\"(items$ | async)! | paginate: (paginationConfig$ | async) || {}\"\n    [multiSelect]=\"true\"\n    [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\n    (deleteAssets)=\"deleteAssets($event)\"\n></vdr-asset-gallery>\n\n<div class=\"paging-controls\">\n    <vdr-items-per-page-controls\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    ></vdr-items-per-page-controls>\n\n    <vdr-pagination-controls\n        [currentPage]=\"currentPage$ | async\"\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        [totalItems]=\"totalItems$ | async\"\n        (pageChange)=\"setPageNumber($event)\"\n    ></vdr-pagination-controls>\n</div>\n","<div class=\"card\" *ngIf=\"!compact; else compactView\">\n    <div class=\"card-img\">\n        <div class=\"featured-asset\">\n            <img\n                *ngIf=\"featuredAsset\"\n                [src]=\"featuredAsset | assetPreview:'small'\"\n                (click)=\"previewAsset(featuredAsset)\"\n            />\n            <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\">\n                <clr-icon shape=\"image\" size=\"128\"></clr-icon>\n                <div>{{ 'catalog.no-featured-asset' | translate }}</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-block\"><ng-container *ngTemplateOutlet=\"assetList\"></ng-container></div>\n    <div class=\"card-footer\" *vdrIfPermissions=\"updatePermissions\">\n        <button class=\"btn\" (click)=\"selectAssets()\">\n            <clr-icon shape=\"attachment\"></clr-icon>\n            {{ 'asset.add-asset' | translate }}\n        </button>\n    </div>\n</div>\n\n<ng-template #compactView>\n    <div class=\"featured-asset compact\">\n        <img\n            *ngIf=\"featuredAsset\"\n            [src]=\"featuredAsset | assetPreview:'thumb'\"\n            (click)=\"previewAsset(featuredAsset)\"\n        />\n\n        <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\"><clr-icon shape=\"image\" size=\"150\"></clr-icon></div>\n    </div>\n    <ng-container *ngTemplateOutlet=\"assetList\"></ng-container>\n    <button\n        *vdrIfPermissions=\"updatePermissions\"\n        class=\"compact-select btn btn-icon btn-sm btn-block\"\n        [title]=\"'asset.add-asset' | translate\"\n        (click)=\"selectAssets()\"\n    >\n        <clr-icon shape=\"attachment\"></clr-icon>\n        {{ 'asset.add-asset' | translate }}\n    </button>\n</ng-template>\n\n<ng-template #assetList>\n    <div class=\"all-assets\" [class.compact]=\"compact\" cdkDropListGroup>\n        <div\n            *ngFor=\"let asset of assets; let index = index\"\n            class=\"drop-list\"\n            cdkDropList\n            cdkDropListOrientation=\"horizontal\"\n            [cdkDropListData]=\"index\"\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\n            (cdkDropListDropped)=\"dropListDropped($event)\"\n        >\n            <vdr-dropdown cdkDrag>\n                <div\n                    class=\"asset-thumb\"\n                    vdrDropdownTrigger\n                    [class.featured]=\"isFeatured(asset)\"\n                    [title]=\"\"\n                    tabindex=\"0\"\n                >\n                    <img [src]=\"asset | assetPreview:'tiny'\" />\n                </div>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button type=\"button\" vdrDropdownItem (click)=\"previewAsset(asset)\">\n                        {{ 'asset.preview' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        [disabled]=\"isFeatured(asset) || !(updatePermissions | hasPermission)\"\n                        vdrDropdownItem\n                        (click)=\"setAsFeatured(asset)\"\n                    >\n                        {{ 'asset.set-as-featured-asset' | translate }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        class=\"remove-asset\"\n                        vdrDropdownItem\n                        [disabled]=\"!(updatePermissions | hasPermission)\"\n                        (click)=\"removeAsset(asset)\"\n                    >\n                        {{ 'asset.remove-asset' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n    </div>\n</ng-template>\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n} from '@angular/core';\nimport {\n    Asset,\n    AssetPickerDialogComponent,\n    AssetPreviewDialogComponent,\n    ModalService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport interface AssetChange {\n    assets: Asset[];\n    featuredAsset: Asset | undefined;\n}\n\n/**\n * A component which displays the Assets, and allows assets to be removed and\n * added, and for the featured asset to be set.\n *\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\n */\n@Component({\n    selector: 'vdr-assets',\n    templateUrl: './assets.component.html',\n    styleUrls: ['./assets.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssetsComponent {\n    @Input('assets') set assetsSetter(val: Asset[]) {\n        // create a new non-readonly array of assets\n        this.assets = (val || []).slice();\n    }\n\n    @Input() featuredAsset: Asset | undefined;\n    @HostBinding('class.compact')\n    @Input()\n    compact = false;\n    @Output() change = new EventEmitter<AssetChange>();\n\n    public assets: Asset[] = [];\n\n    @Input()\n    updatePermissions: string | string[] | Permission | Permission[];\n\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\n\n    selectAssets() {\n        this.modalService\n            .fromComponent(AssetPickerDialogComponent, {\n                size: 'xl',\n            })\n            .subscribe(result => {\n                if (result && result.length) {\n                    this.assets = unique(this.assets.concat(result), 'id');\n                    if (!this.featuredAsset) {\n                        this.featuredAsset = result[0];\n                    }\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    setAsFeatured(asset: Asset) {\n        this.featuredAsset = asset;\n        this.emitChangeEvent(this.assets, asset);\n    }\n\n    isFeatured(asset: Asset): boolean {\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\n    }\n\n    previewAsset(asset: Asset) {\n        this.modalService\n            .fromComponent(AssetPreviewDialogComponent, {\n                size: 'xl',\n                closable: true,\n                locals: { asset },\n            })\n            .subscribe();\n    }\n\n    removeAsset(asset: Asset) {\n        this.assets = this.assets.filter(a => a.id !== asset.id);\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\n        }\n        this.emitChangeEvent(this.assets, this.featuredAsset);\n    }\n\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\n        this.change.emit({\n            assets,\n            featuredAsset,\n        });\n    }\n\n    dropListDropped(event: CdkDragDrop<number>) {\n        moveItemInArray(this.assets, event.previousContainer.data, event.container.data);\n        this.emitChangeEvent(this.assets, this.featuredAsset);\n    }\n}\n","<div class=\"contents-header\">\n    <div class=\"header-title-row\">\n        <ng-container\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\n        ></ng-container>\n    </div>\n    <input\n        type=\"text\"\n        [placeholder]=\"'catalog.filter-by-name' | translate\"\n        [formControl]=\"filterTermControl\"\n    />\n</div>\n<div class=\"table-wrapper\">\n    <div class=\"progress loop\" [class.visible]=\"isLoading\"></div>\n    <vdr-data-table\n        [class.loading]=\"isLoading\"\n        [items]=\"contents$ | async\"\n        [itemsPerPage]=\"contentsItemsPerPage$ | async\"\n        [totalItems]=\"contentsTotalItems$ | async\"\n        [currentPage]=\"contentsCurrentPage$ | async\"\n        (pageChange)=\"setContentsPageNumber($event)\"\n        (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n    >\n        <ng-template let-variant=\"item\">\n            <td class=\"left align-middle\">{{ variant.name }}</td>\n            <td class=\"left align-middle\"><small class=\"sku\">{{ variant.sku }}</small></td>\n            <td class=\"right align-middle\">\n                <vdr-table-row-action\n                    iconShape=\"edit\"\n                    [label]=\"'common.edit' | translate\"\n                    [linkTo]=\"['/catalog/products', variant.productId, { tab: 'variants' }]\"\n                ></vdr-table-row-action>\n            </td>\n        </ng-template>\n    </vdr-data-table>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    CollectionFilterParameter,\n    ConfigurableOperationInput,\n    DataService,\n    GetCollectionContents,\n} from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    filter,\n    finalize,\n    map,\n    startWith,\n    switchMap,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-collection-contents',\n    templateUrl: './collection-contents.component.html',\n    styleUrls: ['./collection-contents.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() collectionId: string;\n    @Input() parentId: string;\n    @Input() updatedFilters: ConfigurableOperationInput[] | undefined;\n    @Input() previewUpdatedFilters = false;\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\n\n    contents$: Observable<GetCollectionContents.Items[]>;\n    contentsTotalItems$: Observable<number>;\n    contentsItemsPerPage$: Observable<number>;\n    contentsCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    isLoading = false;\n    private collectionIdChange$ = new BehaviorSubject<string>('');\n    private parentIdChange$ = new BehaviorSubject<string>('');\n    private filterChanges$ = new BehaviorSubject<ConfigurableOperationInput[]>([]);\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.contentsCurrentPage$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('contentsPage')),\n            map(page => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.contentsItemsPerPage$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('contentsPerPage')),\n            map(perPage => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        const filterChanges$ = this.filterChanges$.asObservable().pipe(\n            filter(() => this.previewUpdatedFilters),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith([]),\n        );\n\n        const fetchUpdate$ = combineLatest(\n            this.collectionIdChange$,\n            this.parentIdChange$,\n            this.contentsCurrentPage$,\n            this.contentsItemsPerPage$,\n            filterTerm$,\n            filterChanges$,\n            this.refresh$,\n        );\n\n        const collection$ = fetchUpdate$.pipe(\n            takeUntil(this.destroy$),\n            tap(() => (this.isLoading = true)),\n            debounceTime(50),\n            switchMap(([id, parentId, currentPage, itemsPerPage, filterTerm, filters]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                if (filters.length && this.previewUpdatedFilters) {\n                    const filterClause = filterTerm\n                        ? ({ name: { contains: filterTerm } } as CollectionFilterParameter)\n                        : undefined;\n                    return this.dataService.collection\n                        .previewCollectionVariants(\n                            {\n                                parentId,\n                                filters,\n                            },\n                            {\n                                take,\n                                skip,\n                                filter: filterClause,\n                            },\n                        )\n                        .mapSingle(data => data.previewCollectionVariants)\n                        .pipe(catchError(() => of({ items: [], totalItems: 0 })));\n                } else if (id) {\n                    return this.dataService.collection\n                        .getCollectionContents(id, take, skip, filterTerm)\n                        .mapSingle(data => data.collection?.productVariants);\n                } else {\n                    return of(null);\n                }\n            }),\n            tap(() => (this.isLoading = false)),\n            finalize(() => (this.isLoading = false)),\n        );\n\n        this.contents$ = collection$.pipe(map(result => (result ? result.items : [])));\n        this.contentsTotalItems$ = collection$.pipe(map(result => (result ? result.totalItems : 0)));\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('collectionId' in changes) {\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\n        }\n        if ('parentId' in changes) {\n            this.parentIdChange$.next(changes.parentId.currentValue);\n        }\n        if ('updatedFilters' in changes) {\n            if (this.updatedFilters) {\n                this.filterChanges$.next(this.updatedFilters);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('contentsPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('contentsPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./'], {\n            relativeTo: this.route,\n            queryParams: {\n                [key]: value,\n            },\n            queryParamsHandling: 'merge',\n            replaceUrl: true,\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"collection-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as collection\">\n\n    <nav role=\"navigation\">\n        <ul class=\"collection-breadcrumbs\">\n            <li *ngFor=\"let breadcrumb of collection.breadcrumbs; let isFirst = first; let isLast = last\">\n                <a [routerLink]=\"['/catalog/collections']\" *ngIf=\"isFirst\">{{ 'catalog.root-collection' | translate }}</a>\n                <a [routerLink]=\"['/catalog/collections', breadcrumb.id]\" *ngIf=\"!isFirst && !isLast\">{{ breadcrumb.name | translate }}</a>\n                <ng-container *ngIf=\"isLast\">{{ breadcrumb.name | translate }}</ng-container>\n            </li>\n        </ul>\n    </nav>\n    <div class=\"clr-row\">\n        <div class=\"clr-col\">\n            <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                <clr-toggle-wrapper>\n                    <input\n                        type=\"checkbox\"\n                        clrToggle\n                        formControlName=\"visible\"\n                        id=\"visibility\"\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    />\n                    <label class=\"visible-toggle\">\n                        <ng-container *ngIf=\"detailForm.value.visible; else private\">{{\n                            'catalog.public' | translate\n                            }}</ng-container>\n                        <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                    </label>\n                </clr-toggle-wrapper>\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                <input\n                    id=\"name\"\n                    type=\"text\"\n                    formControlName=\"name\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (input)=\"updateSlug($event.target.value)\"\n                />\n            </vdr-form-field>\n            <vdr-form-field\n                [label]=\"'catalog.slug' | translate\"\n                for=\"slug\"\n                [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\n            >\n                <input\n                    id=\"slug\"\n                    type=\"text\"\n                    formControlName=\"slug\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                />\n            </vdr-form-field>\n            <vdr-rich-text-editor\n                formControlName=\"description\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                [label]=\"'common.description' | translate\"\n            ></vdr-rich-text-editor>\n\n            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                <label>{{ 'common.custom-fields' | translate }}</label>\n                <vdr-tabbed-custom-fields\n                    entityName=\"Collection\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get(['customFields'])\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </section>\n            <vdr-custom-detail-component-host\n                locationId=\"collection-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </div>\n        <div class=\"clr-col-md-auto\">\n            <vdr-assets\n                [assets]=\"collection.assets\"\n                [featuredAsset]=\"collection.featuredAsset\"\n                [updatePermissions]=\"updatePermission\"\n                (change)=\"assetChanges = $event\"\n            ></vdr-assets>\n        </div>\n    </div>\n    <div class=\"clr-row\" formArrayName=\"filters\">\n        <div class=\"clr-col\">\n            <label>{{ 'catalog.filters' | translate }}</label>\n            <ng-container *ngFor=\"let filter of filters; index as i; trackBy:trackByFn\">\n                <vdr-configurable-input\n                    (remove)=\"removeFilter(i)\"\n                    [position]=\"i\"\n                    [operation]=\"filter\"\n                    [operationDefinition]=\"getFilterDefinition(filter)\"\n                    [formControlName]=\"i\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-configurable-input>\n            </ng-container>\n\n            <div *vdrIfPermissions=\"updatePermission\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-condition' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let filter of allFilters\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"addFilter(filter)\"\n                        >\n                            {{ filter.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <vdr-collection-contents\n                [collectionId]=\"id\"\n                [parentId]=\"parentId$ | async\"\n                [updatedFilters]=\"updatedFilters$ | async\"\n                [previewUpdatedFilters]=\"livePreview\"\n                #collectionContents\n            >\n                <ng-template let-count>\n                    <div class=\"contents-title\">\n                        {{ 'catalog.collection-contents' | translate }} ({{\n                        'common.results-count' | translate: {count: count}\n                        }})\n                    </div>\n                    <clr-checkbox-wrapper [class.disabled]=\"detailForm.get('filters')?.pristine\">\n                        <input\n                            type=\"checkbox\"\n                            clrCheckbox\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [disabled]=\"detailForm.get('filters')?.pristine\"\n                            [ngModel]=\"livePreview\"\n                            (ngModelChange)=\"toggleLivePreview()\"\n                        />\n                        <label>{{ 'catalog.live-preview-contents' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                </ng-template>\n            </vdr-collection-contents>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    Collection,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreateCollectionInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    LanguageCode,\n    LocalStorageService,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    unicodePatternValidator,\n    UpdateCollectionInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport { debounceTime, filter, map, mergeMap, switchMap, take } from 'rxjs/operators';\n\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\n\n@Component({\n    selector: 'vdr-collection-detail',\n    templateUrl: './collection-detail.component.html',\n    styleUrls: ['./collection-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDetailComponent\n    extends BaseDetailComponent<Collection.Fragment>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\n    filters: ConfigurableOperation[] = [];\n    allFilters: ConfigurableOperationDefinition[] = [];\n    updatedFilters$: Observable<ConfigurableOperationInput[]>;\n    livePreview = false;\n    parentId$: Observable<string | undefined>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    private filterRemoved$ = new Subject<void>();\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private localStorageService: LocalStorageService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Collection');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\n            description: '',\n            visible: false,\n            filters: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        this.livePreview = this.localStorageService.get('livePreviewCollectionContents') ?? false;\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\n            this.allFilters = res.collectionFilters;\n        });\n        const filtersFormArray = this.detailForm.get('filters') as FormArray;\n        this.updatedFilters$ = merge(filtersFormArray.statusChanges, this.filterRemoved$).pipe(\n            debounceTime(200),\n            filter(() => filtersFormArray.touched),\n            map(() =>\n                this.mapOperationsToInputs(this.filters, filtersFormArray.value).filter(_filter => {\n                    // ensure all the arguments have valid values. E.g. a newly-added\n                    // filter will not yet have valid values\n                    for (const arg of _filter.arguments) {\n                        if (arg.value === '') {\n                            return false;\n                        }\n                    }\n                    return true;\n                }),\n            ),\n        );\n        this.parentId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('parentId') || undefined),\n            switchMap(parentId => {\n                if (parentId) {\n                    return of(parentId);\n                } else {\n                    return this.entity$.pipe(map(collection => collection.parent?.id));\n                }\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getFilterDefinition(_filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allFilters.find(f => f.code === _filter.code);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    /**\n     * If creating a new Collection, automatically generate the slug based on the collection name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    addFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const argsHash = collectionFilter.args.reduce(\n            (output, arg) => ({\n                ...output,\n                [arg.name]: getConfigArgValue(arg.value),\n            }),\n            {},\n        );\n        filtersArray.push(\n            this.formBuilder.control({\n                code: collectionFilter.code,\n                args: argsHash,\n            }),\n        );\n        this.filters.push({\n            code: collectionFilter.code,\n            args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n        });\n    }\n\n    removeFilter(index: number) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        if (index !== -1) {\n            filtersArray.removeAt(index);\n            filtersArray.markAsDirty();\n            filtersArray.markAsTouched();\n            this.filters.splice(index, 1);\n            this.filterRemoved$.next();\n        }\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as CreateCollectionInput;\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\n                    if (parentId) {\n                        input.parentId = parentId;\n                    }\n                    return this.dataService.collection.createCollection(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Collection',\n                    });\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdateCollectionInput;\n                    return this.dataService.collection.updateCollection(input);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Collection',\n                    });\n                    this.contentsComponent.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    toggleLivePreview() {\n        this.livePreview = !this.livePreview;\n        this.localStorageService.set('livePreviewCollectionContents', this.livePreview);\n    }\n\n    trackByFn(index: number, item: ConfigurableOperation) {\n        return JSON.stringify(item);\n    }\n\n    /**\n     * Sets the values of the form on changes to the category or current language.\n     */\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(entity, languageCode);\n\n        this.detailForm.patchValue({\n            name: currentTranslation ? currentTranslation.name : '',\n            slug: currentTranslation ? currentTranslation.slug : '',\n            description: currentTranslation ? currentTranslation.description : '',\n            visible: !entity.isPrivate,\n        });\n\n        const formArray = this.detailForm.get('filters') as FormArray;\n        if (formArray.length !== entity.filters.length) {\n            formArray.clear();\n            this.filters = [];\n            entity.filters.forEach(f => this.addFilter(f));\n        }\n\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['customFields']),\n                entity,\n                currentTranslation,\n            );\n        }\n    }\n\n    /**\n     * Given a category and the value of the form, this method creates an updated copy of the category which\n     * can then be persisted to the API.\n     */\n    private getUpdatedCollection(\n        category: Collection.Fragment,\n        form: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateCollectionInput | UpdateCollectionInput {\n        const updatedCategory = createUpdatedTranslatable({\n            translatable: category,\n            updatedFields: form.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: category.name || '',\n                slug: category.slug || '',\n                description: category.description || '',\n            },\n        });\n        return {\n            ...updatedCategory,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            isPrivate: !form.value.visible,\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\n        };\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.entries(formValueOperations[i].args).map(([name, value], j) => {\n                    return {\n                        name,\n                        value: encodeConfigArgValue(value),\n                    };\n                }),\n            };\n        });\n    }\n}\n","export type HasParent = { id: string; parent?: { id: string } | null };\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(\n    nodes: T[],\n    currentState?: RootNode<T>,\n    expandedIds: string[] = [],\n): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n    const currentStateMap = treeToMap(currentState);\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map(n => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? expandedIds.includes(id);\n            const parent = mappedElem.parent;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parent.id];\n            if (!parentIsRoot) {\n                if (mappedArr[parent.id]) {\n                    mappedArr[parent.id].children.push(mappedElem);\n                } else {\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n\n/**\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n */\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\n    const nodeMap = new Map<string, TreeNode<T>>();\n    function visit(node: TreeNode<T>) {\n        nodeMap.set(node.id, node);\n        node.children.forEach(visit);\n    }\n    if (tree) {\n        visit(tree as TreeNode<T>);\n    }\n    return nodeMap;\n}\n","<vdr-collection-tree-node\n    *ngIf=\"collectionTree\"\n    cdkDropListGroup\n    [expandAll]=\"expandAll\"\n    [collectionTree]=\"collectionTree\"\n    [selectionManager]=\"selectionManager\"\n    [activeCollectionId]=\"activeCollectionId\"\n></vdr-collection-tree-node>\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { Collection, SelectionManager } from '@vendure/admin-ui/core';\n\nimport { arrayToTree, HasParent, RootNode, TreeNode } from './array-to-tree';\n\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\n\n@Component({\n    selector: 'vdr-collection-tree',\n    templateUrl: 'collection-tree.component.html',\n    styleUrls: ['./collection-tree.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeComponent implements OnChanges {\n    @Input() collections: CollectionPartial[];\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    @Input() expandedIds: string[] = [];\n    @Input() selectionManager: SelectionManager<CollectionPartial>;\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\n    @Output() deleteCollection = new EventEmitter<string>();\n    collectionTree: RootNode<CollectionPartial>;\n    private allMoveListItems: Array<{ path: string; id: string; ancestorIdPath: Set<string> }> = [];\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('collections' in changes && this.collections) {\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree, this.expandedIds);\n            this.allMoveListItems = [];\n        }\n    }\n\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        const item = event.item.data as CollectionPartial;\n        const newParent = event.container.data;\n        const newParentId = newParent.id;\n        if (newParentId == null) {\n            throw new Error(`Could not determine the ID of the root Collection`);\n        }\n        this.rearrange.emit({\n            collectionId: item.id,\n            parentId: newParentId,\n            index: event.currentIndex,\n        });\n    }\n\n    onMove(event: RearrangeEvent) {\n        this.rearrange.emit(event);\n    }\n\n    onDelete(id: string) {\n        this.deleteCollection.emit(id);\n    }\n\n    getMoveListItems(collection: CollectionPartial) {\n        if (this.allMoveListItems.length === 0) {\n            this.allMoveListItems = this.calculateAllMoveListItems();\n        }\n        return this.allMoveListItems.filter(\n            item =>\n                item.id !== collection.id &&\n                !item.ancestorIdPath.has(collection.id) &&\n                item.id !== collection.parent?.id,\n        );\n    }\n\n    calculateAllMoveListItems() {\n        const visit = (\n            node: TreeNode<any>,\n            parentPath: string[],\n            ancestorIdPath: Set<string>,\n            output: Array<{ path: string; id: string; ancestorIdPath: Set<string> }>,\n        ) => {\n            const path = parentPath.concat(node.name);\n            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });\n            node.children.forEach(child =>\n                visit(child, path, new Set<string>([...ancestorIdPath, node.id]), output),\n            );\n            return output;\n        };\n        return visit(this.collectionTree, [], new Set<string>(), []);\n    }\n\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\n        return !node.hasOwnProperty('parent');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"\">\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"filterTermControl\"\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\n                class=\"clr-input search-input\"\n            />\n            <div class=\"flex center\">\n                <clr-toggle-wrapper\n                    class=\"expand-all-toggle mt2\"\n                >\n                    <input type=\"checkbox\" clrToggle [(ngModel)]=\"expandAll\" (change)=\"toggleExpandAll()\" />\n                    <label>\n                        {{ 'catalog.expand-all-collections' | translate }}\n                    </label>\n                </clr-toggle-wrapper>\n                <vdr-language-selector\n                    class=\"mt2\"\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"contentLanguage$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"collection-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n            [routerLink]=\"['./create']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-collection' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"bulk-select-controls\">\n    <input\n        type=\"checkbox\"\n        clrCheckbox\n        [checked]=\"selectionManager.areAllCurrentItemsSelected()\"\n        (click)=\"selectionManager.toggleSelectAll()\"\n    />\n    <vdr-bulk-action-menu\n        class=\"ml2\"\n        locationId=\"collection-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n</div>\n<div class=\"collection-wrapper\">\n    <vdr-collection-tree\n        [collections]=\"items$ | async\"\n        [activeCollectionId]=\"activeCollectionId$ | async\"\n        [expandAll]=\"expandAll\"\n        [expandedIds]=\"expandedIds\"\n        [selectionManager]=\"selectionManager\"\n        (rearrange)=\"onRearrange($event)\"\n        (deleteCollection)=\"deleteCollection($event)\"\n    ></vdr-collection-tree>\n\n    <div class=\"collection-contents\" [class.expanded]=\"activeCollectionId$ | async\">\n        <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\">\n            <ng-template let-count>\n                <div class=\"collection-title\">\n                    {{ activeCollectionTitle$ | async }} ({{\n                        'common.results-count' | translate: { count: count }\n                    }})\n                </div>\n                <button type=\"button\" class=\"close-button\" (click)=\"closeContents()\">\n                    <clr-icon shape=\"close\"></clr-icon>\n                </button>\n            </ng-template>\n        </vdr-collection-contents>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    GetCollectionList,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    QueryResult,\n    SelectionManager,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\n\nimport { CollectionPartial, RearrangeEvent } from '../collection-tree/collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-list',\n    templateUrl: './collection-list.component.html',\n    styleUrls: ['./collection-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionListComponent implements OnInit, OnDestroy {\n    filterTermControl = new FormControl('');\n    activeCollectionId$: Observable<string | null>;\n    activeCollectionTitle$: Observable<string>;\n    items$: Observable<GetCollectionList.Items[]>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    expandAll = false;\n    expandedIds: string[] = [];\n    selectionManager: SelectionManager<CollectionPartial>;\n    private queryResult: QueryResult<any>;\n    private destroy$ = new Subject<void>();\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private router: Router,\n        private route: ActivatedRoute,\n        private serverConfigService: ServerConfigService,\n        private changeDetectorRef: ChangeDetectorRef,\n    ) {\n        this.selectionManager = new SelectionManager({\n            additiveMode: true,\n            multiSelect: true,\n            itemsAreEqual: (a, b) => a.id === b.id,\n        });\n    }\n\n    ngOnInit() {\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\n        this.items$ = this.queryResult\n            .mapStream(data => data.collections.items)\n            .pipe(\n                tap(items => this.selectionManager.setCurrentItems(items)),\n                shareReplay(1),\n            );\n        this.activeCollectionId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n        );\n        this.expandedIds = this.route.snapshot.queryParamMap.get('expanded')?.split(',') ?? [];\n        this.expandAll = this.route.snapshot.queryParamMap.get('expanded') === 'all';\n\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\n            map(([id, collections]) => {\n                if (id) {\n                    const match = collections.find(c => c.id === id);\n                    return match ? match.name : '';\n                }\n                return '';\n            }),\n        );\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n\n        this.filterTermControl.valueChanges\n            .pipe(debounceTime(250), takeUntil(this.destroy$))\n            .subscribe(term => {\n                this.router.navigate(['./'], {\n                    queryParams: {\n                        q: term || undefined,\n                    },\n                    queryParamsHandling: 'merge',\n                    relativeTo: this.route,\n                });\n            });\n\n        this.route.queryParamMap\n            .pipe(\n                map(qpm => qpm.get('q')),\n                distinctUntilChanged(),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n        this.filterTermControl.patchValue(this.route.snapshot.queryParamMap.get('q'));\n    }\n\n    ngOnDestroy() {\n        this.queryResult.completed$.next();\n        this.destroy$.next(undefined);\n        this.destroy$.complete();\n    }\n\n    toggleExpandAll() {\n        this.router.navigate(['./'], {\n            queryParams: {\n                expanded: this.expandAll ? 'all' : undefined,\n            },\n            queryParamsHandling: 'merge',\n            relativeTo: this.route,\n        });\n    }\n\n    onRearrange(event: RearrangeEvent) {\n        this.dataService.collection.moveCollection([event]).subscribe({\n            next: () => {\n                this.notificationService.success(_('common.notify-saved-changes'));\n                this.refresh();\n            },\n            error: err => {\n                this.notificationService.error(_('common.notify-save-changes-error'));\n            },\n        });\n    }\n\n    deleteCollection(id: string) {\n        this.items$\n            .pipe(\n                take(1),\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\n                switchMap(hasChildren => {\n                    return this.modalService.dialog({\n                        title: _('catalog.confirm-delete-collection'),\n                        body: hasChildren\n                            ? _('catalog.confirm-delete-collection-and-children-body')\n                            : undefined,\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\n                        ],\n                    });\n                }),\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Collection',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    closeContents() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    refresh() {\n        const filterTerm = this.route.snapshot.queryParamMap.get('q');\n        this.queryResult.ref.refetch({\n            options: {\n                skip: 0,\n                take: 1000,\n                ...(filterTerm\n                    ? {\n                          filter: {\n                              name: {\n                                  contains: filterTerm,\n                              },\n                          },\n                      }\n                    : {}),\n            },\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as facet\">\n    <section class=\"form-block\" formGroupName=\"facet\">\n        <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n            <clr-toggle-wrapper>\n                <input\n                    type=\"checkbox\"\n                    clrToggle\n                    [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    formControlName=\"visible\"\n                    id=\"visibility\"\n                />\n                <label class=\"visible-toggle\">\n                    <ng-container *ngIf=\"detailForm.value.facet.visible; else private\">{{\n                        'catalog.public' | translate\n                    }}</ng-container>\n                    <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                </label>\n            </clr-toggle-wrapper>\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n            <input\n                id=\"name\"\n                type=\"text\"\n                formControlName=\"name\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (input)=\"updateCode(facet.code, $event.target.value)\"\n            />\n        </vdr-form-field>\n        <vdr-form-field\n            [label]=\"'common.code' | translate\"\n            for=\"code\"\n            [readOnlyToggle]=\"updatePermission | hasPermission\"\n        >\n            <input\n                id=\"code\"\n                type=\"text\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"code\"\n            />\n        </vdr-form-field>\n\n        <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n            <label>{{ 'common.custom-fields' | translate }}</label>\n            <vdr-tabbed-custom-fields\n                entityName=\"Facet\"\n                [customFields]=\"customFields\"\n                [customFieldsFormGroup]=\"detailForm.get(['facet', 'customFields'])\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n            ></vdr-tabbed-custom-fields>\n        </section>\n        <vdr-custom-detail-component-host\n            locationId=\"facet-detail\"\n            [entity$]=\"entity$\"\n            [detailForm]=\"detailForm\"\n        ></vdr-custom-detail-component-host>\n    </section>\n\n    <section class=\"form-block\" *ngIf=\"!(isNew$ | async)\">\n        <label>{{ 'catalog.facet-values' | translate }}</label>\n\n        <table class=\"facet-values-list table\" formArrayName=\"values\" *ngIf=\"0 < getValuesFormArray().length\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'common.name' | translate }}</th>\n                    <th>{{ 'common.code' | translate }}</th>\n                    <ng-container *ngIf=\"customValueFields.length\">\n                        <th>{{ 'common.custom-fields' | translate }}</th>\n                    </ng-container>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"facet-value\" *ngFor=\"let value of values; let i = index\" [formGroupName]=\"i\">\n                    <td class=\"align-middle\">\n                        <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\n                    </td>\n                    <td class=\"align-middle\">\n                        <input\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateValueCode(facet.values[i]?.code, $event.target.value, i)\"\n                        />\n                    </td>\n                    <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" readonly /></td>\n                    <td class=\"\" *ngIf=\"customValueFields.length\">\n                        <vdr-tabbed-custom-fields\n                            entityName=\"FacetValue\"\n                            [customFields]=\"customValueFields\"\n                            [compact]=\"true\"\n                            [customFieldsFormGroup]=\"detailForm.get(['values', i, 'customFields'])\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-tabbed-custom-fields>\n                    </td>\n                    <td class=\"align-middle\">\n                        <vdr-dropdown>\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                                {{ 'common.actions' | translate }}\n                                <clr-icon shape=\"caret down\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                <button\n                                    type=\"button\"\n                                    class=\"delete-button\"\n                                    (click)=\"deleteFacetValue(facet.values[i]?.id, i)\"\n                                    [disabled]=\"!(updatePermission | hasPermission)\"\n                                    vdrDropdownItem\n                                >\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                    {{ 'common.delete' | translate }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n\n        <div>\n            <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n                (click)=\"addFacetValue()\"\n            >\n                <clr-icon shape=\"add\"></clr-icon>\n                {{ 'catalog.add-facet-value' | translate }}\n            </button>\n        </div>\n    </section>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    CreateFacetValueInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateFacetValueInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-detail',\n    templateUrl: './facet-detail.component.html',\n    styleUrls: ['./facet-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetDetailComponent\n    extends BaseDetailComponent<FacetWithValues.Fragment>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    customValueFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Facet');\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\n        this.detailForm = this.formBuilder.group({\n            facet: this.formBuilder.group({\n                code: ['', Validators.required],\n                name: '',\n                visible: true,\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            values: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['facet', 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['values', index, 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    customValueFieldIsSet(index: number, name: string): boolean {\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\n    }\n\n    getValuesFormArray(): FormArray {\n        return this.detailForm.get('values') as FormArray;\n    }\n\n    addFacetValue() {\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n        if (valuesFormArray) {\n            const valueGroup = this.formBuilder.group({\n                id: '',\n                name: ['', Validators.required],\n                code: '',\n            });\n            const newValue: any = { name: '', code: '' };\n            if (this.customValueFields.length) {\n                const customValueFieldsGroup = new FormGroup({});\n                newValue.customFields = {};\n\n                for (const fieldDef of this.customValueFields) {\n                    const key = fieldDef.name;\n                    customValueFieldsGroup.addControl(key, new FormControl());\n                }\n\n                valueGroup.addControl('customFields', customValueFieldsGroup);\n            }\n            valuesFormArray.insert(valuesFormArray.length, valueGroup);\n            this.values.push(newValue);\n        }\n    }\n\n    create() {\n        const facetForm = this.detailForm.get('facet');\n        if (!facetForm || !facetForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const newFacet = this.getUpdatedFacet(\n                        facet,\n                        facetForm as FormGroup,\n                        languageCode,\n                    ) as CreateFacetInput;\n                    return this.dataService.facet.createFacet(newFacet);\n                }),\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const facetGroup = this.detailForm.get('facet');\n                    const updateOperations: Array<Observable<any>> = [];\n\n                    if (facetGroup && facetGroup.dirty) {\n                        const newFacet = this.getUpdatedFacet(\n                            facet,\n                            facetGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateFacetInput;\n                        if (newFacet) {\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\n                        }\n                    }\n                    const valuesArray = this.detailForm.get('values');\n                    if (valuesArray && valuesArray.dirty) {\n                        const createdValues = this.getCreatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (createdValues.length) {\n                            updateOperations.push(\n                                this.dataService.facet\n                                    .createFacetValues(createdValues)\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\n                            );\n                        }\n                        const updatedValues = this.getUpdatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (updatedValues.length) {\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\n                        }\n                    }\n\n                    return forkJoin(updateOperations);\n                }),\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\n        if (!facetValueId) {\n            // deleting a newly-added (not persisted) FacetValue\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n            if (valuesFormArray) {\n                valuesFormArray.removeAt(index);\n            }\n            this.values.splice(index, 1);\n            return;\n        }\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetValueId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet-value'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\n                ),\n                map(result => result.deleteFacetValues[0]),\n            );\n    }\n\n    /**\n     * Sets the values of the form on changes to the facet or current language.\n     */\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(facet, languageCode);\n\n        this.detailForm.patchValue({\n            facet: {\n                code: facet.code,\n                visible: !facet.isPrivate,\n                name: currentTranslation?.name ?? '',\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['facet', 'customFields']),\n                facet,\n                currentTranslation,\n            );\n        }\n\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\n        this.values = [...facet.values];\n        facet.values.forEach((value, i) => {\n            const valueTranslation = findTranslation(value, languageCode);\n            const group = {\n                id: value.id,\n                code: value.code,\n                name: valueTranslation ? valueTranslation.name : '',\n            };\n            const valueControl = currentValuesFormArray.at(i);\n            if (valueControl) {\n                valueControl.get('id')?.setValue(group.id);\n                valueControl.get('code')?.setValue(group.code);\n                valueControl.get('name')?.setValue(group.name);\n            } else {\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\n            }\n            if (this.customValueFields.length) {\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\n                if (!customValueFieldsGroup) {\n                    customValueFieldsGroup = new FormGroup({});\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\n                        'customFields',\n                        customValueFieldsGroup,\n                    );\n                }\n\n                if (customValueFieldsGroup) {\n                    for (const fieldDef of this.customValueFields) {\n                        const key = fieldDef.name;\n                        const fieldValue =\n                            fieldDef.type === 'localeString'\n                                ? (valueTranslation as any | undefined)?.customFields?.[key]\n                                : (value as any).customFields[key];\n                        const control = customValueFieldsGroup.get(key);\n                        if (control) {\n                            control.setValue(fieldValue);\n                        } else {\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\n     * can then be persisted to the API.\n     */\n    private getUpdatedFacet(\n        facet: FacetWithValues.Fragment,\n        facetFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateFacetInput | UpdateFacetInput {\n        const input = createUpdatedTranslatable({\n            translatable: facet,\n            updatedFields: facetFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: facet.name || '',\n            },\n        });\n        input.isPrivate = !facetFormGroup.value.visible;\n        return input;\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\n     * which can be persisted to the API via a createFacetValues mutation.\n     */\n    private getCreatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): CreateFacetValueInput[] {\n        return valuesFormArray.controls\n            .filter(c => !c.value.id)\n            .map(c => c.value)\n            .map(value =>\n                createUpdatedTranslatable({\n                    translatable: { ...value, translations: [] as any },\n                    updatedFields: value,\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                }),\n            )\n            .map(input => ({\n                facetId: facet.id,\n                ...input,\n            }));\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\n     * which can be persisted to the API via an updateFacetValues mutation.\n     */\n    private getUpdatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): UpdateFacetValueInput[] {\n        const dirtyValues = facet.values.filter((v, i) => {\n            const formRow = valuesFormArray.get(i.toString());\n            return formRow && formRow.dirty && formRow.value.id;\n        });\n        const dirtyValueValues = valuesFormArray.controls\n            .filter(c => c.dirty && c.value.id)\n            .map(c => c.value);\n\n        if (dirtyValues.length !== dirtyValueValues.length) {\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\n        }\n        return dirtyValues\n            .map((value, i) => {\n                return createUpdatedTranslatable({\n                    translatable: value,\n                    updatedFields: dirtyValueValues[i],\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n            })\n            .filter(notNullOrUndefined);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"\">\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"filterTermControl\"\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\n                class=\"clr-input search-input\"\n            />\n            <div>\n                <vdr-language-selector\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"contentLanguage$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"facet-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n            [routerLink]=\"['./create']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-facet' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    [selectionManager]=\"selectionManager\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"facet-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'catalog.values' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'catalog.visibility' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-facet=\"item\">\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.code }}</td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.name }}</td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-facet-value-chip\n                *ngFor=\"let value of facet.values | slice: 0:displayLimit[facet.id] || 3\"\n                [facetValue]=\"value\"\n                [removable]=\"false\"\n                [displayFacetName]=\"false\"\n            ></vdr-facet-value-chip>\n            <button\n                class=\"btn btn-sm btn-secondary btn-icon\"\n                *ngIf=\"facet.values.length > initialLimit\"\n                (click)=\"toggleDisplayLimit(facet)\"\n            >\n                <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.values.length; else collapse\">\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ facet.values.length - initialLimit }}\n                </ng-container>\n                <ng-template #collapse>\n                    <clr-icon shape=\"minus\"></clr-icon>\n                </ng-template>\n            </button>\n        </td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-chip>\n                <ng-container *ngIf=\"!facet.isPrivate; else private\">{{\n                    'catalog.public' | translate\n                }}</ng-container>\n                <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n            </vdr-chip>\n        </td>\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', facet.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteFacet(facet.id)\"\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteFacet'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetFacetList,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    SelectionManager,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\nimport { EMPTY, Observable } from 'rxjs';\nimport { debounceTime, filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-list',\n    templateUrl: './facet-list.component.html',\n    styleUrls: ['./facet-list.component.scss'],\n})\nexport class FacetListComponent\n    extends BaseListComponent<GetFacetList.Query, GetFacetList.Items>\n    implements OnInit\n{\n    filterTermControl = new FormControl('');\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    selectionManager: SelectionManager<GetFacetList.Items>;\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private serverConfigService: ServerConfigService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\n            data => data.facets,\n            (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        name: {\n                            contains: this.filterTermControl.value,\n                        },\n                    },\n                    sort: {\n                        createdAt: SortOrder.DESC,\n                    },\n                },\n            }),\n        );\n        this.selectionManager = new SelectionManager<GetFacetList.Items>({\n            multiSelect: true,\n            itemsAreEqual: (a, b) => a.id === b.id,\n            additiveMode: true,\n        });\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n        this.filterTermControl.valueChanges\n            .pipe(\n                filter(value => 2 <= value.length || value.length === 0),\n                debounceTime(250),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n    }\n\n    toggleDisplayLimit(facet: GetFacetList.Items) {\n        if (this.displayLimit[facet.id] === facet.values.length) {\n            this.displayLimit[facet.id] = this.initialLimit;\n        } else {\n            this.displayLimit[facet.id] = facet.values.length;\n        }\n    }\n\n    deleteFacet(facetValueId: string) {\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    private showModalAndDelete(facetId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    {\n                        type: 'danger',\n                        label: message ? _('common.force-delete') : _('common.delete'),\n                        returnValue: true,\n                    },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\n                map(res => res.deleteFacet),\n            );\n    }\n}\n","import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n    return (source) => source.lift(new SkipUntilOperator(notifier));\n}\nclass SkipUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    }\n}\nclass SkipUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier) {\n        super(destination);\n        this.hasValue = false;\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        this.add(innerSubscriber);\n        this.innerSubscription = innerSubscriber;\n        const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            this.add(innerSubscription);\n            this.innerSubscription = innerSubscription;\n        }\n    }\n    _next(value) {\n        if (this.hasValue) {\n            super._next(value);\n        }\n    }\n    notifyNext() {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    }\n    notifyComplete() {\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\n\n<vdr-facet-value-selector\n    [facets]=\"facets\"\n    (selectedValuesChange)=\"selectedValues = $event\"\n></vdr-facet-value-selector>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"selectValues()\"\n        [disabled]=\"selectedValues.length === 0\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.add-facets' | translate }}\n    </button>\n</ng-template>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n} from '@angular/core';\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-apply-facet-dialog',\n    templateUrl: './apply-facet-dialog.component.html',\n    styleUrls: ['./apply-facet-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\n    resolveWith: (result?: FacetValue[]) => void;\n    selectedValues: FacetValue[] = [];\n    // Provided by caller\n    facets: FacetWithValues.Fragment[];\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngAfterViewInit() {\n        setTimeout(() => this.selector.focus(), 0);\n    }\n\n    selectValues() {\n        this.resolveWith(this.selectedValues);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<ng-template vdrDialogTitle>\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\n        'catalog.assign-variants-to-channel' | translate\n    }}</ng-container>\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\n</ng-template>\n\n<div class=\"flex\">\n    <clr-input-container>\n        <label>{{ 'common.channel' | translate }}</label>\n        <vdr-channel-assignment-control\n            clrInput\n            [multiple]=\"false\"\n            [includeDefaultChannel]=\"false\"\n            [disableChannelIds]=\"currentChannelIds\"\n            [formControl]=\"selectedChannelIdControl\"\n        ></vdr-channel-assignment-control>\n    </clr-input-container>\n    <div class=\"flex-spacer\"></div>\n    <clr-input-container>\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\n    </clr-input-container>\n</div>\n\n<div class=\"channel-price-preview\">\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>{{ 'common.name' | translate }}</th>\n                <th>\n                    {{\n                        'catalog.price-in-channel'\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\n                    }}\n                </th>\n                <th>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\n                    </ng-template>\n                    <ng-template #noSelection>\n                        {{ 'catalog.no-channel-selected' | translate }}\n                    </ng-template>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\n                <td>{{ row.name }}</td>\n                <td>{{ row.price | localeCurrency: currentChannel?.currencyCode }}</td>\n                <td>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.currencyCode }}\n                    </ng-template>\n                    <ng-template #noChannelSelected> - </ng-template>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { combineLatest, from, Observable } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-assign-products-to-channel-dialog',\n    templateUrl: './assign-products-to-channel-dialog.component.html',\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: any) => void;\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\n    priceFactorControl = new FormControl(1);\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n    productIds: string[];\n    productVariantIds: string[] | undefined;\n    currentChannelIds: string[];\n\n    get isProductVariantMode(): boolean {\n        return this.productVariantIds != null;\n    }\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n\n        this.variantsPreview$ = combineLatest(\n            from(this.getTopVariants(10)),\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\n        ).pipe(\n            map(([variants, factor]) => {\n                return variants.map(v => ({\n                    id: v.id,\n                    name: v.name,\n                    price: v.price,\n                    pricePreview: v.price * +factor,\n                }));\n            }),\n        );\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            if (!this.isProductVariantMode) {\n                this.dataService.product\n                    .assignProductsToChannel({\n                        channelId: selectedChannel.id,\n                        productIds: this.productIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\n                            channel: selectedChannel.code,\n                            count: this.productIds.length,\n                        });\n                        this.resolveWith(true);\n                    });\n            } else if (this.productVariantIds) {\n                this.dataService.product\n                    .assignVariantsToChannel({\n                        channelId: selectedChannel.id,\n                        productVariantIds: this.productVariantIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\n                            channel: selectedChannel.code,\n                            // tslint:disable-next-line:no-non-null-assertion\n                            count: this.productVariantIds!.length,\n                        });\n                        this.resolveWith(true);\n                    });\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\n        const variants: ProductVariantFragment[] = [];\n\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\n            const productVariants = await this.dataService.product\n                .getProduct(this.productIds[i], { take: this.isProductVariantMode ? undefined : take })\n                .mapSingle(({ product }) => {\n                    const _variants = product ? product.variantList.items : [];\n                    return _variants.filter(v =>\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\n                    );\n                })\n                .toPromise();\n            variants.push(...(productVariants || []));\n        }\n        return variants.slice(0, take);\n    }\n}\n","/**\n * @description\n * Like String.prototype.replace(), but replaces the last instance\n * rather than the first.\n */\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\n    if (!target) {\n        return '';\n    }\n    const lastIndex = target.lastIndexOf(search);\n    if (lastIndex === -1) {\n        return target;\n    }\n    const head = target.substr(0, lastIndex);\n    const tail = target.substr(lastIndex).replace(search, replace);\n    return head + tail;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    CreateProductInput,\n    CreateProductVariantInput,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    GetProductWithVariants,\n    LanguageCode,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\n\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\n\nimport { replaceLast } from './replace-last';\n\n/**\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductDetailService {\n    constructor(private dataService: DataService) {}\n\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\n    }\n\n    getTaxCategories() {\n        return this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories)\n            .pipe(shareReplay(1));\n    }\n\n    createProductWithVariants(\n        input: CreateProductInput,\n        createVariantsConfig: CreateProductVariantsConfig,\n        languageCode: LanguageCode,\n    ) {\n        const createProduct$ = this.dataService.product.createProduct(input);\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\n\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\n            mergeMap(([{ createProduct }, optionGroups]) => {\n                const addOptionsToProduct$ = optionGroups.length\n                    ? forkJoin(\n                          optionGroups.map(optionGroup => {\n                              return this.dataService.product.addOptionGroupToProduct({\n                                  productId: createProduct.id,\n                                  optionGroupId: optionGroup.id,\n                              });\n                          }),\n                      )\n                    : of([]);\n                return addOptionsToProduct$.pipe(\n                    map(() => {\n                        return { createProduct, optionGroups };\n                    }),\n                );\n            }),\n            mergeMap(({ createProduct, optionGroups }) => {\n                const variants = createVariantsConfig.variants.map(v => {\n                    const optionIds = optionGroups.length\n                        ? v.optionValues.map((optionName, index) => {\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\n                              if (!option) {\n                                  throw new Error(\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\n                                  );\n                              }\n                              return option.id;\n                          })\n                        : [];\n                    return {\n                        ...v,\n                        optionIds,\n                    };\n                });\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\n                return this.createProductVariants(createProduct, variants, options, languageCode);\n            }),\n        );\n    }\n\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\n        return groups.length\n            ? forkJoin(\n                  groups.map(c => {\n                      return this.dataService.product\n                          .createProductOptionGroups({\n                              code: normalizeString(c.name, '-'),\n                              translations: [{ languageCode, name: c.name }],\n                              options: c.values.map(v => ({\n                                  code: normalizeString(v, '-'),\n                                  translations: [{ languageCode, name: v }],\n                              })),\n                          })\n                          .pipe(map(data => data.createProductOptionGroup));\n                  }),\n              )\n            : of([]);\n    }\n\n    createProductVariants(\n        product: { name: string; id: string },\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\n        options: Array<{ id: string; name: string }>,\n        languageCode: LanguageCode,\n    ) {\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\n            const name = options.length\n                ? `${product.name} ${v.optionIds\n                      .map(id => options.find(o => o.id === id))\n                      .filter(notNullOrUndefined)\n                      .map(o => o.name)\n                      .join(' ')}`\n                : product.name;\n            return {\n                productId: product.id,\n                price: v.price,\n                sku: v.sku,\n                stockOnHand: v.stock,\n                translations: [\n                    {\n                        languageCode,\n                        name,\n                    },\n                ],\n                optionIds: v.optionIds,\n            };\n        });\n        return this.dataService.product.createProductVariants(variants).pipe(\n            map(({ createProductVariants }) => ({\n                createProductVariants,\n                productId: product.id,\n            })),\n        );\n    }\n\n    updateProduct(updateOptions: {\n        product: GetProductWithVariants.Product;\n        languageCode: LanguageCode;\n        autoUpdate: boolean;\n        productInput?: UpdateProductInput;\n        variantsInput?: UpdateProductVariantInput[];\n    }) {\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\n        const updateVariantsInput = variantsInput || [];\n\n        const variants$ = autoUpdate\n            ? this.dataService.product\n                  .getProductVariants({}, product.id)\n                  .mapSingle(({ productVariants }) => productVariants.items)\n            : of([]);\n\n        return variants$.pipe(\n            mergeMap(variants => {\n                if (productInput) {\n                    updateOperations.push(this.dataService.product.updateProduct(productInput));\n                    const productOldName = findTranslation(product, languageCode)?.name ?? '';\n                    const productNewName = findTranslation(productInput, languageCode)?.name;\n                    if (productNewName && productOldName !== productNewName && autoUpdate) {\n                        for (const variant of variants) {\n                            const currentVariantName = findTranslation(variant, languageCode)?.name || '';\n                            let variantInput: UpdateProductVariantInput;\n                            const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\n                            if (existingVariantInput) {\n                                variantInput = existingVariantInput;\n                            } else {\n                                variantInput = {\n                                    id: variant.id,\n                                    translations: [{ languageCode, name: currentVariantName }],\n                                };\n                                updateVariantsInput.push(variantInput);\n                            }\n                            const variantTranslation = findTranslation(variantInput, languageCode);\n                            if (variantTranslation) {\n                                if (variantTranslation.name) {\n                                    variantTranslation.name = replaceLast(\n                                        variantTranslation.name,\n                                        productOldName,\n                                        productNewName,\n                                    );\n                                } else {\n                                    // The variant translation was falsy, which occurs\n                                    // when defining the product name for a new translation\n                                    // language that had not yet been defined.\n                                    variantTranslation.name = [\n                                        productNewName,\n                                        ...variant.options.map(o => o.name),\n                                    ].join(' ');\n                                }\n                            }\n                        }\n                    }\n                }\n                if (updateVariantsInput.length) {\n                    updateOperations.push(\n                        this.dataService.product.updateProductVariants(updateVariantsInput),\n                    );\n                }\n                return forkJoin(updateOperations);\n            }),\n        );\n    }\n\n    updateProductOption(\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\n        product: GetProductWithVariants.Product,\n        languageCode: LanguageCode,\n    ) {\n        const variants$ = input.autoUpdate\n            ? this.dataService.product\n                  .getProductVariants({}, product.id)\n                  .mapSingle(({ productVariants }) => productVariants.items)\n            : of([]);\n\n        return variants$.pipe(\n            mergeMap(variants => {\n                let updateProductVariantNames$: Observable<any> = of([]);\n                if (input.autoUpdate) {\n                    // Update any ProductVariants' names which include the option name\n                    let oldOptionName: string | undefined;\n                    const newOptionName = findTranslation(input, languageCode)?.name;\n                    if (!newOptionName) {\n                        updateProductVariantNames$ = of([]);\n                    }\n                    const variantsToUpdate: UpdateProductVariantInput[] = [];\n                    for (const variant of variants) {\n                        if (variant.options.map(o => o.id).includes(input.id)) {\n                            if (!oldOptionName) {\n                                oldOptionName = findTranslation(\n                                    variant.options.find(o => o.id === input.id),\n                                    languageCode,\n                                )?.name;\n                            }\n                            const variantName = findTranslation(variant, languageCode)?.name || '';\n                            if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\n                                variantsToUpdate.push({\n                                    id: variant.id,\n                                    translations: [\n                                        {\n                                            languageCode,\n                                            name: replaceLast(variantName, oldOptionName, newOptionName),\n                                        },\n                                    ],\n                                });\n                            }\n                        }\n                    }\n                    if (variantsToUpdate.length) {\n                        updateProductVariantNames$ =\n                            this.dataService.product.updateProductVariants(variantsToUpdate);\n                    }\n                }\n                return this.dataService.product\n                    .updateProductOption(input)\n                    .pipe(mergeMap(() => updateProductVariantNames$));\n            }),\n        );\n    }\n\n    deleteProductVariant(id: string, productId: string) {\n        return this.dataService.product.deleteProductVariant(id).pipe(\n            switchMap(result => {\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\n                    return this.dataService.product.getProduct(productId).single$;\n                } else {\n                    return throwError(result.deleteProductVariant.message);\n                }\n            }),\n        );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"flex clr-flex-row\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\n                <input\n                    type=\"checkbox\"\n                    clrToggle\n                    name=\"enabled\"\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\n                />\n                <label>{{ 'common.enabled' | translate }}</label>\n            </clr-toggle-wrapper>\n        </div>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"product$ | async as product\">\n    <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\n    <clr-tabs>\n        <clr-tab>\n            <button clrTabLink (click)=\"navigateToTab('details')\">\n                {{ 'catalog.product-details' | translate }}\n            </button>\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <section class=\"form-block\" formGroupName=\"product\">\n                            <ng-container *ngIf=\"!(isNew$ | async)\">\n                                <ng-container *vdrIfMultichannel>\n                                    <vdr-form-item\n                                        [label]=\"'common.channels' | translate\"\n                                        *vdrIfDefaultChannelActive\n                                    >\n                                        <div class=\"flex channel-assignment\">\n                                            <ng-container *ngFor=\"let channel of productChannels$ | async\">\n                                                <vdr-chip\n                                                    *ngIf=\"!isDefaultChannel(channel.code)\"\n                                                    icon=\"times-circle\"\n                                                    (iconClick)=\"removeFromChannel(channel.id)\"\n                                                >\n                                                    <vdr-channel-badge\n                                                        [channelCode]=\"channel.code\"\n                                                    ></vdr-channel-badge>\n                                                    {{ channel.code | channelCodeToLabel }}\n                                                </vdr-chip>\n                                            </ng-container>\n                                            <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\n                                                <clr-icon shape=\"layers\"></clr-icon>\n                                                {{ 'catalog.assign-to-channel' | translate }}\n                                            </button>\n                                        </div>\n                                    </vdr-form-item>\n                                </ng-container>\n                            </ng-container>\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\n                                <input\n                                    id=\"name\"\n                                    type=\"text\"\n                                    formControlName=\"name\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                    (input)=\"updateSlug($event.target.value)\"\n                                />\n                            </vdr-form-field>\n                            <div\n                                class=\"auto-rename-wrapper\"\n                                [class.visible]=\"\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\n                                \"\n                            >\n                                <clr-checkbox-wrapper>\n                                    <input\n                                        clrCheckbox\n                                        type=\"checkbox\"\n                                        id=\"auto-update\"\n                                        formControlName=\"autoUpdateVariantNames\"\n                                    />\n                                    <label>{{\n                                        'catalog.auto-update-product-variant-name' | translate\n                                    }}</label>\n                                </clr-checkbox-wrapper>\n                            </div>\n                            <vdr-form-field\n                                [label]=\"'catalog.slug' | translate\"\n                                for=\"slug\"\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                            >\n                                <input\n                                    id=\"slug\"\n                                    type=\"text\"\n                                    formControlName=\"slug\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                />\n                            </vdr-form-field>\n                            <vdr-form-field\n                                [label]=\"'common.description' | translate\"\n                                for=\"description\"\n                                [errors]=\"{ pattern: 'catalog.description-pattern-error' | translate }\"\n                            >\n                                <textarea\n                                    rows=\"9\"\n                                    id=\"slug\"\n                                    type=\"text\"\n                                    formControlName=\"description\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                ></textarea>\n                            </vdr-form-field>\n\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                                <label>{{ 'common.custom-fields' | translate }}</label>\n                                <vdr-tabbed-custom-fields\n                                    entityName=\"Product\"\n                                    [customFields]=\"customFields\"\n                                    [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                ></vdr-tabbed-custom-fields>\n                            </section>\n                            <vdr-custom-detail-component-host\n                                locationId=\"product-detail\"\n                                [entity$]=\"entity$\"\n                                [detailForm]=\"detailForm\"\n                            ></vdr-custom-detail-component-host>\n                        </section>\n                    </div>\n                    <div class=\"clr-col-md-auto\">\n                        <vdr-assets\n                            [assets]=\"assetChanges.assets || product.assets\"\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\n                            [updatePermissions]=\"updatePermissions\"\n                            (change)=\"assetChanges = $event\"\n                        ></vdr-assets>\n                        <div class=\"facets\">\n                            <vdr-facet-value-chip\n                                *ngFor=\"let facetValue of facetValues$ | async\"\n                                [facetValue]=\"facetValue\"\n                                [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\n                                (remove)=\"removeProductFacetValue(facetValue.id)\"\n                            ></vdr-facet-value-chip>\n                            <button\n                                class=\"btn btn-sm btn-secondary\"\n                                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                                (click)=\"selectProductFacetValue()\"\n                            >\n                                <clr-icon shape=\"plus\"></clr-icon>\n                                {{ 'catalog.add-facets' | translate }}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"isNew$ | async\">\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\n                    <vdr-generate-product-variants\n                        (variantsChange)=\"createVariantsConfig = $event\"\n                    ></vdr-generate-product-variants>\n                </div>\n            </clr-tab-content>\n        </clr-tab>\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\n                {{ 'catalog.product-variants' | translate }}\n            </button>\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\n                <section class=\"form-block\">\n                    <div class=\"view-mode\">\n                        <div class=\"btn-group\">\n                            <button\n                                class=\"btn btn-secondary-outline\"\n                                (click)=\"variantDisplayMode = 'card'\"\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\n                            >\n                                <clr-icon shape=\"list\"></clr-icon>\n                                <span class=\"full-label\">{{\n                                    'catalog.display-variant-cards' | translate\n                                }}</span>\n                            </button>\n                            <button\n                                class=\"btn\"\n                                (click)=\"variantDisplayMode = 'table'\"\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\n                            >\n                                <clr-icon shape=\"table\"></clr-icon>\n                                <span class=\"full-label\">{{\n                                    'catalog.display-variant-table' | translate\n                                }}</span>\n                            </button>\n                        </div>\n                        <div class=\"variant-filter\">\n                            <input\n                                [formControl]=\"filterInput\"\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\n                            />\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\n                                <clr-icon shape=\"times\"></clr-icon>\n                            </button>\n                        </div>\n                        <div class=\"flex-spacer\"></div>\n                        <a\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                            [routerLink]=\"['./', 'manage-variants']\"\n                            class=\"btn btn-secondary edit-variants-btn mb0 mr0\"\n                        >\n                            <clr-icon shape=\"add-text\"></clr-icon>\n                            {{ 'catalog.manage-variants' | translate }}\n                        </a>\n                    </div>\n\n                    <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\n                        <vdr-items-per-page-controls\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n                        ></vdr-items-per-page-controls>\n\n                        <vdr-pagination-controls\n                            [id]=\"(paginationConfig$ | async)?.id\"\n                            [currentPage]=\"currentPage$ | async\"\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\n                            (pageChange)=\"setPage($event)\"\n                        ></vdr-pagination-controls>\n                    </div>\n\n                    <vdr-product-variants-table\n                        *ngIf=\"variantDisplayMode === 'table'\"\n                        [variants]=\"variants$ | async\"\n                        [paginationConfig]=\"paginationConfig$ | async\"\n                        [optionGroups]=\"product.optionGroups\"\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\n                        [pendingAssetChanges]=\"variantAssetChanges\"\n                    ></vdr-product-variants-table>\n                    <vdr-product-variants-list\n                        *ngIf=\"variantDisplayMode === 'card'\"\n                        [variants]=\"variants$ | async\"\n                        [paginationConfig]=\"paginationConfig$ | async\"\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [facets]=\"facets$ | async\"\n                        [optionGroups]=\"product.optionGroups\"\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\n                        [taxCategories]=\"taxCategories$ | async\"\n                        [customFields]=\"customVariantFields\"\n                        [customOptionFields]=\"customOptionFields\"\n                        [activeLanguage]=\"languageCode$ | async\"\n                        [pendingAssetChanges]=\"variantAssetChanges\"\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\n                        (assetChange)=\"variantAssetChange($event)\"\n                        (updateProductOption)=\"updateProductOption($event)\"\n                        (selectionChange)=\"selectedVariantIds = $event\"\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\n                    ></vdr-product-variants-list>\n                </section>\n                <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\n                    <vdr-items-per-page-controls\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\n                        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n                    ></vdr-items-per-page-controls>\n\n                    <vdr-pagination-controls\n                        [id]=\"(paginationConfig$ | async)?.id\"\n                        [currentPage]=\"currentPage$ | async\"\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\n                        (pageChange)=\"setPage($event)\"\n                    ></vdr-pagination-controls>\n                </div>\n            </clr-tab-content>\n        </clr-tab>\n    </clr-tabs>\n</form>\n","import { Location } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CreateProductInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    FacetWithValues,\n    findTranslation,\n    flattenFacetValues,\n    getChannelCodeFromUserStatus,\n    GetProductWithVariants,\n    GlobalFlag,\n    LanguageCode,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    Permission,\n    ProductDetail,\n    ProductVariant,\n    ServerConfigService,\n    TaxCategory,\n    unicodePatternValidator,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { unique } from '@vendure/common/lib/unique';\nimport { BehaviorSubject, combineLatest, EMPTY, from, merge, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    mergeMap,\n    shareReplay,\n    skip,\n    skipUntil,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    tap,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\n\nexport type TabName = 'details' | 'variants';\n\nexport interface VariantFormValue {\n    id: string;\n    enabled: boolean;\n    sku: string;\n    name: string;\n    price: number;\n    priceWithTax: number;\n    taxCategoryId: string;\n    stockOnHand: number;\n    useGlobalOutOfStockThreshold: boolean;\n    outOfStockThreshold: number;\n    trackInventory: GlobalFlag;\n    facetValueIds: string[];\n    customFields?: any;\n}\n\nexport interface SelectedAssets {\n    assets?: Asset[];\n    featuredAsset?: Asset;\n}\n\nexport interface PaginationConfig {\n    totalItems: number;\n    currentPage: number;\n    itemsPerPage: number;\n}\n\n@Component({\n    selector: 'vdr-product-detail',\n    templateUrl: './product-detail.component.html',\n    styleUrls: ['./product-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailComponent\n    extends BaseDetailComponent<GetProductWithVariants.Product>\n    implements OnInit, OnDestroy\n{\n    activeTab$: Observable<TabName>;\n    product$: Observable<GetProductWithVariants.Product>;\n    variants$: Observable<ProductVariant.Fragment[]>;\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    customFields: CustomFieldConfig[];\n    customVariantFields: CustomFieldConfig[];\n    customOptionGroupFields: CustomFieldConfig[];\n    customOptionFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    filterInput = new FormControl('');\n    assetChanges: SelectedAssets = {};\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\n    variantFacetValueChanges: { [variantId: string]: string[] } = {};\n    productChannels$: Observable<ProductDetail.Channels[]>;\n    facetValues$: Observable<ProductDetail.FacetValues[]>;\n    facets$: Observable<FacetWithValues.Fragment[]>;\n    totalItems$: Observable<number>;\n    currentPage$ = new BehaviorSubject(1);\n    itemsPerPage$ = new BehaviorSubject(10);\n    paginationConfig$: Observable<PaginationConfig>;\n    selectedVariantIds: string[] = [];\n    variantDisplayMode: 'card' | 'table' = 'card';\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\n    channelPriceIncludesTax$: Observable<boolean>;\n    // Used to store all ProductVariants which have been loaded.\n    // It is needed when saving changes to variants.\n    private productVariantMap = new Map<string, ProductVariant.Fragment>();\n    public readonly updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private productDetailService: ProductDetailService,\n        private formBuilder: FormBuilder,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private location: Location,\n        private changeDetector: ChangeDetectorRef,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Product');\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\n        this.detailForm = this.formBuilder.group({\n            product: this.formBuilder.group({\n                enabled: true,\n                name: ['', Validators.required],\n                autoUpdateVariantNames: true,\n                slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\n                description: '',\n                facetValueIds: [[]],\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            variants: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.product$ = this.entity$;\n        this.totalItems$ = this.product$.pipe(map(product => product.variantList.totalItems));\n        this.paginationConfig$ = combineLatest(this.totalItems$, this.itemsPerPage$, this.currentPage$).pipe(\n            map(([totalItems, itemsPerPage, currentPage]) => ({\n                totalItems,\n                itemsPerPage,\n                currentPage,\n            })),\n        );\n        const variants$ = this.product$.pipe(map(product => product.variantList.items));\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\n            startWith(''),\n            debounceTime(200),\n            shareReplay(),\n        );\n        const initialVariants$ = this.product$.pipe(map(p => p.variantList.items));\n        const updatedVariants$ = combineLatest(filterTerm$, this.currentPage$, this.itemsPerPage$).pipe(\n            skipUntil(initialVariants$),\n            skip(1),\n            switchMap(([term, currentPage, itemsPerPage]) => {\n                return this.dataService.product\n                    .getProductVariants(\n                        {\n                            skip: (currentPage - 1) * itemsPerPage,\n                            take: itemsPerPage,\n                            ...(term\n                                ? { filter: { name: { contains: term }, sku: { contains: term } } }\n                                : {}),\n                            filterOperator: LogicalOperator.OR,\n                        },\n                        this.id,\n                    )\n                    .mapStream(({ productVariants }) => productVariants.items);\n            }),\n            shareReplay({ bufferSize: 1, refCount: true }),\n        );\n        this.variants$ = merge(initialVariants$, updatedVariants$).pipe(\n            tap(variants => {\n                for (const variant of variants) {\n                    this.productVariantMap.set(variant.id, variant);\n                }\n            }),\n        );\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\n\n        combineLatest(updatedVariants$, this.languageCode$)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(([variants, languageCode]) => {\n                this.buildVariantFormArray(variants, languageCode);\n            });\n\n        // FacetValues are provided initially by the nested array of the\n        // Product entity, but once a fetch to get all Facets is made (as when\n        // opening the FacetValue selector modal), then these additional values\n        // are concatenated onto the initial array.\n        this.facets$ = this.productDetailService.getFacets();\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\n        const productGroup = this.getProductFormGroup();\n\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\n            map(val => val.facetValueIds as string[]),\n            distinctUntilChanged(),\n        );\n        const formChangeFacetValues$ = combineLatest(\n            formFacetValueIdChanges$,\n            productFacetValues$,\n            allFacetValues$,\n        ).pipe(\n            map(([ids, productFacetValues, allFacetValues]) => {\n                const combined = [...productFacetValues, ...allFacetValues];\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\n            }),\n        );\n\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\n        this.channelPriceIncludesTax$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\n            .pipe(shareReplay(1));\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    navigateToTab(tabName: TabName) {\n        this.location.replaceState(\n            this.router\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\n                    queryParamsHandling: 'merge',\n                    relativeTo: this.route,\n                })\n                .toString(),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    setPage(page: number) {\n        this.currentPage$.next(page);\n    }\n\n    setItemsPerPage(value: string) {\n        this.itemsPerPage$.next(+value);\n        this.currentPage$.next(1);\n    }\n\n    assignToChannel() {\n        this.productChannels$\n            .pipe(\n                take(1),\n                switchMap(channels => {\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\n                        size: 'lg',\n                        locals: {\n                            productIds: [this.id],\n                            currentChannelIds: channels.map(c => c.id),\n                        },\n                    });\n                }),\n            )\n            .subscribe();\n    }\n\n    removeFromChannel(channelId: string) {\n        from(getChannelCodeFromUserStatus(this.dataService, channelId))\n            .pipe(\n                switchMap(({ channelCode }) => {\n                    return this.modalService.dialog({\n                        title: _('catalog.remove-product-from-channel'),\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            {\n                                type: 'danger',\n                                label: _('catalog.remove-from-channel'),\n                                translationVars: { channelCode },\n                                returnValue: true,\n                            },\n                        ],\n                    });\n                }),\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeProductsFromChannel({\n                              channelId,\n                              productIds: [this.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\n                },\n            );\n    }\n\n    assignVariantToChannel(variant: ProductVariant.Fragment) {\n        return this.modalService\n            .fromComponent(AssignProductsToChannelDialogComponent, {\n                size: 'lg',\n                locals: {\n                    productIds: [this.id],\n                    productVariantIds: [variant.id],\n                    currentChannelIds: variant.channels.map(c => c.id),\n                },\n            })\n            .subscribe();\n    }\n\n    removeVariantFromChannel({\n        channelId,\n        variant,\n    }: {\n        channelId: string;\n        variant: ProductVariant.Fragment;\n    }) {\n        from(getChannelCodeFromUserStatus(this.dataService, channelId))\n            .pipe(\n                switchMap(({ channelCode }) => {\n                    return this.modalService.dialog({\n                        title: _('catalog.remove-product-variant-from-channel'),\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            {\n                                type: 'danger',\n                                label: _('catalog.remove-from-channel'),\n                                translationVars: { channelCode },\n                                returnValue: true,\n                            },\n                        ],\n                    });\n                }),\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeVariantsFromChannel({\n                              channelId,\n                              productVariantIds: [variant.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\n                },\n            );\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    variantAssetsChanged(): boolean {\n        return !!Object.keys(this.variantAssetChanges).length;\n    }\n\n    variantAssetChange(event: VariantAssetChange) {\n        this.variantAssetChanges[event.variantId] = event;\n    }\n\n    /**\n     * If creating a new product, automatically generate the slug based on the product name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['product', 'slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    selectProductFacetValue() {\n        this.displayFacetValueModal().subscribe(facetValueIds => {\n            if (facetValueIds) {\n                const productGroup = this.getProductFormGroup();\n                const currentFacetValueIds = productGroup.value.facetValueIds;\n                productGroup.patchValue({\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\n                });\n                productGroup.markAsDirty();\n            }\n        });\n    }\n\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) =>\n                    this.productDetailService.updateProductOption(input, product, languageCode),\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ProductOption',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ProductOption',\n                    });\n                },\n            );\n    }\n\n    removeProductFacetValue(facetValueId: string) {\n        const productGroup = this.getProductFormGroup();\n        const currentFacetValueIds = productGroup.value.facetValueIds;\n        productGroup.patchValue({\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\n        });\n        productGroup.markAsDirty();\n    }\n\n    /**\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\n     */\n    selectVariantFacetValue(selectedVariantIds: string[]) {\n        this.displayFacetValueModal()\n            .pipe(withLatestFrom(this.variants$))\n            .subscribe(([facetValueIds, variants]) => {\n                if (facetValueIds) {\n                    for (const variantId of selectedVariantIds) {\n                        const index = variants.findIndex(v => v.id === variantId);\n                        const variant = variants[index];\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\n                        const variantFormGroup = (this.detailForm.get('variants') as FormArray).controls.find(\n                            c => c.value.id === variantId,\n                        );\n                        if (variantFormGroup) {\n                            const uniqueFacetValueIds = unique([...existingFacetValueIds, ...facetValueIds]);\n                            variantFormGroup.patchValue({\n                                facetValueIds: uniqueFacetValueIds,\n                            });\n                            variantFormGroup.markAsDirty();\n                            this.variantFacetValueChanges[variantId] = uniqueFacetValueIds;\n                        }\n                    }\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    variantsToCreateAreValid(): boolean {\n        return (\n            0 < this.createVariantsConfig.variants.length &&\n            this.createVariantsConfig.variants.every(v => {\n                return v.sku !== '';\n            })\n        );\n    }\n\n    private displayFacetValueModal(): Observable<string[] | undefined> {\n        return this.productDetailService.getFacets().pipe(\n            mergeMap(facets =>\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\n                    size: 'md',\n                    closable: true,\n                    locals: { facets },\n                }),\n            ),\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\n        );\n    }\n\n    create() {\n        const productGroup = this.getProductFormGroup();\n        if (!productGroup.dirty) {\n            return;\n        }\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) => {\n                    const newProduct = this.getUpdatedProduct(\n                        product,\n                        productGroup as FormGroup,\n                        languageCode,\n                    ) as CreateProductInput;\n                    return this.productDetailService.createProductWithVariants(\n                        newProduct,\n                        this.createVariantsConfig,\n                        languageCode,\n                    );\n                }),\n            )\n            .subscribe(\n                ({ createProductVariants, productId }) => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Product',\n                    });\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\n                },\n                err => {\n                    // tslint:disable-next-line:no-console\n                    console.error(err);\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\n                    const productGroup = this.getProductFormGroup();\n                    let productInput: UpdateProductInput | undefined;\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\n\n                    if (productGroup.dirty || this.assetsChanged()) {\n                        productInput = this.getUpdatedProduct(\n                            product,\n                            productGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateProductInput;\n                    }\n                    const variantsArray = this.detailForm.get('variants');\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\n                        variantsInput = this.getUpdatedProductVariants(\n                            product,\n                            variantsArray as FormArray,\n                            languageCode,\n                            priceIncludesTax,\n                        );\n                    }\n\n                    return this.productDetailService.updateProduct({\n                        product,\n                        languageCode,\n                        autoUpdate:\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\n                        productInput,\n                        variantsInput,\n                    });\n                }),\n            )\n            .subscribe(\n                result => {\n                    this.updateSlugAfterSave(result);\n                    this.detailForm.markAsPristine();\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Product',\n                    });\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the product or current language.\n     */\n    protected setFormValues(product: GetProductWithVariants.Product, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(product, languageCode);\n        this.detailForm.patchValue({\n            product: {\n                enabled: product.enabled,\n                name: currentTranslation ? currentTranslation.name : '',\n                slug: currentTranslation ? currentTranslation.slug : '',\n                description: currentTranslation ? currentTranslation.description : '',\n                facetValueIds: product.facetValues.map(fv => fv.id),\n            },\n        });\n\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['product', 'customFields']),\n                product,\n                currentTranslation,\n            );\n        }\n        this.buildVariantFormArray(product.variantList.items, languageCode);\n    }\n\n    private buildVariantFormArray(variants: ProductVariant.Fragment[], languageCode: LanguageCode) {\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\n        variants.forEach((variant, i) => {\n            const variantTranslation = findTranslation(variant, languageCode);\n            const pendingFacetValueChanges = this.variantFacetValueChanges[variant.id];\n            const facetValueIds = pendingFacetValueChanges\n                ? pendingFacetValueChanges\n                : variant.facetValues.map(fv => fv.id);\n            const group: VariantFormValue = {\n                id: variant.id,\n                enabled: variant.enabled,\n                sku: variant.sku,\n                name: variantTranslation ? variantTranslation.name : '',\n                price: variant.price,\n                priceWithTax: variant.priceWithTax,\n                taxCategoryId: variant.taxCategory.id,\n                stockOnHand: variant.stockOnHand,\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\n                outOfStockThreshold: variant.outOfStockThreshold,\n                trackInventory: variant.trackInventory,\n                facetValueIds,\n            };\n\n            let variantFormGroup = variantsFormArray.controls.find(c => c.value.id === variant.id) as\n                | FormGroup\n                | undefined;\n            if (variantFormGroup) {\n                if (variantFormGroup.pristine) {\n                    variantFormGroup.patchValue(group);\n                }\n            } else {\n                variantFormGroup = this.formBuilder.group({\n                    ...group,\n                    facetValueIds: this.formBuilder.control(facetValueIds),\n                });\n                variantsFormArray.insert(i, variantFormGroup);\n            }\n            if (this.customVariantFields.length) {\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\n\n                if (!customFieldsGroup) {\n                    customFieldsGroup = this.formBuilder.group(\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                    );\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\n                }\n                this.setCustomFieldFormValues(\n                    this.customVariantFields,\n                    customFieldsGroup,\n                    variant,\n                    variantTranslation,\n                );\n            }\n        });\n    }\n\n    /**\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\n     * can then be persisted to the API.\n     */\n    private getUpdatedProduct(\n        product: GetProductWithVariants.Product,\n        productFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductInput | CreateProductInput {\n        const updatedProduct = createUpdatedTranslatable({\n            translatable: product,\n            updatedFields: productFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: product.name || '',\n                slug: product.slug || '',\n                description: product.description || '',\n            },\n        });\n        return {\n            ...updatedProduct,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            facetValueIds: productFormGroup.value.facetValueIds,\n        } as UpdateProductInput | CreateProductInput;\n    }\n\n    /**\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedProductVariants(\n        product: GetProductWithVariants.Product,\n        variantsFormArray: FormArray,\n        languageCode: LanguageCode,\n        priceIncludesTax: boolean,\n    ): UpdateProductVariantInput[] {\n        const dirtyFormControls = variantsFormArray.controls.filter(c => c.dirty);\n        const dirtyVariants = dirtyFormControls\n            .map(c => this.productVariantMap.get(c.value.id))\n            .filter(notNullOrUndefined);\n        const dirtyVariantValues = dirtyFormControls.map(c => c.value);\n\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\n        }\n        return dirtyVariants\n            .map((variant, i) => {\n                const formValue: VariantFormValue = dirtyVariantValues.find(value => value.id === variant.id);\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\n                    translatable: variant,\n                    updatedFields: formValue,\n                    customFieldConfig: this.customVariantFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n                result.taxCategoryId = formValue.taxCategoryId;\n                result.facetValueIds = formValue.facetValueIds;\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\n                const assetChanges = this.variantAssetChanges[variant.id];\n                if (assetChanges) {\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\n                }\n                return result;\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    private getProductFormGroup(): FormGroup {\n        return this.detailForm.get('product') as FormGroup;\n    }\n\n    /**\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\n     */\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\n        const firstResult = results[0];\n        const slugControl = this.detailForm.get(['product', 'slug']);\n\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\n            return input.hasOwnProperty('updateProduct');\n        }\n\n        if (slugControl && isUpdateMutation(firstResult)) {\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left [grow]=\"true\">\n        <div class=\"search-form\">\n            <vdr-product-search-input\n                #productSearchInputComponent\n                [facetValueResults]=\"facetValues$ | async\"\n                (searchTermChange)=\"setSearchTerm($event)\"\n                (facetValueChange)=\"setFacetValueIds($event)\"\n            ></vdr-product-search-input>\n            <vdr-dropdown class=\"search-settings-menu mr3\">\n                <button\n                    type=\"button\"\n                    class=\"icon-button search-index-button\"\n                    [title]=\"\n                        (pendingSearchIndexUpdates\n                            ? 'catalog.pending-search-index-updates'\n                            : 'catalog.search-index-controls'\n                        ) | translate\n                    \"\n                    vdrDropdownTrigger\n                >\n                    <clr-icon shape=\"cog\"></clr-icon>\n                    <vdr-status-badge *ngIf=\"pendingSearchIndexUpdates\" type=\"warning\"></vdr-status-badge>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <h4 class=\"dropdown-header\">{{ 'catalog.search-index-controls' | translate }}</h4>\n                    <ng-container *ngIf=\"pendingSearchIndexUpdates\">\n                        <button\n                            type=\"button\"\n                            class=\"run-updates-button\"\n                            vdrDropdownItem\n                            (click)=\"runPendingSearchIndexUpdates()\"\n                            [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                        >\n                            <vdr-status-badge type=\"warning\"></vdr-status-badge>\n                            {{\n                                'catalog.run-pending-search-index-updates'\n                                    | translate: { count: pendingSearchIndexUpdates }\n                            }}\n                        </button>\n                        <div class=\"dropdown-divider\"></div>\n                    </ng-container>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        (click)=\"rebuildSearchIndex()\"\n                        [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                    >\n                        {{ 'catalog.rebuild-search-index' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <div class=\"flex wrap\">\n            <clr-toggle-wrapper class=\"mt2\">\n                <input type=\"checkbox\" clrToggle [(ngModel)]=\"groupByProduct\" (ngModelChange)=\"refresh()\" />\n                <label>\n                    {{ 'catalog.group-by-product' | translate }}\n                </label>\n            </clr-toggle-wrapper>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"product-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            [routerLink]=\"['./create']\"\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-product' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    [selectionManager]=\"selectionManager\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"product-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt-column> </vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-result=\"item\">\n        <td class=\"left align-middle image-col\" [class.disabled]=\"!result.enabled\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"\n                        groupByProduct\n                            ? result.productAsset\n                            : result.productVariantAsset || result.productAsset as asset;\n                        else imagePlaceholder\n                    \"\n                    [src]=\"asset | assetPreview: 'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\">\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                    </div>\n                </ng-template>\n            </div>\n        </td>\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\n            <div>{{ groupByProduct ? result.productName : result.productVariantName }}</div>\n            <div *ngIf=\"!groupByProduct\" class=\"sku\">{{ result.sku }}</div>\n        </td>\n        <td class=\"align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-chip *ngIf=\"!result.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-table-row-action\n                class=\"edit-button\"\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', result.productId]\"\n            ></vdr-table-row-action>\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteProduct(result.productId)\"\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteProduct'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    JobQueueService,\n    JobState,\n    LanguageCode,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    ProductSearchInputComponent,\n    SearchInput,\n    SearchProducts,\n    SelectionManager,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { delay, map, switchMap, take, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-products-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.scss'],\n})\nexport class ProductListComponent\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\n    implements OnInit, AfterViewInit\n{\n    searchTerm = '';\n    facetValueIds: string[] = [];\n    groupByProduct = true;\n    selectedFacetValueIds$: Observable<string[]>;\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    pendingSearchIndexUpdates = 0;\n    selectionManager: SelectionManager<SearchProducts.Items>;\n\n    @ViewChild('productSearchInputComponent', { static: true })\n    private productSearchInput: ProductSearchInputComponent;\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private jobQueueService: JobQueueService,\n        private serverConfigService: ServerConfigService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        this.route.queryParamMap\n            .pipe(\n                map(qpm => qpm.get('q')),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(term => {\n                this.searchTerm = term || '';\n                if (this.productSearchInput) {\n                    this.productSearchInput.setSearchTerm(term);\n                }\n            });\n        this.selectedFacetValueIds$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\n\n        this.selectedFacetValueIds$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\n            this.facetValueIds = ids;\n            if (this.productSearchInput) {\n                this.productSearchInput.setFacetValues(ids);\n            }\n        });\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\n            data => data.search,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) => ({\n                input: {\n                    skip,\n                    take,\n                    term: this.searchTerm,\n                    facetValueIds: this.facetValueIds,\n                    facetValueOperator: LogicalOperator.AND,\n                    groupByProduct: this.groupByProduct,\n                } as SearchInput,\n            }),\n        );\n        this.selectionManager = new SelectionManager<SearchProducts.Items>({\n            multiSelect: true,\n            itemsAreEqual: (a, b) =>\n                this.groupByProduct ? a.productId === b.productId : a.productVariantId === b.productVariantId,\n            additiveMode: true,\n        });\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\n\n        this.facetValues$\n            .pipe(take(1), delay(100), withLatestFrom(this.selectedFacetValueIds$))\n            .subscribe(([__, ids]) => {\n                this.productSearchInput.setFacetValues(ids);\n            });\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n\n        this.dataService.product\n            .getPendingSearchIndexUpdates()\n            .mapSingle(({ pendingSearchIndexUpdates }) => pendingSearchIndexUpdates)\n            .subscribe(value => (this.pendingSearchIndexUpdates = value));\n    }\n\n    ngAfterViewInit() {\n        if (this.productSearchInput && this.searchTerm) {\n            setTimeout(() => this.productSearchInput.setSearchTerm(this.searchTerm));\n        }\n    }\n\n    setSearchTerm(term: string) {\n        this.searchTerm = term;\n        this.setQueryParam({ q: term || null, page: 1 });\n        this.refresh();\n    }\n\n    setFacetValueIds(ids: string[]) {\n        this.facetValueIds = ids;\n        this.setQueryParam({ fvids: ids, page: 1 });\n        this.refresh();\n    }\n\n    rebuildSearchIndex() {\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\n            this.notificationService.info(_('catalog.reindexing'));\n            this.jobQueueService.addJob(reindex.id, job => {\n                if (job.state === JobState.COMPLETED) {\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\n                    this.notificationService.success(_('catalog.reindex-successful'), {\n                        count: job.result.indexedItemCount,\n                        time,\n                    });\n                    this.refresh();\n                } else {\n                    this.notificationService.error(_('catalog.reindex-error'));\n                }\n            });\n        });\n    }\n\n    runPendingSearchIndexUpdates() {\n        this.dataService.product.runPendingSearchIndexUpdates().subscribe(value => {\n            this.notificationService.info(_('catalog.running-search-index-updates'), {\n                count: this.pendingSearchIndexUpdates,\n            });\n            this.pendingSearchIndexUpdates = 0;\n        });\n    }\n\n    deleteProduct(productId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\n                // Short delay to allow the product to be removed from the search index before\n                // refreshing.\n                delay(500),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Product',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-language-selector\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <div class=\"flex center\">\n            <div class=\"mr2\">\n                <clr-checkbox-wrapper>\n                    <input\n                        clrCheckbox\n                        type=\"checkbox\"\n                        id=\"auto-update\"\n                        [(ngModel)]=\"autoUpdateVariantNames\"\n                    />\n                    <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\n                </clr-checkbox-wrapper>\n            </div>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </div>\n    </vdr-ab-right>\n</vdr-action-bar>\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\n    <div formGroupName=\"optionGroups\" class=\"clr-row\">\n        <div class=\"clr-col-12 clr-col-xl-6\" *ngFor=\"let optionGroup of getOptionGroups(); index as i\">\n            <section class=\"card\" [formArrayName]=\"i\">\n                <div class=\"card-header option-group-header\">\n                    <vdr-entity-info [entity]=\"optionGroup.value\"></vdr-entity-info>\n                    <div class=\"ml2\">{{ optionGroup.value.code }}</div>\n                </div>\n                <div class=\"card-block\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            [id]=\"'name-' + i\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                        <input\n                            [id]=\"'code-' + i\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"code\"\n                        />\n                    </vdr-form-field>\n                </div>\n                <section class=\"card-block\">\n                    <table class=\"facet-values-list table mt2 mb4\" formGroupName=\"options\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>{{ 'common.name' | translate }}</th>\n                                <th>{{ 'common.code' | translate }}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr\n                                class=\"facet-value\"\n                                *ngFor=\"let option of getOptions(optionGroup); let i = index\"\n                                [formGroupName]=\"i\"\n                            >\n                                <td class=\"align-middle\">\n                                    <vdr-entity-info [entity]=\"option.value\"></vdr-entity-info>\n                                </td>\n                                <td class=\"align-middle\">\n                                    <input\n                                        type=\"text\"\n                                        formControlName=\"name\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                    />\n                                </td>\n                                <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" /></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </section>\n            </section>\n        </div>\n    </div>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    FacetWithValues,\n    findTranslation,\n    GetProductVariantOptions,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ProductOption,\n    ProductOptionGroup,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateProductOptionGroupInput,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, forkJoin, Observable } from 'rxjs';\nimport { map, mergeMap, take } from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\n\n@Component({\n    selector: 'vdr-product-options-editor',\n    templateUrl: './product-options-editor.component.html',\n    styleUrls: ['./product-options-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductOptionsEditorComponent\n    extends BaseDetailComponent<GetProductVariantOptions.Product>\n    implements OnInit\n{\n    detailForm: FormGroup;\n    optionGroups$: Observable<GetProductVariantOptions.OptionGroups[]>;\n    languageCode$: Observable<LanguageCode>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    optionGroupCustomFields: CustomFieldConfig[];\n    optionCustomFields: CustomFieldConfig[];\n    autoUpdateVariantNames = true;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n\n    constructor(\n        protected route: ActivatedRoute,\n        protected router: Router,\n        protected serverConfigService: ServerConfigService,\n        protected dataService: DataService,\n        private productDetailService: ProductDetailService,\n        private formBuilder: FormBuilder,\n        private changeDetector: ChangeDetectorRef,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');\n        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');\n    }\n\n    ngOnInit(): void {\n        this.optionGroups$ = this.route.snapshot.data.entity.pipe(\n            map((product: GetProductVariantOptions.Product) => product.optionGroups),\n        );\n        this.detailForm = new FormGroup({\n            optionGroups: new FormArray([]),\n        });\n        super.init();\n    }\n\n    getOptionGroups(): FormGroup[] {\n        const optionGroups = this.detailForm.get('optionGroups');\n        return (optionGroups as FormArray).controls as FormGroup[];\n    }\n\n    getOptions(optionGroup: FormGroup): FormGroup[] {\n        const options = optionGroup.get('options');\n        return (options as FormArray).controls as FormGroup[];\n    }\n\n    save() {\n        if (this.detailForm.invalid || this.detailForm.pristine) {\n            return;\n        }\n        // tslint:disable-next-line:no-non-null-assertion\n        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product!);\n        combineLatest(this.entity$, this.languageCode$, $product)\n            .pipe(\n                take(1),\n                mergeMap(([{ optionGroups }, languageCode, product]) => {\n                    const updateOperations: Array<Observable<any>> = [];\n                    for (const optionGroupForm of this.getOptionGroups()) {\n                        if (optionGroupForm.get('name')?.dirty || optionGroupForm.get('code')?.dirty) {\n                            const optionGroupEntity = optionGroups.find(\n                                og => og.id === optionGroupForm.value.id,\n                            );\n                            if (optionGroupEntity) {\n                                const input = this.getUpdatedOptionGroup(\n                                    optionGroupEntity,\n                                    optionGroupForm,\n                                    languageCode,\n                                );\n                                updateOperations.push(\n                                    this.dataService.product.updateProductOptionGroup(input),\n                                );\n                            }\n                        }\n\n                        for (const optionForm of this.getOptions(optionGroupForm)) {\n                            if (optionForm.get('name')?.dirty || optionForm.get('code')?.dirty) {\n                                const optionGroup = optionGroups\n                                    .find(og => og.id === optionGroupForm.value.id)\n                                    ?.options.find(o => o.id === optionForm.value.id);\n                                if (optionGroup) {\n                                    const input = this.getUpdatedOption(\n                                        optionGroup,\n                                        optionForm,\n                                        languageCode,\n                                    );\n                                    updateOperations.push(\n                                        this.productDetailService.updateProductOption(\n                                            { ...input, autoUpdate: this.autoUpdateVariantNames },\n                                            product,\n                                            languageCode,\n                                        ),\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    return forkJoin(updateOperations);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ProductOptionGroup',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ProductOptionGroup',\n                    });\n                },\n            );\n    }\n\n    private getUpdatedOptionGroup(\n        optionGroup: ProductOptionGroup.Fragment,\n        optionGroupFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductOptionGroupInput {\n        const input = createUpdatedTranslatable({\n            translatable: optionGroup,\n            updatedFields: optionGroupFormGroup.value,\n            customFieldConfig: this.optionGroupCustomFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: optionGroup.name || '',\n            },\n        });\n        return input;\n    }\n\n    private getUpdatedOption(\n        option: ProductOption.Fragment,\n        optionFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductOptionInput {\n        const input = createUpdatedTranslatable({\n            translatable: option,\n            updatedFields: optionFormGroup.value,\n            customFieldConfig: this.optionGroupCustomFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: option.name || '',\n            },\n        });\n        return input;\n    }\n\n    protected setFormValues(entity: GetProductVariantOptions.Product, languageCode: LanguageCode): void {\n        const groupsFormArray = new FormArray([]);\n        for (const optionGroup of entity.optionGroups) {\n            const groupTranslation = findTranslation(optionGroup, languageCode);\n            const group = {\n                id: optionGroup.id,\n                createdAt: optionGroup.createdAt,\n                updatedAt: optionGroup.updatedAt,\n                code: optionGroup.code,\n                name: groupTranslation ? groupTranslation.name : '',\n            };\n            const optionsFormArray = new FormArray([]);\n\n            for (const option of optionGroup.options) {\n                const optionTranslation = findTranslation(option, languageCode);\n                const optionControl = this.formBuilder.group({\n                    id: option.id,\n                    createdAt: option.createdAt,\n                    updatedAt: option.updatedAt,\n                    code: option.code,\n                    name: optionTranslation ? optionTranslation.name : '',\n                });\n                optionsFormArray.push(optionControl);\n            }\n\n            const groupControl = this.formBuilder.group(group);\n            groupControl.addControl('options', optionsFormArray);\n            groupsFormArray.push(groupControl);\n        }\n        this.detailForm.setControl('optionGroups', groupsFormArray);\n    }\n}\n","<ng-template vdrDialogTitle>\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\n</ng-template>\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\n<ul>\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\n</ul>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog, GetProductVariantOptions } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-confirm-variant-deletion-dialog',\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\n    resolveWith: (result?: boolean) => void;\n    variants: GetProductVariantOptions.Variants[] = [];\n\n    confirm() {\n        this.resolveWith(true);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\n    <div class=\"chips\" *ngIf=\"0 < optionValues.length\">\n        <vdr-chip\n            *ngFor=\"let option of optionValues; last as isLast; index as i\"\n            [icon]=\"option.locked ? 'lock' : 'times'\"\n            [class.selected]=\"isLast && lastSelected\"\n            [class.locked]=\"option.locked\"\n            [colorFrom]=\"groupName\"\n            (iconClick)=\"removeOption(option)\"\n        >\n            <span [hidden]=\"editingIndex !== i\">\n                <input\n                    #editNameInput\n                    type=\"text\"\n                    [ngModel]=\"option.name\"\n                    (blur)=\"updateOption(i, $event)\"\n                    (click)=\"$event.cancelBubble = true\"\n                />\n            </span>\n            <span\n                class=\"option-name\"\n                [class.editable]=\"!option.locked && !option.id\"\n                (click)=\"editName(i, $event)\" [hidden]=\"editingIndex === i\">{{ option.name }}</span>\n        </vdr-chip>\n    </div>\n    <textarea\n        #textArea\n        (keyup)=\"handleKey($event)\"\n        (focus)=\"isFocussed = true\"\n        (blur)=\"handleBlur()\"\n        [(ngModel)]=\"input\"\n        [disabled]=\"disabled\"\n    ></textarea>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    Provider,\n    QueryList,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => OptionValueInputComponent),\n    multi: true,\n};\n\ninterface Option {\n    id?: string;\n    name: string;\n    locked: boolean;\n}\n\n@Component({\n    selector: 'vdr-option-value-input',\n    templateUrl: './option-value-input.component.html',\n    styleUrls: ['./option-value-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\n})\nexport class OptionValueInputComponent implements ControlValueAccessor {\n    @Input() groupName = '';\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\n    @ViewChildren('editNameInput', { read: ElementRef }) nameInputs: QueryList<ElementRef>;\n    @Input() options: Option[];\n    @Output() add = new EventEmitter<Option>();\n    @Output() remove = new EventEmitter<Option>();\n    @Output() edit = new EventEmitter<{ index: number; option: Option }>();\n    @Input() disabled = false;\n    input = '';\n    isFocussed = false;\n    lastSelected = false;\n    formValue: Option[];\n    editingIndex = -1;\n    onChangeFn: (value: any) => void;\n    onTouchFn: (value: any) => void;\n\n    get optionValues(): Option[] {\n        return this.formValue ?? this.options ?? [];\n    }\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    registerOnChange(fn: any): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchFn = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    }\n\n    writeValue(obj: any): void {\n        this.formValue = obj || [];\n    }\n\n    focus() {\n        this.textArea.nativeElement.focus();\n    }\n\n    editName(index: number, event: MouseEvent) {\n        const optionValue = this.optionValues[index];\n        if (!optionValue.locked && !optionValue.id) {\n            event.cancelBubble = true;\n            this.editingIndex = index;\n            const input = this.nameInputs.get(index)?.nativeElement;\n            setTimeout(() => input?.focus());\n        }\n    }\n\n    updateOption(index: number, event: InputEvent) {\n        const optionValue = this.optionValues[index];\n        const newName = (event.target as HTMLInputElement).value;\n        if (optionValue) {\n            if (newName) {\n                optionValue.name = newName;\n                this.edit.emit({ index, option: optionValue });\n            }\n            this.editingIndex = -1;\n        }\n    }\n\n    removeOption(option: Option) {\n        if (!option.locked) {\n            if (this.formValue) {\n                this.formValue = this.formValue?.filter(o => o.name !== option.name);\n                this.onChangeFn(this.formValue);\n            } else {\n                this.remove.emit(option);\n            }\n        }\n    }\n\n    handleKey(event: KeyboardEvent) {\n        switch (event.key) {\n            case ',':\n            case 'Enter':\n                this.addOptionValue();\n                event.preventDefault();\n                break;\n            case 'Backspace':\n                if (this.lastSelected) {\n                    this.removeLastOption();\n                    this.lastSelected = false;\n                } else if (this.input === '') {\n                    this.lastSelected = true;\n                }\n                break;\n            default:\n                this.lastSelected = false;\n        }\n    }\n\n    handleBlur() {\n        this.isFocussed = false;\n        this.addOptionValue();\n    }\n\n    private addOptionValue() {\n        const options = this.parseInputIntoOptions(this.input).filter(option => {\n            // do not add an option with the same name\n            // as an existing option\n            const existing = this.options ?? this.formValue;\n            return !existing?.find(o => o?.name === option.name);\n        });\n        if (!this.formValue && this.options) {\n            for (const option of options) {\n                this.add.emit(option);\n            }\n        } else {\n            this.formValue = unique([...this.formValue, ...options]);\n            this.onChangeFn(this.formValue);\n        }\n        this.input = '';\n    }\n\n    private parseInputIntoOptions(input: string): Option[] {\n        return input\n            .split(/[,\\n]/)\n            .map(s => s.trim())\n            .filter(s => s !== '')\n            .map(s => ({ name: s, locked: false }));\n    }\n\n    private removeLastOption() {\n        if (this.optionValues.length) {\n            const option = this.optionValues[this.optionValues.length - 1];\n            this.removeOption(option);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"(!formValueChanged && !optionsChanged) || getVariantsToAdd().length === 0\"\n        >\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngFor=\"let group of optionGroups; index as i\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [options]=\"group.values\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n            (add)=\"addOption(i, $event.name)\"\n            (remove)=\"removeOption(i, $event)\"\n        ></vdr-option-value-input>\n    </div>\n    <div>\n        <button\n            [disabled]=\"group.locked\"\n            class=\"btn btn-icon btn-danger-outline mt5\" (click)=\"removeOptionGroup(group)\">\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOptionGroup()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th></th>\n                <th>{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                <th></th>\n            </tr>\n        </thead>\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\n            <td class=\"left\">\n                <clr-checkbox-wrapper *ngIf=\"!variant.existing\">\n                    <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"variant.enabled\"\n                        name=\"enabled\"\n                        clrCheckbox\n                        (ngModelChange)=\"formValueChanged = true\"\n                    />\n                    <label>{{ 'common.create' | translate }}</label>\n                </clr-checkbox-wrapper>\n            </td>\n            <td>\n                {{ getVariantName(variant) | translate }}\n            </td>\n            <td>\n                <div class=\"flex center\">\n                    <clr-input-container *ngIf=\"!variant.existing\">\n                        <input\n                            clrInput\n                            type=\"text\"\n                            [(ngModel)]=\"variant.sku\"\n                            [placeholder]=\"'catalog.sku' | translate\"\n                            name=\"sku\"\n                            required\n                            (ngModelChange)=\"onFormChanged(variant)\"\n                        />\n                    </clr-input-container>\n                    <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\n                </div>\n            </td>\n            <td>\n                <div class=\"flex center\">\n                    <clr-input-container *ngIf=\"!variant.existing\">\n                        <vdr-currency-input\n                            clrInput\n                            [(ngModel)]=\"variant.price\"\n                            name=\"price\"\n                            [currencyCode]=\"currencyCode\"\n                            (ngModelChange)=\"onFormChanged(variant)\"\n                        ></vdr-currency-input>\n                    </clr-input-container>\n                    <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\n                </div>\n            </td>\n            <td>\n                <div class=\"flex center\">\n                    <clr-input-container *ngIf=\"!variant.existing\">\n                        <input\n                            clrInput\n                            type=\"number\"\n                            [(ngModel)]=\"variant.stock\"\n                            name=\"stock\"\n                            min=\"0\"\n                            step=\"1\"\n                            (ngModelChange)=\"onFormChanged(variant)\"\n                        />\n                    </clr-input-container>\n                    <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\n                </div>\n            </td>\n            <td>\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\n                    <button class=\"icon-button\" vdrDropdownTrigger>\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                        <button\n                            type=\"button\"\n                            class=\"delete-button\"\n                            (click)=\"deleteVariant(productVariantId, variant.options)\"\n                            vdrDropdownItem\n                        >\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'common.delete' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </td>\n        </tr>\n    </table>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CreateProductOptionGroup,\n    CreateProductOptionInput,\n    CurrencyCode,\n    DataService,\n    DeactivateAware,\n    DeletionResult,\n    getDefaultUiLanguage,\n    GetProductVariantOptions,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ProductOptionGroupWithOptionsFragment,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { pick } from '@vendure/common/lib/pick';\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\nimport { defaultIfEmpty, filter, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\nimport { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\n\nexport class GeneratedVariant {\n    isDefault: boolean;\n    options: Array<{ name: string; id?: string }>;\n    productVariantId?: string;\n    enabled: boolean;\n    existing: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n\n    constructor(config: Partial<GeneratedVariant>) {\n        for (const key of Object.keys(config)) {\n            this[key] = config[key];\n        }\n    }\n}\n\ninterface OptionGroupUiModel {\n    id?: string;\n    isNew: boolean;\n    name: string;\n    locked: boolean;\n    values: Array<{\n        id?: string;\n        name: string;\n        locked: boolean;\n    }>;\n}\n\n@Component({\n    selector: 'vdr-product-variants-editor',\n    templateUrl: './product-variants-editor.component.html',\n    styleUrls: ['./product-variants-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\n    formValueChanged = false;\n    optionsChanged = false;\n    generatedVariants: GeneratedVariant[] = [];\n    optionGroups: OptionGroupUiModel[];\n    product: GetProductVariantOptions.Product;\n    currencyCode: CurrencyCode;\n    private languageCode: LanguageCode;\n\n    constructor(\n        private route: ActivatedRoute,\n        private dataService: DataService,\n        private productDetailService: ProductDetailService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {}\n\n    ngOnInit() {\n        this.initOptionsAndVariants();\n        this.languageCode =\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n    }\n\n    onFormChanged(variantInfo: GeneratedVariant) {\n        this.formValueChanged = true;\n        variantInfo.enabled = true;\n    }\n\n    canDeactivate(): boolean {\n        return !this.formValueChanged;\n    }\n\n    getVariantsToAdd() {\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\n    }\n\n    getVariantName(variant: GeneratedVariant) {\n        return variant.options.length === 0\n            ? _('catalog.default-variant')\n            : variant.options.map(o => o.name).join(' ');\n    }\n\n    addOptionGroup() {\n        this.optionGroups.push({\n            isNew: true,\n            locked: false,\n            name: '',\n            values: [],\n        });\n        this.optionsChanged = true;\n    }\n\n    removeOptionGroup(optionGroup: OptionGroupUiModel) {\n        const id = optionGroup.id;\n        if (optionGroup.isNew) {\n            this.optionGroups = this.optionGroups.filter(og => og !== optionGroup);\n            this.generateVariants();\n            this.optionsChanged = true;\n        } else if (id) {\n            this.modalService\n                .dialog({\n                    title: _('catalog.confirm-delete-product-option-group'),\n                    translationVars: { name: optionGroup.name },\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        { type: 'danger', label: _('common.delete'), returnValue: true },\n                    ],\n                })\n                .pipe(\n                    switchMap(val => {\n                        if (val) {\n                            return this.dataService.product.removeOptionGroupFromProduct({\n                                optionGroupId: id,\n                                productId: this.product.id,\n                            });\n                        } else {\n                            return EMPTY;\n                        }\n                    }),\n                )\n                .subscribe(({ removeOptionGroupFromProduct }) => {\n                    if (removeOptionGroupFromProduct.__typename === 'Product') {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'ProductOptionGroup',\n                        });\n                        this.initOptionsAndVariants();\n                        this.optionsChanged = true;\n                    } else if (removeOptionGroupFromProduct.__typename === 'ProductOptionInUseError') {\n                        this.notificationService.error(removeOptionGroupFromProduct.message ?? '');\n                    }\n                });\n        }\n    }\n\n    addOption(index: number, optionName: string) {\n        const group = this.optionGroups[index];\n        if (group) {\n            group.values.push({ name: optionName, locked: false });\n            this.generateVariants();\n            this.optionsChanged = true;\n        }\n    }\n\n    removeOption(index: number, { id, name }: { id?: string; name: string }) {\n        const optionGroup = this.optionGroups[index];\n        if (optionGroup) {\n            if (!id) {\n                optionGroup.values = optionGroup.values.filter(v => v.name !== name);\n                this.generateVariants();\n            } else {\n                this.modalService\n                    .dialog({\n                        title: _('catalog.confirm-delete-product-option'),\n                        translationVars: { name },\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\n                        ],\n                    })\n                    .pipe(\n                        switchMap(val => {\n                            if (val) {\n                                return this.dataService.product.deleteProductOption(id);\n                            } else {\n                                return EMPTY;\n                            }\n                        }),\n                    )\n                    .subscribe(({ deleteProductOption }) => {\n                        if (deleteProductOption.result === DeletionResult.DELETED) {\n                            this.notificationService.success(_('common.notify-delete-success'), {\n                                entity: 'ProductOption',\n                            });\n                            optionGroup.values = optionGroup.values.filter(v => v.id !== id);\n                            this.generateVariants();\n                            this.optionsChanged = true;\n                        } else {\n                            this.notificationService.error(deleteProductOption.message ?? '');\n                        }\n                    });\n            }\n        }\n    }\n\n    generateVariants() {\n        const groups = this.optionGroups.map(g => g.values);\n        const previousVariants = this.generatedVariants;\n        const generatedVariantFactory = (\n            isDefault: boolean,\n            options: GeneratedVariant['options'],\n            existingVariant?: GetProductVariantOptions.Variants,\n            prototypeVariant?: GetProductVariantOptions.Variants,\n        ): GeneratedVariant => {\n            const prototype = this.getVariantPrototype(options, previousVariants);\n            return new GeneratedVariant({\n                enabled: true,\n                existing: !!existingVariant,\n                productVariantId: existingVariant?.id,\n                isDefault,\n                options,\n                price: existingVariant?.price ?? prototypeVariant?.price ?? prototype.price,\n                sku: existingVariant?.sku ?? prototypeVariant?.sku ?? prototype.sku,\n                stock: existingVariant?.stockOnHand ?? prototypeVariant?.stockOnHand ?? prototype.stock,\n            });\n        };\n        this.generatedVariants = groups.length\n            ? generateAllCombinations(groups).map(options => {\n                  const existingVariant = this.product.variants.find(v =>\n                      this.optionsAreEqual(v.options, options),\n                  );\n                  const prototypeVariant = this.product.variants.find(v =>\n                      this.optionsAreSubset(v.options, options),\n                  );\n                  return generatedVariantFactory(false, options, existingVariant, prototypeVariant);\n              })\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\n    }\n\n    /**\n     * Returns one of the existing variants to base the newly-generated variant's\n     * details off.\n     */\n    private getVariantPrototype(\n        options: GeneratedVariant['options'],\n        previousVariants: GeneratedVariant[],\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\n        );\n        if (variantsWithSimilarOptions.length) {\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\n        }\n        return {\n            sku: '',\n            price: 0,\n            stock: 0,\n        };\n    }\n\n    deleteVariant(id: string, options: GeneratedVariant['options']) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product-variant'),\n                translationVars: { name: options.map(o => o.name).join(' ') },\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\n                ),\n                switchMap(() => this.reFetchProduct(null)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ProductVariant',\n                    });\n                    this.initOptionsAndVariants();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ProductVariant',\n                    });\n                },\n            );\n    }\n\n    save() {\n        this.optionGroups = this.optionGroups.filter(g => g.values.length);\n        const newOptionGroups = this.optionGroups\n            .filter(og => og.isNew)\n            .map(og => ({\n                name: og.name,\n                values: [],\n            }));\n\n        this.checkUniqueSkus()\n            .pipe(\n                mergeMap(() => this.confirmDeletionOfObsoleteVariants()),\n                mergeMap(() =>\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\n                ),\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\n                mergeMap(groups => this.createNewProductVariants(groups)),\n                mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)),\n                mergeMap(variants => this.reFetchProduct(variants)),\n            )\n            .subscribe({\n                next: variants => {\n                    this.formValueChanged = false;\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\n                        count: variants.length,\n                    });\n                    this.initOptionsAndVariants();\n                    this.optionsChanged = false;\n                },\n            });\n    }\n\n    private checkUniqueSkus() {\n        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {\n            return (\n                variant.enabled &&\n                this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant)\n            );\n        });\n        if (withDuplicateSkus.length) {\n            return this.modalService\n                .dialog({\n                    title: _('catalog.duplicate-sku-warning'),\n                    body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),\n                    buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],\n                })\n                .pipe(mergeMap(res => EMPTY));\n        } else {\n            return of(true);\n        }\n    }\n\n    private confirmDeletionOfObsoleteVariants(): Observable<boolean> {\n        const obsoleteVariants = this.getObsoleteVariants();\n        if (obsoleteVariants.length) {\n            return this.modalService\n                .fromComponent(ConfirmVariantDeletionDialogComponent, {\n                    locals: {\n                        variants: obsoleteVariants,\n                    },\n                })\n                .pipe(\n                    mergeMap(res => {\n                        return res === true ? of(true) : EMPTY;\n                    }),\n                );\n        } else {\n            return of(true);\n        }\n    }\n\n    private getObsoleteVariants() {\n        return this.product.variants.filter(\n            variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id),\n        );\n    }\n\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\n        return product.variants.length === 1 && product.optionGroups.length === 0;\n    }\n\n    private addOptionGroupsToProduct(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\n        if (createdOptionGroups.length) {\n            return forkJoin(\n                createdOptionGroups.map(optionGroup => {\n                    return this.dataService.product.addOptionGroupToProduct({\n                        productId: this.product.id,\n                        optionGroupId: optionGroup.id,\n                    });\n                }),\n            ).pipe(map(() => createdOptionGroups));\n        } else {\n            return of([]);\n        }\n    }\n\n    private addNewOptionsToGroups(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<string[]> {\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\n            .map(og => {\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\n                if (!productOptionGroupId) {\n                    throw new Error('Could not get a productOptionGroupId');\n                }\n                return og.values\n                    .filter(v => !v.locked)\n                    .map(v => ({\n                        productOptionGroupId,\n                        code: normalizeString(v.name, '-'),\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\n                    }));\n            })\n            .reduce((flat, options) => [...flat, ...options], []);\n\n        const allGroupIds = [\n            ...createdOptionGroups.map(g => g.id),\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\n        ];\n\n        if (newOptions.length) {\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\n                map(() => allGroupIds),\n            );\n        } else {\n            return of(allGroupIds);\n        }\n    }\n\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\n        return forkJoin(\n            groupsIds.map(id =>\n                this.dataService.product\n                    .getProductOptionGroup(id)\n                    .mapSingle(data => data.productOptionGroup)\n                    .pipe(filter(notNullOrUndefined)),\n            ),\n        ).pipe(defaultIfEmpty([] as ProductOptionGroupWithOptionsFragment[]));\n    }\n\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\n        const options = groups\n            .filter(notNullOrUndefined)\n            .map(og => og.options)\n            .reduce((flat, o) => [...flat, ...o], []);\n        const variants = this.generatedVariants\n            .filter(v => v.enabled && !v.existing)\n            .map(v => {\n                const optionIds = groups.map((group, index) => {\n                    const option = group.options.find(o => o.name === v.options[index].name);\n                    if (option) {\n                        return option.id;\n                    } else {\n                        throw new Error(`Could not find a matching option for group ${group.name}`);\n                    }\n                });\n                return {\n                    price: v.price,\n                    sku: v.sku,\n                    stock: v.stock,\n                    optionIds,\n                };\n            });\n        return this.productDetailService.createProductVariants(\n            this.product,\n            variants,\n            options,\n            this.languageCode,\n        );\n    }\n\n    private deleteObsoleteVariants<T>(input: T): Observable<T> {\n        const obsoleteVariants = this.getObsoleteVariants();\n        if (obsoleteVariants.length) {\n            const deleteOperations = obsoleteVariants.map(v =>\n                this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)),\n            );\n            return forkJoin(...deleteOperations);\n        } else {\n            return of(input);\n        }\n    }\n\n    private reFetchProduct<T>(input: T): Observable<T> {\n        // Re-fetch the Product to force an update to the view.\n        const id = this.route.snapshot.paramMap.get('id');\n        if (id) {\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\n        } else {\n            return of(input);\n        }\n    }\n\n    initOptionsAndVariants() {\n        this.dataService.product\n            // tslint:disable-next-line:no-non-null-assertion\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\n            // tslint:disable-next-line:no-non-null-assertion\n            .mapSingle(({ product }) => product!)\n            .subscribe(p => {\n                this.product = p;\n                const allUsedOptionIds = p.variants.map(v => v.options.map(option => option.id)).flat();\n                const allUsedOptionGroupIds = p.variants\n                    .map(v => v.options.map(option => option.groupId))\n                    .flat();\n                this.optionGroups = p.optionGroups.map(og => {\n                    return {\n                        id: og.id,\n                        isNew: false,\n                        name: og.name,\n                        locked: allUsedOptionGroupIds.includes(og.id),\n                        values: og.options.map(o => ({\n                            id: o.id,\n                            name: o.name,\n                            locked: allUsedOptionIds.includes(o.id),\n                        })),\n                    };\n                });\n                this.generateVariants();\n            });\n    }\n\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\n        return this.toOptionString(a) === this.toOptionString(b);\n    }\n\n    private optionsAreSubset(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\n        return this.toOptionString(b).includes(this.toOptionString(a));\n    }\n\n    private toOptionString(o: Array<{ name: string }>): string {\n        return o\n            .map(x => x.name)\n            .sort()\n            .join('|');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Asset' as const,\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                type: AssetType.IMAGE,\n                fileSize: 0,\n                mimeType: '',\n                width: 0,\n                height: 0,\n                source: '',\n                preview: '',\n                focalPoint: null,\n            },\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, Collection, DataService, getDefaultUiLanguage } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Collection' as 'Collection',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                isPrivate: false,\n                breadcrumbs: [],\n                description: '',\n                featuredAsset: null,\n                assets: [],\n                translations: [],\n                filters: [],\n                parent: {} as any,\n                children: null,\n            },\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { FacetWithValues } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Facet' as 'Facet',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                isPrivate: false,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                code: '',\n                translations: [],\n                values: [],\n            },\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    BaseEntityResolver,\n    DataService,\n    getDefaultUiLanguage,\n    GetProductWithVariants,\n} from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductResolver extends BaseEntityResolver<GetProductWithVariants.Product> {\n    constructor(dataService: DataService, router: Router) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                enabled: true,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                featuredAsset: null,\n                assets: [],\n                description: '',\n                translations: [],\n                optionGroups: [],\n                facetValues: [],\n                variantList: { items: [], totalItems: 0 },\n                channels: [],\n            },\n            id =>\n                dataService.product\n                    .getProduct(id, { take: 10 })\n                    .refetchOnChannelChange()\n                    .mapStream(data => data.product),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                optionGroups: [],\n                variants: [],\n            },\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    CanDeactivateDetailGuard,\n    Collection,\n    createResolveData,\n    detailBreadcrumb,\n    FacetWithValues,\n    GetProductWithVariants,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { AssetResolver } from './providers/routing/asset-resolver';\nimport { CollectionResolver } from './providers/routing/collection-resolver';\nimport { FacetResolver } from './providers/routing/facet-resolver';\nimport { ProductResolver } from './providers/routing/product-resolver';\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\n\nexport const catalogRoutes: Route[] = [\n    {\n        path: 'products',\n        component: ProductListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.products'),\n        },\n    },\n    {\n        path: 'products/:id',\n        component: ProductDetailComponent,\n        resolve: createResolveData(ProductResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productBreadcrumb,\n        },\n    },\n    {\n        path: 'products/:id/manage-variants',\n        component: ProductVariantsEditorComponent,\n        resolve: createResolveData(ProductVariantsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productVariantEditorBreadcrumb,\n        },\n    },\n    {\n        path: 'products/:id/options',\n        component: ProductOptionsEditorComponent,\n        resolve: createResolveData(ProductVariantsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productOptionsEditorBreadcrumb,\n        },\n    },\n    {\n        path: 'facets',\n        component: FacetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.facets'),\n        },\n    },\n    {\n        path: 'facets/:id',\n        component: FacetDetailComponent,\n        resolve: createResolveData(FacetResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: facetBreadcrumb,\n        },\n    },\n    {\n        path: 'collections',\n        component: CollectionListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.collections'),\n        },\n    },\n    {\n        path: 'collections/:id',\n        component: CollectionDetailComponent,\n        resolve: createResolveData(CollectionResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: collectionBreadcrumb,\n        },\n    },\n    {\n        path: 'assets',\n        component: AssetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.assets'),\n        },\n    },\n    {\n        path: 'assets/:id',\n        component: AssetDetailComponent,\n        resolve: createResolveData(AssetResolver),\n        data: {\n            breadcrumb: assetBreadcrumb,\n        },\n    },\n];\n\nexport function productBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<GetProductWithVariants.Product>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.products',\n        getName: product => product.name,\n        route: 'products',\n    });\n}\n\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\n    return data.entity.pipe(\n        map((entity: any) => {\n            return [\n                {\n                    label: _('breadcrumb.products'),\n                    link: ['../', 'products'],\n                },\n                {\n                    label: `${entity.name}`,\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\n                },\n                {\n                    label: _('breadcrumb.manage-variants'),\n                    link: ['manage-variants'],\n                },\n            ];\n        }),\n    );\n}\n\nexport function productOptionsEditorBreadcrumb(data: any, params: any) {\n    return data.entity.pipe(\n        map((entity: any) => {\n            return [\n                {\n                    label: _('breadcrumb.products'),\n                    link: ['../', 'products'],\n                },\n                {\n                    label: `${entity.name}`,\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\n                },\n                {\n                    label: _('breadcrumb.product-options'),\n                    link: ['options'],\n                },\n            ];\n        }),\n    );\n}\n\nexport function facetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<FacetWithValues.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.facets',\n        getName: facet => facet.name,\n        route: 'facets',\n    });\n}\n\nexport function collectionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Collection.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.collections',\n        getName: collection => collection.name,\n        route: 'collections',\n    });\n}\n\nexport function assetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Asset.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.assets',\n        getName: asset => asset.name,\n        route: 'assets',\n    });\n}\n","<ng-template vdrDialogTitle>\n    {{ 'catalog.assign-to-channel' | translate }}\n</ng-template>\n<clr-input-container class=\"mb4\">\n    <label>{{ 'common.channel' | translate }}</label>\n    <vdr-channel-assignment-control\n        clrInput\n        [multiple]=\"false\"\n        [includeDefaultChannel]=\"false\"\n        [formControl]=\"selectedChannelIdControl\"\n    ></vdr-channel-assignment-control>\n</clr-input-container>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DataService, Dialog, GetChannels, NotificationService } from '@vendure/admin-ui/core';\nimport { combineLatest } from 'rxjs';\n\n@Component({\n    selector: 'vdr-assign-to-channel-dialog',\n    templateUrl: './assign-to-channel-dialog.component.html',\n    styleUrls: ['./assign-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignToChannelDialogComponent implements OnInit, Dialog<GetChannels.Channels> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: GetChannels.Channels) => void;\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            this.resolveWith(selectedChannel);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { gql } from 'apollo-angular';\n\nexport const GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS = gql`\n    query GetProductsWithFacetValuesByIds($ids: [String!]!) {\n        products(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_VARIANTS_WITH_FACET_VALUES_BY_IDS = gql`\n    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {\n        productVariants(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                sku\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport const UPDATE_PRODUCTS_BULK = gql`\n    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {\n        updateProducts(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n`;\n\nexport const UPDATE_VARIANTS_BULK = gql`\n    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {\n        updateProductVariants(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n`;\n","<ng-template vdrDialogTitle>\n    {{ 'catalog.edit-facet-values' | translate }}\n</ng-template>\n\n<div class=\"flex\">\n    <div class=\"flex center\">\n        <div class=\"mr2\">\n            {{ 'catalog.add-facet-value' | translate }}\n        </div>\n        <vdr-facet-value-selector\n            [facets]=\"facets\"\n            (selectedValuesChange)=\"selectedValues = $event\"\n        ></vdr-facet-value-selector>\n    </div>\n</div>\n\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\n    <tbody>\n        <tr *ngFor=\"let item of items\">\n            <td class=\"left align-middle\">\n                <div>{{ item.name }}</div>\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\n            </td>\n            <td class=\"left\">\n                <vdr-facet-value-chip\n                    *ngFor=\"let facetValue of item.facetValues\"\n                    [facetValue]=\"facetValue\"\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\n                ></vdr-facet-value-chip>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<ng-template #placeholder>\n    <div class=\"loading\">\n    <clr-spinner></clr-spinner>\n    </div>\n</ng-template>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"addFacetValues()\"\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n    DataService,\n    Dialog,\n    FacetWithValuesFragment,\n    GetProductsWithFacetValuesByIdsQuery,\n    GetProductsWithFacetValuesByIdsQueryVariables,\n    GetVariantsWithFacetValuesByIdsQuery,\n    UpdateProductsBulkMutation,\n    UpdateProductsBulkMutationVariables,\n    UpdateVariantsBulkMutation,\n    UpdateVariantsBulkMutationVariables,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable, Subscription } from 'rxjs';\nimport { shareReplay, switchMap } from 'rxjs/operators';\n\nimport {\n    GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS,\n    GET_VARIANTS_WITH_FACET_VALUES_BY_IDS,\n    UPDATE_PRODUCTS_BULK,\n    UPDATE_VARIANTS_BULK,\n} from './bulk-add-facet-values-dialog.graphql';\n\ninterface ProductOrVariant {\n    id: string;\n    name: string;\n    sku?: string;\n    facetValues: Array<{\n        id: string;\n        name: string;\n        code: string;\n        facet: Array<{\n            id: string;\n            name: string;\n            code: string;\n        }>;\n    }>;\n}\n\n@Component({\n    selector: 'vdr-bulk-add-facet-values-dialog',\n    templateUrl: './bulk-add-facet-values-dialog.component.html',\n    styleUrls: ['./bulk-add-facet-values-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BulkAddFacetValuesDialogComponent\n    implements OnInit, OnDestroy, Dialog<FacetWithValuesFragment[]>\n{\n    resolveWith: (result?: FacetWithValuesFragment[]) => void;\n    /* provided by call to ModalService */\n    mode: 'product' | 'variant' = 'product';\n    ids?: string[];\n    facets: FacetWithValuesFragment[] = [];\n    state: 'loading' | 'ready' | 'saving' = 'loading';\n\n    selectedValues: FacetWithValuesFragment[] = [];\n    items: ProductOrVariant[] = [];\n    facetValuesRemoved = false;\n    private subscription: Subscription;\n    constructor(private dataService: DataService, private changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        const fetchData$: Observable<any> =\n            this.mode === 'product'\n                ? this.dataService\n                      .query<\n                          GetProductsWithFacetValuesByIdsQuery,\n                          GetProductsWithFacetValuesByIdsQueryVariables\n                      >(GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, {\n                          ids: this.ids ?? [],\n                      })\n                      .mapSingle(({ products }) =>\n                          products.items.map(p => ({ ...p, facetValues: [...p.facetValues] })),\n                      )\n                : this.dataService\n                      .query<\n                          GetVariantsWithFacetValuesByIdsQuery,\n                          GetProductsWithFacetValuesByIdsQueryVariables\n                      >(GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, {\n                          ids: this.ids ?? [],\n                      })\n                      .mapSingle(({ productVariants }) =>\n                          productVariants.items.map(p => ({ ...p, facetValues: [...p.facetValues] })),\n                      );\n        this.subscription = fetchData$.subscribe({\n            next: items => {\n                this.items = items;\n                this.state = 'ready';\n                this.changeDetectorRef.markForCheck();\n            },\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    removeFacetValue(item: ProductOrVariant, facetValueId: string) {\n        item.facetValues = item.facetValues.filter(fv => fv.id !== facetValueId);\n        this.facetValuesRemoved = true;\n    }\n\n    addFacetValues() {\n        const selectedFacetValueIds = this.selectedValues.map(sv => sv.id);\n        this.state = 'saving';\n        const save$: Observable<any> =\n            this.mode === 'product'\n                ? this.dataService.mutate<UpdateProductsBulkMutation, UpdateProductsBulkMutationVariables>(\n                      UPDATE_PRODUCTS_BULK,\n                      {\n                          input: this.items?.map(product => ({\n                              id: product.id,\n                              facetValueIds: unique([\n                                  ...product.facetValues.map(fv => fv.id),\n                                  ...selectedFacetValueIds,\n                              ]),\n                          })),\n                      },\n                  )\n                : this.dataService.mutate<UpdateVariantsBulkMutation, UpdateVariantsBulkMutationVariables>(\n                      UPDATE_VARIANTS_BULK,\n                      {\n                          input: this.items?.map(product => ({\n                              id: product.id,\n                              facetValueIds: unique([\n                                  ...product.facetValues.map(fv => fv.id),\n                                  ...selectedFacetValueIds,\n                              ]),\n                          })),\n                      },\n                  );\n        return save$.subscribe(result => {\n            this.resolveWith(this.selectedValues);\n        });\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkAction,\n    currentChannelIsNotDefault,\n    DataService,\n    DeletionResult,\n    getChannelCodeFromUserStatus,\n    isMultiChannel,\n    ModalService,\n    NotificationService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, from, of } from 'rxjs';\nimport { mapTo, switchMap } from 'rxjs/operators';\n\nimport { AssignToChannelDialogComponent } from '../assign-to-channel-dialog/assign-to-channel-dialog.component';\nimport { CollectionPartial } from '../collection-tree/collection-tree.component';\n\nimport { CollectionListComponent } from './collection-list.component';\n\nexport const deleteCollectionsBulkAction: BulkAction<CollectionPartial, CollectionListComponent> = {\n    location: 'collection-list',\n    label: _('common.delete'),\n    icon: 'trash',\n    iconClass: 'is-danger',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.DeleteCollection) ||\n        userPermissions.includes(Permission.DeleteCatalog),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n\n        modalService\n            .dialog({\n                title: _('catalog.confirm-bulk-delete-collections'),\n                translationVars: {\n                    count: selection.length,\n                },\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? dataService.collection.deleteCollections(unique(selection.map(c => c.id)))\n                        : EMPTY,\n                ),\n            )\n            .subscribe(result => {\n                let deleted = 0;\n                const errors: string[] = [];\n                for (const item of result.deleteCollections) {\n                    if (item.result === DeletionResult.DELETED) {\n                        deleted++;\n                    } else if (item.message) {\n                        errors.push(item.message);\n                    }\n                }\n                if (0 < deleted) {\n                    notificationService.success(_('catalog.notify-bulk-delete-collections-success'), {\n                        count: deleted,\n                    });\n                }\n                if (0 < errors.length) {\n                    notificationService.error(errors.join('\\n'));\n                }\n                hostComponent.refresh();\n                clearSelection();\n            });\n    },\n};\n\nexport const assignCollectionsToChannelBulkAction: BulkAction<CollectionPartial, CollectionListComponent> = {\n    location: 'collection-list',\n    label: _('catalog.assign-to-channel'),\n    icon: 'layers',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateCatalog) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .fromComponent(AssignToChannelDialogComponent, {\n                size: 'md',\n                locals: {},\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return dataService.collection\n                            .assignCollectionsToChannel({\n                                collectionIds: selection.map(c => c.id),\n                                channelId: result.id,\n                            })\n                            .pipe(mapTo(result));\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                notificationService.success(_('catalog.assign-collections-to-channel-success'), {\n                    count: selection.length,\n                    channelCode: result.code,\n                });\n                clearSelection();\n            });\n    },\n};\n\nexport const removeCollectionsFromChannelBulkAction: BulkAction<CollectionPartial, CollectionListComponent> =\n    {\n        location: 'collection-list',\n        label: _('catalog.remove-from-channel'),\n        requiresPermission: userPermissions =>\n            userPermissions.includes(Permission.UpdateChannel) ||\n            userPermissions.includes(Permission.UpdateProduct),\n        getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\n        icon: 'layers',\n        iconClass: 'is-warning',\n        isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\n        onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n            const modalService = injector.get(ModalService);\n            const dataService = injector.get(DataService);\n            const notificationService = injector.get(NotificationService);\n            const activeChannelId$ = dataService.client\n                .userStatus()\n                .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n\n            from(getChannelCodeFromUserStatus(injector.get(DataService)))\n                .pipe(\n                    switchMap(({ channelCode }) =>\n                        modalService.dialog({\n                            title: _('catalog.remove-from-channel'),\n                            translationVars: {\n                                channelCode,\n                            },\n                            buttons: [\n                                { type: 'secondary', label: _('common.cancel') },\n                                {\n                                    type: 'danger',\n                                    label: _('common.remove'),\n                                    returnValue: true,\n                                },\n                            ],\n                        }),\n                    ),\n                    switchMap(res =>\n                        res\n                            ? activeChannelId$.pipe(\n                                  switchMap(activeChannelId =>\n                                      activeChannelId\n                                          ? dataService.collection.removeCollectionsFromChannel({\n                                                channelId: activeChannelId,\n                                                collectionIds: selection.map(c => c.id),\n                                            })\n                                          : EMPTY,\n                                  ),\n                                  mapTo(true),\n                              )\n                            : of(false),\n                    ),\n                )\n                .subscribe(removed => {\n                    if (removed) {\n                        clearSelection();\n                        notificationService.success(\n                            _('catalog.notify-remove-collections-from-channel-success'),\n                            {\n                                count: selection.length,\n                            },\n                        );\n                        hostComponent.refresh();\n                    }\n                });\n        },\n    };\n","<div\n    cdkDropList\n    class=\"tree-node\"\n    #dropList\n    [cdkDropListData]=\"collectionTree\"\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\n    (cdkDropListDropped)=\"drop($event)\"\n>\n    <div\n        class=\"collection\"\n        [class.private]=\"collection.isPrivate\"\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\n        cdkDrag\n        [cdkDragData]=\"collection\"\n    >\n        <div\n            class=\"collection-detail\"\n            [ngClass]=\"'depth-' + depth\"\n            [class.active]=\"collection.id === activeCollectionId\"\n        >\n            <div>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [checked]=\"selectionManager.isSelected(collection)\"\n                    (click)=\"selectionManager.toggleSelection(collection, $event)\"\n                />\n            </div>\n            <div class=\"name\">\n                <button\n                    class=\"icon-button folder-button\"\n                    [disabled]=\"expandAll\"\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\n                    (click)=\"toggleExpanded(collection)\"\n                >\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\n                </button>\n                <ng-template #folderSpacer>\n                    <div class=\"folder-button-spacer\"></div>\n                </ng-template>\n                {{ collection.name }}\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\n            <a\n                class=\"btn btn-link btn-sm\"\n                [routerLink]=\"['./', { contents: collection.id }]\"\n                queryParamsHandling=\"preserve\"\n            >\n                <clr-icon shape=\"view-list\"></clr-icon>\n                {{ 'catalog.view-contents' | translate }}\n            </a>\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\n                <clr-icon shape=\"edit\"></clr-icon>\n                {{ 'common.edit' | translate }}\n            </a>\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\n            </div>\n            <vdr-dropdown>\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <a\n                        class=\"dropdown-item\"\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.create-new-collection' | translate }}\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\n                        (click)=\"moveUp(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret up\"></clr-icon>\n                        {{ 'catalog.move-up' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\n                        \"\n                        (click)=\"moveDown(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                        {{ 'catalog.move-down' | translate }}\n                    </button>\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        *ngFor=\"let item of moveListItems\"\n                        (click)=\"move(collection, item.id)\"\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\n                    >\n                        <div class=\"move-to-item\">\n                            <div class=\"move-icon\">\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\n                            </div>\n                            <div class=\"path\">\n                                {{ item.path }}\n                            </div>\n                        </div>\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        class=\"button\"\n                        vdrDropdownItem\n                        (click)=\"delete(collection.id)\"\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <vdr-collection-tree-node\n            *ngIf=\"collection.expanded || expandAll\"\n            [expandAll]=\"expandAll\"\n            [collectionTree]=\"collection\"\n            [activeCollectionId]=\"activeCollectionId\"\n            [selectionManager]=\"selectionManager\"\n        ></vdr-collection-tree-node>\n    </div>\n</div>\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    SimpleChanges,\n    SkipSelf,\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService, Permission, SelectionManager } from '@vendure/admin-ui/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { RootNode, TreeNode } from './array-to-tree';\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-tree-node',\n    templateUrl: './collection-tree-node.component.html',\n    styleUrls: ['./collection-tree-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges, OnDestroy {\n    depth = 0;\n    parentName: string;\n    @Input() collectionTree: TreeNode<CollectionPartial>;\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    @Input() selectionManager: SelectionManager<CollectionPartial>;\n    hasUpdatePermission$: Observable<boolean>;\n    hasDeletePermission$: Observable<boolean>;\n    moveListItems: Array<{ path: string; id: string }> = [];\n    private subscription: Subscription;\n\n    constructor(\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\n        private root: CollectionTreeComponent,\n        private dataService: DataService,\n        private router: Router,\n        private route: ActivatedRoute,\n        private changeDetectorRef: ChangeDetectorRef,\n    ) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    ngOnInit() {\n        this.parentName = this.collectionTree.name || '<root>';\n        const permissions$ = this.dataService.client\n            .userStatus()\n            .mapStream(data => data.userStatus.permissions)\n            .pipe(shareReplay(1));\n        this.hasUpdatePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\n            ),\n        );\n        this.hasDeletePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\n            ),\n        );\n        this.subscription = this.selectionManager?.selectionChanges$.subscribe(() =>\n            this.changeDetectorRef.markForCheck(),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const expandAllChange = changes['expandAll'];\n        if (expandAllChange) {\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\n                this.collectionTree.children.forEach(c => (c.expanded = false));\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n    }\n\n    trackByFn(index: number, item: CollectionPartial) {\n        return item.id;\n    }\n\n    toggleExpanded(collection: TreeNode<CollectionPartial>) {\n        collection.expanded = !collection.expanded;\n        let expandedIds = this.route.snapshot.queryParamMap.get('expanded')?.split(',') ?? [];\n        if (collection.expanded) {\n            expandedIds.push(collection.id);\n        } else {\n            expandedIds = expandedIds.filter(id => id !== collection.id);\n        }\n        this.router.navigate(['./'], {\n            queryParams: {\n                expanded: expandedIds.filter(id => !!id).join(','),\n            },\n            queryParamsHandling: 'merge',\n            relativeTo: this.route,\n        });\n    }\n\n    getMoveListItems(collection: CollectionPartial) {\n        this.moveListItems = this.root.getMoveListItems(collection);\n    }\n\n    move(collection: CollectionPartial, parentId: string) {\n        this.root.onMove({\n            index: 0,\n            parentId,\n            collectionId: collection.id,\n        });\n    }\n\n    moveUp(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex - 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    moveDown(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex + 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\n        this.root.onDrop(event);\n    }\n\n    delete(id: string) {\n        this.root.onDelete(id);\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkAction,\n    currentChannelIsNotDefault,\n    DataService,\n    DeletionResult,\n    getChannelCodeFromUserStatus,\n    GetFacetList,\n    isMultiChannel,\n    ModalService,\n    NotificationService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, of } from 'rxjs';\nimport { map, mapTo, switchMap } from 'rxjs/operators';\n\nimport { AssignToChannelDialogComponent } from '../assign-to-channel-dialog/assign-to-channel-dialog.component';\n\nimport { FacetListComponent } from './facet-list.component';\n\nexport const deleteFacetsBulkAction: BulkAction<GetFacetList.Items, FacetListComponent> = {\n    location: 'facet-list',\n    label: _('common.delete'),\n    icon: 'trash',\n    iconClass: 'is-danger',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.DeleteFacet) ||\n        userPermissions.includes(Permission.DeleteCatalog),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n\n        function showModalAndDelete(facetIds: string[], message?: string) {\n            return modalService\n                .dialog({\n                    title: _('catalog.confirm-bulk-delete-facets'),\n                    translationVars: {\n                        count: selection.length,\n                    },\n                    size: message ? 'lg' : 'md',\n                    body: message,\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        {\n                            type: 'danger',\n                            label: message ? _('common.force-delete') : _('common.delete'),\n                            returnValue: true,\n                        },\n                    ],\n                })\n                .pipe(\n                    switchMap(res =>\n                        res\n                            ? dataService.facet\n                                  .deleteFacets(facetIds, !!message)\n                                  .pipe(map(res2 => res2.deleteFacets))\n                            : of([]),\n                    ),\n                );\n        }\n\n        showModalAndDelete(unique(selection.map(f => f.id)))\n            .pipe(\n                switchMap(result => {\n                    let deletedCount = 0;\n                    const errors: string[] = [];\n                    const errorIds: string[] = [];\n                    let i = 0;\n                    for (const item of result) {\n                        if (item.result === DeletionResult.DELETED) {\n                            deletedCount++;\n                        } else if (item.message) {\n                            errors.push(item.message);\n                            errorIds.push(selection[i]?.id);\n                        }\n                        i++;\n                    }\n                    if (0 < errorIds.length) {\n                        return showModalAndDelete(errorIds, errors.join('\\n')).pipe(\n                            map(result2 => {\n                                const deletedCount2 = result2.filter(\n                                    r => r.result === DeletionResult.DELETED,\n                                ).length;\n                                return deletedCount + deletedCount2;\n                            }),\n                        );\n                    } else {\n                        return of(deletedCount);\n                    }\n                }),\n            )\n            .subscribe(deletedCount => {\n                if (deletedCount) {\n                    hostComponent.refresh();\n                    clearSelection();\n                    notificationService.success(_('catalog.notify-bulk-delete-facets-success'), {\n                        count: deletedCount,\n                    });\n                }\n            });\n    },\n};\n\nexport const assignFacetsToChannelBulkAction: BulkAction<GetFacetList.Items, FacetListComponent> = {\n    location: 'facet-list',\n    label: _('catalog.assign-to-channel'),\n    icon: 'layers',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateFacet) ||\n        userPermissions.includes(Permission.UpdateCatalog),\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .fromComponent(AssignToChannelDialogComponent, {\n                size: 'md',\n                locals: {},\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return dataService.facet\n                            .assignFacetsToChannel({\n                                facetIds: selection.map(f => f.id),\n                                channelId: result.id,\n                            })\n                            .pipe(mapTo(result));\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                notificationService.success(_('catalog.assign-facets-to-channel-success'), {\n                    count: selection.length,\n                    channelCode: result.code,\n                });\n                clearSelection();\n            });\n    },\n};\n\nexport const removeFacetsFromChannelBulkAction: BulkAction<GetFacetList.Items, FacetListComponent> = {\n    location: 'facet-list',\n    label: _('catalog.remove-from-channel'),\n    getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\n    icon: 'layers',\n    iconClass: 'is-warning',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateFacet) ||\n        userPermissions.includes(Permission.UpdateCatalog),\n    isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n\n        const activeChannelId$ = dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n\n        function showModalAndDelete(facetIds: string[], message?: string) {\n            return modalService\n                .dialog({\n                    title: _('catalog.remove-from-channel'),\n                    translationVars: {\n                        count: selection.length,\n                    },\n                    size: message ? 'lg' : 'md',\n                    body: message,\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        {\n                            type: 'danger',\n                            label: message ? _('common.force-remove') : _('common.remove'),\n                            returnValue: true,\n                        },\n                    ],\n                })\n                .pipe(\n                    switchMap(res =>\n                        res\n                            ? activeChannelId$.pipe(\n                                  switchMap(activeChannelId =>\n                                      activeChannelId\n                                          ? dataService.facet.removeFacetsFromChannel({\n                                                channelId: activeChannelId,\n                                                facetIds,\n                                                force: !!message,\n                                            })\n                                          : EMPTY,\n                                  ),\n                                  map(res2 => res2.removeFacetsFromChannel),\n                              )\n                            : EMPTY,\n                    ),\n                );\n        }\n\n        showModalAndDelete(unique(selection.map(f => f.id)))\n            .pipe(\n                switchMap(result => {\n                    let removedCount = selection.length;\n                    const errors: string[] = [];\n                    const errorIds: string[] = [];\n                    let i = 0;\n                    for (const item of result) {\n                        if (item.__typename === 'FacetInUseError') {\n                            errors.push(item.message);\n                            errorIds.push(selection[i]?.id);\n                            removedCount--;\n                        }\n                        i++;\n                    }\n                    if (0 < errorIds.length) {\n                        return showModalAndDelete(errorIds, errors.join('\\n')).pipe(\n                            map(result2 => {\n                                const notRemovedCount = result2.filter(\n                                    r => r.__typename === 'FacetInUseError',\n                                ).length;\n                                return selection.length - notRemovedCount;\n                            }),\n                        );\n                    } else {\n                        return of(removedCount);\n                    }\n                }),\n                switchMap(removedCount =>\n                    removedCount\n                        ? getChannelCodeFromUserStatus(dataService).then(({ channelCode }) => ({\n                              channelCode,\n                              removedCount,\n                          }))\n                        : EMPTY,\n                ),\n            )\n            .subscribe(({ removedCount, channelCode }) => {\n                if (removedCount) {\n                    hostComponent.refresh();\n                    clearSelection();\n                    notificationService.success(_('catalog.notify-remove-facets-from-channel-success'), {\n                        count: removedCount,\n                        channelCode,\n                    });\n                }\n            });\n    },\n};\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input\n            #optionGroupName\n            placeholder=\"e.g. Size\"\n            clrInput\n            [(ngModel)]=\"group.name\"\n            name=\"name\"\n            required\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\n        />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            (edit)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n    <div class=\"remove-group\">\n        <button\n            class=\"btn btn-icon btn-warning-outline\"\n            [title]=\"'catalog.remove-option' | translate\"\n            (click)=\"removeOption(group.name)\"\n        >\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            </tr>\n        </thead>\n        <tr\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\n        >\n            <td *ngIf=\"1 < variants.length\">\n                <input\n                    type=\"checkbox\"\n                    (change)=\"onFormChange()\"\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\n                    clrCheckbox\n                />\n            </td>\n            <td *ngIf=\"1 < variants.length\">\n                {{ variant.values.join(' ') }}\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"text\"\n                        (change)=\"onFormChange()\"\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\n                        [placeholder]=\"'catalog.sku' | translate\"\n                    />\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <vdr-currency-input\n                        clrInput\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\n                        (ngModelChange)=\"onFormChange()\"\n                        [currencyCode]=\"currencyCode\"\n                    ></vdr-currency-input>\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"number\"\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\n                        (change)=\"onFormChange()\"\n                        min=\"0\"\n                        step=\"1\"\n                    />\n                </clr-input-container>\n            </td>\n        </tr>\n    </table>\n</div>\n","import { Component, ElementRef, EventEmitter, OnInit, Output, QueryList, ViewChildren } from '@angular/core';\nimport { CurrencyCode, DataService } from '@vendure/admin-ui/core';\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\n\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\n\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\nexport type CreateVariantValues = {\n    optionValues: string[];\n    enabled: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n};\nexport type CreateProductVariantsConfig = {\n    groups: Array<{ name: string; values: string[] }>;\n    variants: CreateVariantValues[];\n};\n\n@Component({\n    selector: 'vdr-generate-product-variants',\n    templateUrl: './generate-product-variants.component.html',\n    styleUrls: ['./generate-product-variants.component.scss'],\n})\nexport class GenerateProductVariantsComponent implements OnInit {\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\n    @ViewChildren('optionGroupName', { read: ElementRef }) groupNameInputs: QueryList<ElementRef>;\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\n    currencyCode: CurrencyCode;\n    variants: Array<{ id: string; values: string[] }>;\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n\n        this.generateVariants();\n    }\n\n    addOption() {\n        this.optionGroups.push({ name: '', values: [] });\n        const index = this.optionGroups.length - 1;\n        setTimeout(() => {\n            const input = this.groupNameInputs.get(index)?.nativeElement;\n            input?.focus();\n        });\n    }\n\n    removeOption(name: string) {\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\n        this.generateVariants();\n    }\n\n    generateVariants() {\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\n        const groups = totalValuesCount\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\n            : [[DEFAULT_VARIANT_CODE]];\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\n\n        this.variants.forEach(variant => {\n            if (!this.variantFormValues[variant.id]) {\n                this.variantFormValues[variant.id] = {\n                    optionValues: variant.values,\n                    enabled: true,\n                    price: this.copyFromDefault(variant.id, 'price', 0),\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\n                };\n            }\n        });\n        this.onFormChange();\n    }\n\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\n        return variant.values.join('|');\n    }\n\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\n        event.preventDefault();\n        event.stopPropagation();\n        optionValueInputComponent.focus();\n    }\n\n    onFormChange() {\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\n        this.variantsChange.emit({\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\n            variants: variantsToCreate,\n        });\n    }\n\n    private copyFromDefault<T extends keyof CreateVariantValues>(\n        variantId: string,\n        prop: T,\n        value: CreateVariantValues[T],\n    ): CreateVariantValues[T] {\n        return variantId !== DEFAULT_VARIANT_CODE\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\n            : value;\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkAction,\n    currentChannelIsNotDefault,\n    DataService,\n    DeletionResult,\n    getChannelCodeFromUserStatus,\n    isMultiChannel,\n    ModalService,\n    NotificationService,\n    Permission,\n    SearchProducts,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, from, of } from 'rxjs';\nimport { mapTo, switchMap } from 'rxjs/operators';\n\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { BulkAddFacetValuesDialogComponent } from '../bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\n\nimport { ProductListComponent } from './product-list.component';\n\nexport const deleteProductsBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('common.delete'),\n    icon: 'trash',\n    iconClass: 'is-danger',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.DeleteProduct) ||\n        userPermissions.includes(Permission.DeleteCatalog),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .dialog({\n                title: _('catalog.confirm-bulk-delete-products'),\n                translationVars: {\n                    count: selection.length,\n                },\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? dataService.product.deleteProducts(unique(selection.map(p => p.productId)))\n                        : EMPTY,\n                ),\n            )\n            .subscribe(result => {\n                let deleted = 0;\n                const errors: string[] = [];\n                for (const item of result.deleteProducts) {\n                    if (item.result === DeletionResult.DELETED) {\n                        deleted++;\n                    } else if (item.message) {\n                        errors.push(item.message);\n                    }\n                }\n                if (0 < deleted) {\n                    notificationService.success(_('catalog.notify-bulk-delete-products-success'), {\n                        count: deleted,\n                    });\n                }\n                if (0 < errors.length) {\n                    notificationService.error(errors.join('\\n'));\n                }\n                hostComponent.refresh();\n                clearSelection();\n            });\n    },\n};\n\nexport const assignProductsToChannelBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('catalog.assign-to-channel'),\n    icon: 'layers',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateCatalog) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .fromComponent(AssignProductsToChannelDialogComponent, {\n                size: 'lg',\n                locals: {\n                    productIds: unique(selection.map(p => p.productId)),\n                    currentChannelIds: [],\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    clearSelection();\n                }\n            });\n    },\n};\n\nexport const removeProductsFromChannelBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('catalog.remove-from-channel'),\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateChannel) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\n    icon: 'layers',\n    iconClass: 'is-warning',\n    isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        const activeChannelId$ = dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n\n        from(getChannelCodeFromUserStatus(injector.get(DataService)))\n            .pipe(\n                switchMap(({ channelCode }) =>\n                    modalService.dialog({\n                        title: _('catalog.remove-from-channel'),\n                        translationVars: {\n                            channelCode,\n                        },\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            {\n                                type: 'danger',\n                                label: _('common.remove'),\n                                returnValue: true,\n                            },\n                        ],\n                    }),\n                ),\n                switchMap(res =>\n                    res\n                        ? activeChannelId$.pipe(\n                              switchMap(activeChannelId =>\n                                  activeChannelId\n                                      ? dataService.product.removeProductsFromChannel({\n                                            channelId: activeChannelId,\n                                            productIds: selection.map(p => p.productId),\n                                        })\n                                      : EMPTY,\n                              ),\n                              mapTo(true),\n                          )\n                        : of(false),\n                ),\n            )\n            .subscribe(removed => {\n                if (removed) {\n                    clearSelection();\n                    notificationService.success(_('common.notify-remove-products-from-channel-success'), {\n                        count: selection.length,\n                    });\n                    setTimeout(() => hostComponent.refresh(), 1000);\n                }\n            });\n    },\n};\n\nexport const assignFacetValuesToProductsBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('catalog.edit-facet-values'),\n    icon: 'tag',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateCatalog) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        const mode: 'product' | 'variant' = hostComponent.groupByProduct ? 'product' : 'variant';\n        const ids =\n            mode === 'product'\n                ? unique(selection.map(p => p.productId))\n                : unique(selection.map(p => p.productVariantId));\n        return dataService.facet\n            .getAllFacets()\n            .mapSingle(data => data.facets.items)\n            .pipe(\n                switchMap(facets =>\n                    modalService.fromComponent(BulkAddFacetValuesDialogComponent, {\n                        size: 'xl',\n                        locals: {\n                            facets,\n                            mode,\n                            ids,\n                        },\n                    }),\n                ),\n            )\n            .subscribe(result => {\n                if (result) {\n                    notificationService.success(_('common.notify-bulk-update-success'), {\n                        count: selection.length,\n                        entity: mode === 'product' ? 'Products' : 'ProductVariants',\n                    });\n                    clearSelection();\n                }\n            });\n    },\n};\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\n    <input\n        id=\"name\"\n        type=\"text\"\n        #nameInput=\"ngModel\"\n        [(ngModel)]=\"name\"\n        required\n        (input)=\"updateCode($event.target.value)\"\n    />\n</vdr-form-field>\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\n</vdr-form-field>\n<clr-checkbox-wrapper>\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\n</clr-checkbox-wrapper>\n<section *ngIf=\"customFields.length\">\n    <label>{{ 'common.custom-fields' | translate }}</label>\n    <vdr-tabbed-custom-fields\n        entityName=\"ProductOption\"\n        [customFields]=\"customFields\"\n        [customFieldsFormGroup]=\"customFieldsForm\"\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n    ></vdr-tabbed-custom-fields>\n</section>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"update()\"\n        [disabled]=\"\n            nameInput.invalid ||\n            codeInput.invalid ||\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\n        \"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.update-product-option' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    LanguageCode,\n    ProductVariant,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\n\n@Component({\n    selector: 'vdr-update-product-option-dialog',\n    templateUrl: './update-product-option-dialog.component.html',\n    styleUrls: ['./update-product-option-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpdateProductOptionDialogComponent\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\n    updateVariantName = true;\n    // Provided by caller\n    productOption: ProductVariant.Options;\n    activeLanguage: LanguageCode;\n    name: string;\n    code: string;\n    customFields: CustomFieldConfig[];\n    codeInputTouched = false;\n    customFieldsForm: FormGroup;\n\n    ngOnInit(): void {\n        const currentTranslation = this.productOption.translations.find(\n            t => t.languageCode === this.activeLanguage,\n        );\n        this.name = currentTranslation?.name ?? '';\n        this.code = this.productOption.code;\n        this.customFieldsForm = new FormGroup({});\n        if (this.customFields) {\n            const cfCurrentTranslation =\n                (currentTranslation && (currentTranslation as any).customFields) || {};\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? cfCurrentTranslation[key]\n                        : (this.productOption as any).customFields[key];\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\n            }\n        }\n    }\n\n    update() {\n        const result = createUpdatedTranslatable({\n            translatable: this.productOption,\n            languageCode: this.activeLanguage,\n            updatedFields: {\n                code: this.code,\n                name: this.name,\n                customFields: this.customFieldsForm.value,\n            },\n            customFieldConfig: this.customFields,\n            defaultTranslation: {\n                languageCode: this.activeLanguage,\n                name: '',\n            },\n        });\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    updateCode(nameValue: string) {\n        if (!this.codeInputTouched && !this.productOption.code) {\n            this.code = normalizeString(nameValue, '-');\n        }\n    }\n}\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\n</div>\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\n    {{\n        'catalog.price-with-tax-in-default-zone'\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\n    }}\n</div>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-variant-price-detail',\n    templateUrl: './variant-price-detail.component.html',\n    styleUrls: ['./variant-price-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\n    @Input() priceIncludesTax: boolean;\n    @Input() price: number;\n    @Input() currencyCode: string;\n    @Input() taxCategoryId: string;\n\n    grossPrice$: Observable<number>;\n    taxRate$: Observable<number>;\n\n    private priceChange$ = new BehaviorSubject<number>(0);\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const taxRates$ = this.dataService.settings\n            .getTaxRatesSimple(999, 0, 'cache-first')\n            .mapStream(data => data.taxRates.items);\n        const activeChannel$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel);\n\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\n            map(([channel, taxRates, taxCategoryId]) => {\n                const defaultTaxZone = channel.defaultTaxZone;\n                if (!defaultTaxZone) {\n                    return 0;\n                }\n                const applicableRate = taxRates.find(\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\n                );\n\n                if (!applicableRate) {\n                    return 0;\n                }\n                return applicableRate.value;\n            }),\n        );\n\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\n            map(([taxRate, price]) => {\n                return Math.round(price * ((100 + taxRate) / 100));\n            }),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('price' in changes) {\n            this.priceChange$.next(changes.price.currentValue);\n        }\n        if ('taxCategoryId' in changes) {\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\n        }\n    }\n}\n","<div class=\"variants-list\">\n    <div\n        class=\"variant-container card\"\n        *ngFor=\"\n            let variant of variants | paginate: paginationConfig || { itemsPerPage: 10, currentPage: 1 };\n            trackBy: trackById;\n            let i = index\n        \"\n        [class.disabled]=\"!formGroupMap.get(variant.id)?.get('enabled')?.value\"\n    >\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n            <div class=\"card-block header-row\">\n                <div class=\"details\">\n                    <vdr-title-input class=\"sku\" [readonly]=\"!(updatePermission | hasPermission)\">\n                        <clr-input-container>\n                            <input\n                                clrInput\n                                type=\"text\"\n                                formControlName=\"sku\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                [placeholder]=\"'catalog.sku' | translate\"\n                            />\n                        </clr-input-container>\n                    </vdr-title-input>\n                    <vdr-title-input class=\"name\" [readonly]=\"!(updatePermission | hasPermission)\">\n                        <clr-input-container>\n                            <input\n                                clrInput\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                [placeholder]=\"'common.name' | translate\"\n                            />\n                        </clr-input-container>\n                    </vdr-title-input>\n                </div>\n                <div class=\"right-controls\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermission\">\n                        <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </div>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"variant-body\">\n                    <div class=\"assets\">\n                        <vdr-assets\n                            [compact]=\"true\"\n                            [assets]=\"pendingAssetChanges[variant.id]?.assets || variant.assets\"\n                            [featuredAsset]=\"\n                                pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset\n                            \"\n                            [updatePermissions]=\"updatePermission\"\n                            (change)=\"onAssetChange(variant.id, $event)\"\n                        ></vdr-assets>\n                    </div>\n                    <div class=\"variant-form-inputs\">\n                        <div class=\"standard-fields\">\n                            <div class=\"variant-form-input-row\">\n                                <div class=\"tax-category\">\n                                    <clr-select-container\n                                        *vdrIfPermissions=\"updatePermission; else taxCategoryLabel\"\n                                    >\n                                        <label>{{ 'catalog.tax-category' | translate }}</label>\n                                        <select clrSelect name=\"options\" formControlName=\"taxCategoryId\">\n                                            <option\n                                                *ngFor=\"let taxCategory of taxCategories\"\n                                                [value]=\"taxCategory.id\"\n                                            >\n                                                {{ taxCategory.name }}\n                                            </option>\n                                        </select>\n                                    </clr-select-container>\n                                    <ng-template #taxCategoryLabel>\n                                        <label class=\"clr-control-label\">{{\n                                            'catalog.tax-category' | translate\n                                        }}</label>\n                                        <div class=\"tax-category-label\">\n                                            {{ getTaxCategoryName(formGroup) }}\n                                        </div>\n                                    </ng-template>\n                                </div>\n                                <div class=\"price\">\n                                    <clr-input-container>\n                                        <label>{{ 'catalog.price' | translate }}</label>\n                                        <vdr-currency-input\n                                            *ngIf=\"!channelPriceIncludesTax\"\n                                            clrInput\n                                            [currencyCode]=\"variant.currencyCode\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            formControlName=\"price\"\n                                        ></vdr-currency-input>\n                                        <vdr-currency-input\n                                            *ngIf=\"channelPriceIncludesTax\"\n                                            clrInput\n                                            [currencyCode]=\"variant.currencyCode\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            formControlName=\"priceWithTax\"\n                                        ></vdr-currency-input>\n                                    </clr-input-container>\n                                </div>\n                                <vdr-variant-price-detail\n                                    [price]=\"formGroup.get('price')!.value\"\n                                    [currencyCode]=\"variant.currencyCode\"\n                                    [priceIncludesTax]=\"channelPriceIncludesTax\"\n                                    [taxCategoryId]=\"formGroup.get('taxCategoryId')!.value\"\n                                ></vdr-variant-price-detail>\n                            </div>\n                            <div class=\"variant-form-input-row\">\n                                <clr-select-container *vdrIfPermissions=\"updatePermission\">\n                                    <label\n                                        >{{ 'catalog.track-inventory' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.track-inventory-tooltip' | translate\"\n                                        ></vdr-help-tooltip>\n                                    </label>\n                                    <select clrSelect name=\"options\" formControlName=\"trackInventory\">\n                                        <option [value]=\"GlobalFlag.TRUE\">\n                                            {{ 'catalog.track-inventory-true' | translate }}\n                                        </option>\n                                        <option [value]=\"GlobalFlag.FALSE\">\n                                            {{ 'catalog.track-inventory-false' | translate }}\n                                        </option>\n                                        <option [value]=\"GlobalFlag.INHERIT\">\n                                            {{ 'catalog.track-inventory-inherit' | translate }}\n                                        </option>\n                                    </select>\n                                </clr-select-container>\n                                <clr-input-container>\n                                    <label\n                                        >{{ 'catalog.stock-on-hand' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-on-hand-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <input\n                                        [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\n                                        clrInput\n                                        type=\"number\"\n                                        [min]=\"getStockOnHandMinValue(formGroup)\"\n                                        step=\"1\"\n                                        formControlName=\"stockOnHand\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                        [vdrDisabled]=\"inventoryIsNotTracked(formGroup)\"\n                                    />\n                                </clr-input-container>\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.stock-allocated' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-allocated-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"value\">\n                                        {{ variant.stockAllocated }}\n                                    </div>\n                                </div>\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.stock-saleable' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-saleable-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"value\">\n                                        {{ getSaleableStockLevel(variant) }}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"variant-form-input-row\">\n                                <div\n                                    class=\"out-of-stock-threshold-wrapper\"\n                                    [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\n                                >\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.out-of-stock-threshold' | translate\n                                        }}<vdr-help-tooltip\n                                            [content]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"flex\">\n                                        <clr-input-container>\n                                            <input\n                                                clrInput\n                                                type=\"number\"\n                                                [formControl]=\"formGroup.get('outOfStockThreshold')\"\n                                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                                [vdrDisabled]=\"\n                                                    formGroup.get('useGlobalOutOfStockThreshold')?.value !==\n                                                        false || inventoryIsNotTracked(formGroup)\n                                                \"\n                                            />\n                                        </clr-input-container>\n                                        <clr-toggle-wrapper>\n                                            <input\n                                                type=\"checkbox\"\n                                                clrToggle\n                                                name=\"useGlobalOutOfStockThreshold\"\n                                                formControlName=\"useGlobalOutOfStockThreshold\"\n                                                [vdrDisabled]=\"\n                                                    !(updatePermission | hasPermission) ||\n                                                    inventoryIsNotTracked(formGroup)\n                                                \"\n                                            />\n                                            <label\n                                                >{{ 'catalog.use-global-value' | translate }} ({{\n                                                    globalOutOfStockThreshold\n                                                }})</label\n                                            >\n                                        </clr-toggle-wrapper>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"custom-fields\">\n                            <div class=\"variant-form-input-row\">\n                                <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                                    <vdr-tabbed-custom-fields\n                                        entityName=\"ProductVariant\"\n                                        [customFields]=\"customFields\"\n                                        [compact]=\"true\"\n                                        [customFieldsFormGroup]=\"formGroup.get('customFields')\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                    ></vdr-tabbed-custom-fields>\n                                </section>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"options-facets\">\n                    <vdr-entity-info [entity]=\"variant\"></vdr-entity-info>\n                    <div *ngIf=\"variant.options.length\">\n                        <div class=\"options\">\n                            <vdr-chip\n                                *ngFor=\"let option of variant.options | sort: 'groupId'\"\n                                [colorFrom]=\"optionGroupName(option.groupId)\"\n                                [invert]=\"true\"\n                                (iconClick)=\"editOption(option)\"\n                                [icon]=\"(updatePermission | hasPermission) && 'pencil'\"\n                            >\n                                <span class=\"option-group-name\">{{ optionGroupName(option.groupId) }}</span>\n                                {{ optionName(option) }}\n                            </vdr-chip>\n                            <a [routerLink]=\"['./', 'options']\" class=\"btn btn-link btn-sm\"\n                                >{{ 'catalog.edit-options' | translate }}...</a\n                            >\n                        </div>\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <div class=\"facets\">\n                        <vdr-facet-value-chip\n                            *ngFor=\"let facetValue of existingFacetValues(variant)\"\n                            [facetValue]=\"facetValue\"\n                            [removable]=\"updatePermission | hasPermission\"\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\n                        ></vdr-facet-value-chip>\n                        <vdr-facet-value-chip\n                            *ngFor=\"let facetValue of pendingFacetValues(variant)\"\n                            [facetValue]=\"facetValue\"\n                            [removable]=\"updatePermission | hasPermission\"\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\n                        ></vdr-facet-value-chip>\n                        <button\n                            *vdrIfPermissions=\"updatePermission\"\n                            class=\"btn btn-sm btn-secondary\"\n                            (click)=\"selectFacetValueClick.emit([variant.id])\"\n                        >\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'catalog.add-facets' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <ng-container *vdrIfMultichannel>\n                <div class=\"card-block\" *vdrIfDefaultChannelActive>\n                    <div class=\"flex channel-assignment\">\n                        <ng-container *ngFor=\"let channel of variant.channels\">\n                            <vdr-chip\n                                *ngIf=\"!isDefaultChannel(channel.code)\"\n                                icon=\"times-circle\"\n                                [title]=\"'catalog.remove-from-channel' | translate: { channelCode: channel.code }\"\n                                (iconClick)=\"\n                                    removeFromChannel.emit({ channelId: channel.id, variant: variant })\n                                \"\n                            >\n                                <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                                {{ channel.code | channelCodeToLabel }}\n                            </vdr-chip>\n                        </ng-container>\n                        <button class=\"btn btn-sm\" (click)=\"assignToChannel.emit(variant)\">\n                            <clr-icon shape=\"layers\"></clr-icon>\n                            {{ 'catalog.assign-to-channel' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    DataService,\n    FacetValue,\n    FacetWithValues,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    Permission,\n    ProductDetail,\n    ProductOptionFragment,\n    ProductVariant,\n    TaxCategory,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AssetChange } from '../assets/assets.component';\nimport {\n    PaginationConfig,\n    SelectedAssets,\n    VariantFormValue,\n} from '../product-detail/product-detail.component';\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\n\nexport interface VariantAssetChange extends AssetChange {\n    variantId: string;\n}\n\n@Component({\n    selector: 'vdr-product-variants-list',\n    templateUrl: './product-variants-list.component.html',\n    styleUrls: ['./product-variants-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductVariant.Fragment[];\n    @Input() paginationConfig: PaginationConfig;\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() taxCategories: TaxCategory[];\n    @Input() facets: FacetWithValues.Fragment[];\n    @Input() optionGroups: ProductDetail.OptionGroups[];\n    @Input() customFields: CustomFieldConfig[];\n    @Input() customOptionFields: CustomFieldConfig[];\n    @Input() activeLanguage: LanguageCode;\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    @Output() assignToChannel = new EventEmitter<ProductVariant.Fragment>();\n    @Output() removeFromChannel = new EventEmitter<{\n        channelId: string;\n        variant: ProductVariant.Fragment;\n    }>();\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\n    selectedVariantIds: string[] = [];\n    formGroupMap = new Map<string, FormGroup>();\n    GlobalFlag = GlobalFlag;\n    globalTrackInventory: boolean;\n    globalOutOfStockThreshold: number;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private facetValues: FacetValue.Fragment[];\n    private subscription: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private modalService: ModalService,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\n            this.globalTrackInventory = globalSettings.trackInventory;\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\n            this.changeDetector.markForCheck();\n        });\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n\n        this.subscription.add(\n            this.formArray.valueChanges\n                .pipe(\n                    map(value => value.length),\n                    debounceTime(1),\n                    distinctUntilChanged(),\n                )\n                .subscribe(() => {\n                    this.buildFormGroupMap();\n                }),\n        );\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('facets' in changes && !!changes['facets'].currentValue) {\n            this.facetValues = flattenFacetValues(this.facets);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    trackById(index: number, item: ProductVariant.Fragment) {\n        return item.id;\n    }\n\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\n        const trackInventory = formGroup.get('trackInventory')?.value;\n        return (\n            trackInventory === GlobalFlag.FALSE ||\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\n        );\n    }\n\n    getTaxCategoryName(group: FormGroup): string {\n        const control = group.get(['taxCategoryId']);\n        if (control && this.taxCategories) {\n            const match = this.taxCategories.find(t => t.id === control.value);\n            return match ? match.name : '';\n        }\n        return '';\n    }\n\n    getStockOnHandMinValue(variant: FormGroup) {\n        const effectiveOutOfStockThreshold = variant.get('useGlobalOutOfStockThreshold')?.value\n            ? this.globalOutOfStockThreshold\n            : variant.get('outOfStockThreshold')?.value;\n        return effectiveOutOfStockThreshold;\n    }\n\n    getSaleableStockLevel(variant: ProductVariant.Fragment) {\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\n            ? this.globalOutOfStockThreshold\n            : variant.outOfStockThreshold;\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\n    }\n\n    areAllSelected(): boolean {\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\n    }\n\n    onAssetChange(variantId: string, event: AssetChange) {\n        this.assetChange.emit({\n            variantId,\n            ...event,\n        });\n        const index = this.variants.findIndex(v => v.id === variantId);\n        this.formArray.at(index).markAsDirty();\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectedVariantIds = [];\n        } else {\n            this.selectedVariantIds = this.variants.map(v => v.id);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    toggleSelectVariant(variantId: string) {\n        const index = this.selectedVariantIds.indexOf(variantId);\n        if (-1 < index) {\n            this.selectedVariantIds.splice(index, 1);\n        } else {\n            this.selectedVariantIds.push(variantId);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        if (group) {\n            const translation =\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\n                group.translations[0];\n            return translation.name;\n        }\n    }\n\n    optionName(option: ProductOptionFragment) {\n        const translation =\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\n        return translation.name;\n    }\n\n    pendingFacetValues(variant: ProductVariant.Fragment) {\n        if (this.facets) {\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\n            return formFacetValueIds\n                .filter(x => !variantFacetValueIds.includes(x))\n                .map(id => this.facetValues.find(fv => fv.id === id))\n                .filter(notNullOrUndefined);\n        } else {\n            return [];\n        }\n    }\n\n    existingFacetValues(variant: ProductVariant.Fragment) {\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\n        const intersection = [...formFacetValueIds].filter(x =>\n            variant.facetValues.map(fv => fv.id).includes(x),\n        );\n        return intersection\n            .map(id => variant.facetValues.find(fv => fv.id === id))\n            .filter(notNullOrUndefined);\n    }\n\n    removeFacetValue(variant: ProductVariant.Fragment, facetValueId: string) {\n        const formGroup = this.formGroupMap.get(variant.id);\n        if (formGroup) {\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\n                id => id !== facetValueId,\n            );\n            formGroup.patchValue({\n                facetValueIds: newValue,\n            });\n            formGroup.markAsDirty();\n        }\n    }\n\n    isVariantSelected(variantId: string): boolean {\n        return -1 < this.selectedVariantIds.indexOf(variantId);\n    }\n\n    editOption(option: ProductVariant.Options) {\n        this.modalService\n            .fromComponent(UpdateProductOptionDialogComponent, {\n                size: 'md',\n                locals: {\n                    productOption: option,\n                    activeLanguage: this.activeLanguage,\n                    customFields: this.customOptionFields,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    this.updateProductOption.emit(result);\n                }\n            });\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    private getFacetValueIds(id: string): string[] {\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\n        return formValue.facetValueIds;\n    }\n}\n","<table class=\"table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'common.name' | translate }}</th>\n            <th>{{ 'catalog.sku' | translate }}</th>\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\n                <th>{{ optionGroup.name }}</th>\n            </ng-container>\n            <th>{{ 'catalog.price' | translate }}</th>\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            <th>{{ 'common.enabled' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <div class=\"card-img\">\n                        <div class=\"featured-asset\">\n                            <img\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\n                            />\n                            <ng-template #placeholder>\n                                <div class=\"placeholder\">\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                                </div>\n                            </ng-template>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'common.name' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"sku\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'catalog.sku' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\n                    <td\n                        class=\"left align-middle\"\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\n                    >\n                        {{ option.name }}\n                    </td>\n                </ng-container>\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <vdr-currency-input\n                            *ngIf=\"!channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"price\"\n                        ></vdr-currency-input>\n                        <vdr-currency-input\n                            *ngIf=\"channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"priceWithTax\"\n                        ></vdr-currency-input>\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"1\"\n                            formControlName=\"stockOnHand\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </td>\n            </ng-container>\n        </tr>\n    </tbody>\n</table>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Permission, ProductDetail, ProductVariant } from '@vendure/admin-ui/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { PaginationConfig, SelectedAssets } from '../product-detail/product-detail.component';\n\n@Component({\n    selector: 'vdr-product-variants-table',\n    templateUrl: './product-variants-table.component.html',\n    styleUrls: ['./product-variants-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductVariant.Fragment[];\n    @Input() paginationConfig: PaginationConfig;\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() optionGroups: ProductDetail.OptionGroups[];\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    formGroupMap = new Map<string, FormGroup>();\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private subscription: Subscription;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.subscription = this.formArray.valueChanges\n            .pipe(\n                map(value => value.length),\n                debounceTime(1),\n                distinctUntilChanged(),\n            )\n            .subscribe(() => {\n                this.buildFormGroupMap();\n            });\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    trackByFn(index: number, item: any) {\n        if ((item as any).id != null) {\n            return (item as any).id;\n        } else {\n            return index;\n        }\n    }\n\n    getFeaturedAsset(variant: ProductVariant.Fragment) {\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        return group && group.name;\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BulkActionRegistryService, SharedModule } from '@vendure/admin-ui/core';\n\nimport { catalogRoutes } from './catalog.routes';\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { AssetsComponent } from './components/assets/assets.component';\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { AssignToChannelDialogComponent } from './components/assign-to-channel-dialog/assign-to-channel-dialog.component';\nimport { BulkAddFacetValuesDialogComponent } from './components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport {\n    assignCollectionsToChannelBulkAction,\n    deleteCollectionsBulkAction,\n    removeCollectionsFromChannelBulkAction,\n} from './components/collection-list/collection-list-bulk-actions';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport {\n    assignFacetsToChannelBulkAction,\n    deleteFacetsBulkAction,\n    removeFacetsFromChannelBulkAction,\n} from './components/facet-list/facet-list-bulk-actions';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport {\n    assignFacetValuesToProductsBulkAction,\n    assignProductsToChannelBulkAction,\n    deleteProductsBulkAction,\n    removeProductsFromChannelBulkAction,\n} from './components/product-list/product-list-bulk-actions';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\n\nconst CATALOG_COMPONENTS = [\n    ProductListComponent,\n    ProductDetailComponent,\n    FacetListComponent,\n    FacetDetailComponent,\n    GenerateProductVariantsComponent,\n    ProductVariantsListComponent,\n    ApplyFacetDialogComponent,\n    AssetListComponent,\n    AssetsComponent,\n    VariantPriceDetailComponent,\n    CollectionListComponent,\n    CollectionDetailComponent,\n    CollectionTreeComponent,\n    CollectionTreeNodeComponent,\n    CollectionContentsComponent,\n    ProductVariantsTableComponent,\n    OptionValueInputComponent,\n    UpdateProductOptionDialogComponent,\n    ProductVariantsEditorComponent,\n    AssignProductsToChannelDialogComponent,\n    AssetDetailComponent,\n    ConfirmVariantDeletionDialogComponent,\n    ProductOptionsEditorComponent,\n    BulkAddFacetValuesDialogComponent,\n    AssignToChannelDialogComponent,\n];\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\n    exports: [...CATALOG_COMPONENTS],\n    declarations: [...CATALOG_COMPONENTS],\n})\nexport class CatalogModule {\n    constructor(private bulkActionRegistryService: BulkActionRegistryService) {\n        bulkActionRegistryService.registerBulkAction(assignFacetValuesToProductsBulkAction);\n        bulkActionRegistryService.registerBulkAction(assignProductsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(removeProductsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deleteProductsBulkAction);\n\n        bulkActionRegistryService.registerBulkAction(assignFacetsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(removeFacetsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deleteFacetsBulkAction);\n\n        bulkActionRegistryService.registerBulkAction(assignCollectionsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(removeCollectionsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deleteCollectionsBulkAction);\n    }\n}\n"]}
{"version":3,"mappings":"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b+BA,yDASpBA,yCACEA,qGAMTA,mCAIIA,6IACHA,+CAHGA,sBAAyB,qFAI7BA,mCAIIA,6IACHA,+CAHGA,sBAAyB,qFAI7BA,qBAGIA,oEAASA,EAATwa,MAASwU,qCAEThvB,uBACAA,8BACJA,cADIA,8IASAA,uBAIIA,oGACyCgd,0EAGzChd,gCACAA,uCACJA,0CAPIA,2EAKmBA,qCACnBA,qEAVRA,SACIA,+BAWJA,6CAVSA,6FAJjBA,kBACIA,kBACIA,kCAaAA,qBAA2BA,oEAASA,EAATwa,MAASsC,0BAChC9c,uBACAA,8BACJA,QACJA,QACJA,2CAlB0CA,qCAe9BA,uFAlBhBA,SACIA,yBAqBJA,kDAhSJA,WACIA,iBACIA,iBACIA,sDACIA,+BACIA,iEAOJA,QACJA,QACAA,uDACIA,gCACIA,qEAOJA,QACJA,QACJA,QACAA,mBACIA,yCAIJA,QACJA,QACAA,mBACIA,mBACIA,mBACIA,0BAOIA,qGACHA,QACLA,QACAA,mBACIA,mBACIA,mBACIA,mBACIA,2CAaAA,6CAQJA,QACAA,mBACIA,gCACIA,kBAAOA,gCAAiCA,QACxCA,yCAOAA,yCAOJA,QACJA,QACAA,wCAMJA,QACAA,mBACIA,6CAmBAA,gCACIA,kBACKA,gCACDA,sDAGHA,QACDA,+CAUJA,QACAA,gBACIA,qBACKA,gCACDA,sDAGHA,QACDA,mBACIA,UACJA,QACJA,QACAA,gBACIA,qBACKA,gCACDA,sDAGHA,QACDA,mBACIA,UACJA,QACJA,QACJA,QAEAA,mBACIA,mBAIIA,qBACKA,gCACCA,sDAGLA,QACDA,mBACIA,gCACIA,+CAUJA,QACAA,+BACIA,+CAUAA,kBACKA,gCAEEA,QAEXA,QACJA,QACJA,QACJA,QACJA,QACAA,mBACIA,mBACIA,8BASJA,QACJA,QACJA,QACJA,QACJA,QACAA,mBACIA,mBACIA,+BACAA,0BAiBAA,mBACAA,mBACIA,2CAMAA,2CAMAA,6BAQJA,QACJA,QACJA,QACAA,mCAuBJA,+EAjSgEA,qBAGvBA,2DAMjBA,2DAAgD,yCAK9BA,4DAMlBA,4DAAgD,0CAOv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","names":["t","c","constructor","n","e","o","a","r","s","super","this","u","customFields","getCustomFieldConfig","ngOnInit","detailForm","name","tags","formBuilder","group","reduce","Object","init","ngOnDestroy","destroy","onAssetChange","get","setValue","markAsDirty","save","dataService","product","updateAsset","id","value","subscribe","notificationService","success","entity","error","setFormValues","length","setCustomFieldFormValues","at","selectors","N","setQueryFn","getAssetList","assets","l","g","searchTerm$","m","d","filterByTags$","map","h","options","skip","take","filter","contains","sort","createdAt","tagsOperator","paginationConfig$","itemsPerPage$","currentPage$","totalItems$","pipe","C","itemsPerPage","currentPage","totalItems","destroy$","refresh","allTags$","getTagList","mapStream","items","filesSelected","uploading","createAssets","ge","__typename","message","count","deleteAssets","showModalAndDelete","result","modalService","dialog","title","p","translationVars","body","buttons","type","label","returnValue","A","M","rt","slice","selectAssets","fromComponent","size","V","concat","featuredAsset","emitChangeEvent","changeDetector","markForCheck","setAsFeatured","isFeatured","previewAsset","closable","locals","asset","removeAsset","change","emit","dropListDropped","previousContainer","data","container","Y","Xt","contentsCurrentPage$","route","queryParamMap","contentsItemsPerPage$","pt","filterTermControl","valueChanges","Q","setContentsPageNumber","filterChanges$","asObservable","previewUpdatedFilters","Vt","collectionIdChange$","parentIdChange$","refresh$","G","isLoading","v","Z","collection","previewCollectionVariants","parentId","filters","mapSingle","b","getCollectionContents","productVariants","k","contents$","contentsTotalItems$","ngOnChanges","next","collectionId","currentValue","updatedFilters","complete","setParam","setContentsItemsPerPage","router","navigate","relativeTo","queryParams","queryParamsHandling","replaceUrl","et","slug","description","visible","array","livePreview","localStorageService","getCollectionFilters","single$","allFilters","collectionFilters","updatedFilters$","statusChanges","filterRemoved$","touched","mapOperationsToInputs","arguments","parentId$","paramMap","entity$","parent","getFilterDefinition","find","code","assetsChanged","values","assetChanges","updateSlug","languageCode$","w","pristine","addFilter","args","push","control","removeFilter","removeAt","markAsTouched","splice","create","dirty","I","getUpdatedCollection","snapshot","createCollection","markAsPristine","updateCollection","contentsComponent","canDeactivate","toggleLivePreview","set","trackByFn","JSON","stringify","patchValue","isPrivate","clear","forEach","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","assetIds","featuredAssetId","entries","gt","i","Map","children","hasOwnProperty","expanded","includes","collections","collectionTree","he","expandedIds","allMoveListItems","onDrop","item","Error","rearrange","index","currentIndex","onMove","onDelete","deleteCollection","getMoveListItems","calculateAllMoveListItems","ancestorIdPath","has","path","join","Set","isRootNode","j","selectionManager","additiveMode","multiSelect","itemsAreEqual","queryResult","getCollections","refetchOnChannelChange","items$","setCurrentItems","activeCollectionId$","split","expandAll","activeCollectionTitle$","availableLanguages$","serverConfigService","getAvailableLanguages","contentLanguage$","client","uiState","contentLanguage","q","completed$","toggleExpandAll","onRearrange","moveCollection","findIndex","closeContents","params","contents","setLanguage","setContentLanguage","ref","refetch","mt","customValueFields","facet","updateCode","updateValueCode","customValueFieldIsSet","getValuesFormArray","addFacetValue","addControl","insert","getUpdatedFacet","createFacet","getAllFacets","updateFacet","getCreatedFacetValues","createFacetValues","getFacet","getUpdatedFacetValues","updateFacetValues","$","deleteFacetValue","deleteFacetValues","P","W","St","qt","Gt","controls","translations","facetId","toString","J","_t","getFacets","facets","xo","Bt","S","toggleDisplayLimit","displayLimit","initialLimit","deleteFacet","ht","call","re","_next","notifyNext","notifyComplete","ngAfterViewInit","setTimeout","selector","focus","selectValues","resolveWith","selectedValues","cancel","ft","productVariantIds","userStatus","activeChannelId","settings","getChannels","channels","currentChannel","availableChannels","selectedChannelIdControl","selectChannel","variantsPreview$","Yt","getTopVariants","priceFactorControl","price","pricePreview","selectedChannel","assign","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","getProduct","variantList","toPromise","B","lastIndexOf","substr","replace","getTaxCategories","taxCategories","wt","createProductWithVariants","createProduct","groups","createProductOptionGroups","F","addOptionGroupToProduct","productId","optionGroupId","optionGroups","variants","optionValues","optionIds","createProductVariants","createProductOptionGroup","sku","stockOnHand","stock","updateProduct","autoUpdate","productInput","variantsInput","getProductVariants","ue","jt","le","updateProductVariants","updateProductOption","deleteProductVariant","H","factory","oxw","filterInput","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","Jo","filterOperator","bufferSize","refCount","variants$","te","productVariantMap","taxCategories$","productDetailService","activeTab$","buildVariantFormArray","facets$","facetValues","getProductFormGroup","facetValues$","productChannels$","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","navigateToTab","location","replaceState","createUrlTree","tab","isDefaultChannel","ve","setPage","setItemsPerPage","assignToChannel","currentChannelIds","removeFromChannel","channelCode","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","variant","removeVariantsFromChannel","variantAssetsChanged","keys","variantAssetChanges","variantAssetChange","variantId","selectProductFacetValue","displayFacetValueModal","removeProductFacetValue","selectVariantFacetValue","Ce","variantFacetValueChanges","variantsToCreateAreValid","createVariantsConfig","every","getUpdatedProduct","console","getUpdatedProductVariants","updateSlugAfterSave","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","emitEvent","nt","searchTerm","productSearchInput","setSearchTerm","selectedFacetValueIds$","getAll","setFacetValues","searchProducts","search","input","term","facetValueOperator","groupByProduct","productVariantId","result$","getPendingSearchIndexUpdates","pendingSearchIndexUpdates","setQueryParam","page","setFacetValueIds","fvids","rebuildSearchIndex","reindex","info","jobQueueService","addJob","state","Intl","NumberFormat","format","duration","indexedItemCount","time","runPendingSearchIndexUpdates","deleteProduct","vt","optionGroupCustomFields","optionCustomFields","optionGroups$","getOptionGroups","getOptions","invalid","getUpdatedOptionGroup","updateProductOptionGroup","getUpdatedOption","updatedAt","setControl","Ct","confirm","xt","Pe","provide","useExisting","z","multi","formValue","registerOnChange","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","disabled","writeValue","textArea","nativeElement","editName","locked","cancelBubble","editingIndex","nameInputs","updateOption","target","edit","option","removeOption","remove","handleKey","key","addOptionValue","preventDefault","lastSelected","removeLastOption","handleBlur","isFocussed","parseInputIntoOptions","add","trim","decls","initOptionsAndVariants","currencyCode","onFormChanged","formValueChanged","getVariantsToAdd","generatedVariants","existing","getVariantName","addOptionGroup","isNew","optionsChanged","removeOptionGroup","generateVariants","removeOptionGroupFromProduct","addOption","deleteProductOption","getVariantPrototype","Fe","isDefault","optionsAreEqual","optionsAreSubset","Gi","deleteVariant","reFetchProduct","checkUniqueSkus","confirmDeletionOfObsoleteVariants","addOptionGroupsToProduct","addNewOptionsToGroups","fetchOptionGroups","createNewProductVariants","deleteObsoleteVariants","getObsoleteVariants","hasOnlyDefaultVariant","productOptionGroupId","addOptionToGroup","getProductOptionGroup","productOptionGroup","ji","getProductVariantsOptions","flat","groupId","toOptionString","Zt","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","bt","breadcrumbs","getCollection","At","Tt","yt","ot","Oe","component","breadcrumb","resolve","Ie","Me","ke","qe","Le","Ve","breadcrumbKey","getName","link","it","we","Kt","Je","De","Ue","mode","query","ids","products","subscription","changeDetectorRef","unsubscribe","removeFacetValue","facetValuesRemoved","addFacetValues","mutate","Pt","Ne","icon","iconClass","requiresPermission","onClick","injector","selection","hostComponent","clearSelection","deleteCollections","Se","isVisible","assignCollectionsToChannel","collectionIds","Et","$e","getTranslationVars","removeCollectionsFromChannel","depth","parentName","permissions","hasUpdatePermission$","hasDeletePermission$","selectionChanges$","previousValue","toggleExpanded","moveListItems","root","move","moveUp","moveDown","drop","previousIndex","delete","K","pipes","Qe","deleteFacets","Ee","assignFacetsToChannel","facetIds","Ye","removeFacetsFromChannel","force","then","removedCount","de","groupNameInputs","variantFormValues","copyFromDefault","onFormChange","handleEnter","stopPropagation","variantsChange","Ft","Ge","deleteProducts","je","Be","He","productOption","activeLanguage","customFieldsForm","update","updateVariantName","codeInputTouched","Ot","getTaxRatesSimple","taxRates","taxRate$","taxCategoryIdChange$","defaultTaxZone","zone","category","grossPrice$","priceChange$","Math","round","It","selectFacetValueClick","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","formArray","buildFormGroupMap","trackById","inventoryIsNotTracked","getTaxCategoryName","getStockOnHandMinValue","getSaleableStockLevel","stockAllocated","areAllSelected","selectedVariantIds","assetChange","toggleSelectAll","selectionChange","toggleSelectVariant","indexOf","optionGroupName","optionName","pendingFacetValues","getFacetValueIds","existingFacetValues","formGroupMap","isVariantSelected","editOption","Mt","getFeaturedAsset","pendingAssetChanges","kt","registerBulkAction","Nt","T","Rt","E"],"sources":["webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.html","webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.ts","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.html","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","webpack:///src/lib/catalog/src/components/collection-tree/array-to-tree.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.html","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.ts","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.html","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.html","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipUntil.js","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/providers/product-detail/replace-last.ts","webpack:///src/lib/catalog/src/providers/product-detail/product-detail.service.ts","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.html","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list.component.html","webpack:///src/lib/catalog/src/components/product-list/product-list.component.ts","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.html","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.ts","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.html","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.html","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","webpack:///src/lib/catalog/src/providers/routing/asset-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/collection-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/facet-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-variants-resolver.ts","webpack:///src/lib/catalog/src/catalog.routes.ts","webpack:///src/lib/catalog/src/components/assign-to-channel-dialog/assign-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-to-channel-dialog/assign-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.graphql.ts","webpack:///src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component.html","webpack:///src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list-bulk-actions.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list-bulk-actions.ts","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list-bulk-actions.ts","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.html","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","webpack:///src/lib/catalog/src/catalog.module.ts"],"sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"asset-detail\"></vdr-action-bar-items>\n        <button\n            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<vdr-asset-preview\n    [asset]=\"entity$ | async\"\n    [editable]=\"true\"\n    [customFields]=\"customFields\"\n    [customFieldsForm]=\"detailForm.get('customFields')\"\n    (assetChange)=\"onAssetChange($event)\"\n></vdr-asset-preview>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    GetAsset,\n    LanguageCode,\n} from '@vendure/admin-ui/core';\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-asset-detail',\n    templateUrl: './asset-detail.component.html',\n    styleUrls: ['./asset-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\n    detailForm = new FormGroup({});\n    customFields: CustomFieldConfig[];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Asset');\n    }\n\n    ngOnInit() {\n        this.detailForm = new FormGroup({\n            name: new FormControl(''),\n            tags: new FormControl([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\n        this.detailForm.get('name')?.setValue(event.name);\n        this.detailForm.get('tags')?.setValue(event.tags);\n        this.detailForm.markAsDirty();\n    }\n\n    save() {\n        this.dataService.product\n            .updateAsset({\n                id: this.id,\n                name: this.detailForm.value.name,\n                tags: this.detailForm.value.tags,\n                customFields: this.detailForm.value.customFields,\n            })\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Asset',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\n        this.detailForm.get('name')?.setValue(entity.name);\n        this.detailForm.get('tags')?.setValue(entity.tags);\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetAssetList,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    SortOrder,\n    TagFragment,\n} from '@vendure/admin-ui/core';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-asset-list',\n    templateUrl: './asset-list.component.html',\n    styleUrls: ['./asset-list.component.scss'],\n})\nexport class AssetListComponent\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\n    implements OnInit {\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\n    uploading = false;\n    allTags$: Observable<TagFragment[]>;\n    paginationConfig$: Observable<PaginationInstance>;\n\n    constructor(\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\n            data => data.assets,\n            (skip, take) => {\n                const searchTerm = this.searchTerm$.value;\n                const tags = this.filterByTags$.value?.map(t => t.value);\n                return {\n                    options: {\n                        skip,\n                        take,\n                        ...(searchTerm\n                            ? {\n                                  filter: {\n                                      name: { contains: searchTerm },\n                                  },\n                              }\n                            : {}),\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                        tags,\n                        tagsOperator: LogicalOperator.AND,\n                    },\n                };\n            },\n            { take: 25, skip: 0 },\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\n        );\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\n\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\n    }\n\n    filesSelected(files: File[]) {\n        if (files.length) {\n            this.uploading = true;\n            this.dataService.product\n                .createAssets(files)\n                .pipe(finalize(() => (this.uploading = false)))\n                .subscribe(({ createAssets }) => {\n                    let successCount = 0;\n                    for (const result of createAssets) {\n                        switch (result.__typename) {\n                            case 'Asset':\n                                successCount++;\n                                break;\n                            case 'MimeTypeError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                    if (0 < successCount) {\n                        super.refresh();\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\n                            count: successCount,\n                        });\n                    }\n                });\n        }\n    }\n\n    deleteAssets(assets: Asset[]) {\n        this.showModalAndDelete(assets.map(a => a.id))\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(\n                            assets.map(a => a.id),\n                            response.message || '',\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\n                    }\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Assets',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Assets',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(assetIds: string[], message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-assets'),\n                translationVars: {\n                    count: assetIds.length,\n                },\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\n                map(res => res.deleteAssets),\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left [grow]=\"true\">\n        <vdr-asset-search-input\n            class=\"pr4 mt1\"\n            [tags]=\"allTags$ | async\"\n            (searchTermChange)=\"searchTerm$.next($event)\"\n            (tagsChange)=\"filterByTags$.next($event)\"\n        ></vdr-asset-search-input>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"asset-list\"></vdr-action-bar-items>\n        <vdr-asset-file-input\n            (selectFiles)=\"filesSelected($event)\"\n            [uploading]=\"uploading\"\n            dropZoneTarget=\".content-area\"\n        ></vdr-asset-file-input>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-asset-gallery\n    [assets]=\"(items$ | async)! | paginate: (paginationConfig$ | async) || {}\"\n    [multiSelect]=\"true\"\n    [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\n    (deleteAssets)=\"deleteAssets($event)\"\n></vdr-asset-gallery>\n\n<div class=\"paging-controls\">\n    <vdr-items-per-page-controls\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    ></vdr-items-per-page-controls>\n\n    <vdr-pagination-controls\n        [currentPage]=\"currentPage$ | async\"\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        [totalItems]=\"totalItems$ | async\"\n        (pageChange)=\"setPageNumber($event)\"\n    ></vdr-pagination-controls>\n</div>\n","<div class=\"card\" *ngIf=\"!compact; else compactView\">\n    <div class=\"card-img\">\n        <div class=\"featured-asset\">\n            <img\n                *ngIf=\"featuredAsset\"\n                [src]=\"featuredAsset | assetPreview:'small'\"\n                (click)=\"previewAsset(featuredAsset)\"\n            />\n            <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\">\n                <clr-icon shape=\"image\" size=\"128\"></clr-icon>\n                <div>{{ 'catalog.no-featured-asset' | translate }}</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-block\"><ng-container *ngTemplateOutlet=\"assetList\"></ng-container></div>\n    <div class=\"card-footer\" *vdrIfPermissions=\"updatePermissions\">\n        <button class=\"btn\" (click)=\"selectAssets()\">\n            <clr-icon shape=\"attachment\"></clr-icon>\n            {{ 'asset.add-asset' | translate }}\n        </button>\n    </div>\n</div>\n\n<ng-template #compactView>\n    <div class=\"featured-asset compact\">\n        <img\n            *ngIf=\"featuredAsset\"\n            [src]=\"featuredAsset | assetPreview:'thumb'\"\n            (click)=\"previewAsset(featuredAsset)\"\n        />\n\n        <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\"><clr-icon shape=\"image\" size=\"150\"></clr-icon></div>\n    </div>\n    <ng-container *ngTemplateOutlet=\"assetList\"></ng-container>\n    <button\n        *vdrIfPermissions=\"updatePermissions\"\n        class=\"compact-select btn btn-icon btn-sm btn-block\"\n        [title]=\"'asset.add-asset' | translate\"\n        (click)=\"selectAssets()\"\n    >\n        <clr-icon shape=\"attachment\"></clr-icon>\n        {{ 'asset.add-asset' | translate }}\n    </button>\n</ng-template>\n\n<ng-template #assetList>\n    <div class=\"all-assets\" [class.compact]=\"compact\" cdkDropListGroup>\n        <div\n            *ngFor=\"let asset of assets; let index = index\"\n            class=\"drop-list\"\n            cdkDropList\n            cdkDropListOrientation=\"horizontal\"\n            [cdkDropListData]=\"index\"\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\n            (cdkDropListDropped)=\"dropListDropped($event)\"\n        >\n            <vdr-dropdown cdkDrag>\n                <div\n                    class=\"asset-thumb\"\n                    vdrDropdownTrigger\n                    [class.featured]=\"isFeatured(asset)\"\n                    [title]=\"\"\n                    tabindex=\"0\"\n                >\n                    <img [src]=\"asset | assetPreview:'tiny'\" />\n                </div>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button type=\"button\" vdrDropdownItem (click)=\"previewAsset(asset)\">\n                        {{ 'asset.preview' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        [disabled]=\"isFeatured(asset) || !(updatePermissions | hasPermission)\"\n                        vdrDropdownItem\n                        (click)=\"setAsFeatured(asset)\"\n                    >\n                        {{ 'asset.set-as-featured-asset' | translate }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        class=\"remove-asset\"\n                        vdrDropdownItem\n                        [disabled]=\"!(updatePermissions | hasPermission)\"\n                        (click)=\"removeAsset(asset)\"\n                    >\n                        {{ 'asset.remove-asset' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n    </div>\n</ng-template>\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n} from '@angular/core';\nimport {\n    Asset,\n    AssetPickerDialogComponent,\n    AssetPreviewDialogComponent,\n    ModalService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport interface AssetChange {\n    assets: Asset[];\n    featuredAsset: Asset | undefined;\n}\n\n/**\n * A component which displays the Assets, and allows assets to be removed and\n * added, and for the featured asset to be set.\n *\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\n */\n@Component({\n    selector: 'vdr-assets',\n    templateUrl: './assets.component.html',\n    styleUrls: ['./assets.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssetsComponent {\n    @Input('assets') set assetsSetter(val: Asset[]) {\n        // create a new non-readonly array of assets\n        this.assets = (val || []).slice();\n    }\n\n    @Input() featuredAsset: Asset | undefined;\n    @HostBinding('class.compact')\n    @Input()\n    compact = false;\n    @Output() change = new EventEmitter<AssetChange>();\n\n    public assets: Asset[] = [];\n\n    @Input()\n    updatePermissions: string | string[] | Permission | Permission[];\n\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\n\n    selectAssets() {\n        this.modalService\n            .fromComponent(AssetPickerDialogComponent, {\n                size: 'xl',\n            })\n            .subscribe(result => {\n                if (result && result.length) {\n                    this.assets = unique(this.assets.concat(result), 'id');\n                    if (!this.featuredAsset) {\n                        this.featuredAsset = result[0];\n                    }\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    setAsFeatured(asset: Asset) {\n        this.featuredAsset = asset;\n        this.emitChangeEvent(this.assets, asset);\n    }\n\n    isFeatured(asset: Asset): boolean {\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\n    }\n\n    previewAsset(asset: Asset) {\n        this.modalService\n            .fromComponent(AssetPreviewDialogComponent, {\n                size: 'xl',\n                closable: true,\n                locals: { asset },\n            })\n            .subscribe();\n    }\n\n    removeAsset(asset: Asset) {\n        this.assets = this.assets.filter(a => a.id !== asset.id);\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\n        }\n        this.emitChangeEvent(this.assets, this.featuredAsset);\n    }\n\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\n        this.change.emit({\n            assets,\n            featuredAsset,\n        });\n    }\n\n    dropListDropped(event: CdkDragDrop<number>) {\n        moveItemInArray(this.assets, event.previousContainer.data, event.container.data);\n        this.emitChangeEvent(this.assets, this.featuredAsset);\n    }\n}\n","<div class=\"contents-header\">\n    <div class=\"header-title-row\">\n        <ng-container\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\n        ></ng-container>\n    </div>\n    <input\n        type=\"text\"\n        [placeholder]=\"'catalog.filter-by-name' | translate\"\n        [formControl]=\"filterTermControl\"\n    />\n</div>\n<div class=\"table-wrapper\">\n    <div class=\"progress loop\" [class.visible]=\"isLoading\"></div>\n    <vdr-data-table\n        [class.loading]=\"isLoading\"\n        [items]=\"contents$ | async\"\n        [itemsPerPage]=\"contentsItemsPerPage$ | async\"\n        [totalItems]=\"contentsTotalItems$ | async\"\n        [currentPage]=\"contentsCurrentPage$ | async\"\n        (pageChange)=\"setContentsPageNumber($event)\"\n        (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n    >\n        <ng-template let-variant=\"item\">\n            <td class=\"left align-middle\">{{ variant.name }}</td>\n            <td class=\"left align-middle\"><small class=\"sku\">{{ variant.sku }}</small></td>\n            <td class=\"right align-middle\">\n                <vdr-table-row-action\n                    iconShape=\"edit\"\n                    [label]=\"'common.edit' | translate\"\n                    [linkTo]=\"['/catalog/products', variant.productId, { tab: 'variants' }]\"\n                ></vdr-table-row-action>\n            </td>\n        </ng-template>\n    </vdr-data-table>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    CollectionFilterParameter,\n    ConfigurableOperationInput,\n    DataService,\n    GetCollectionContents,\n} from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    filter,\n    finalize,\n    map,\n    startWith,\n    switchMap,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-collection-contents',\n    templateUrl: './collection-contents.component.html',\n    styleUrls: ['./collection-contents.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() collectionId: string;\n    @Input() parentId: string;\n    @Input() updatedFilters: ConfigurableOperationInput[] | undefined;\n    @Input() previewUpdatedFilters = false;\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\n\n    contents$: Observable<GetCollectionContents.Items[]>;\n    contentsTotalItems$: Observable<number>;\n    contentsItemsPerPage$: Observable<number>;\n    contentsCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    isLoading = false;\n    private collectionIdChange$ = new BehaviorSubject<string>('');\n    private parentIdChange$ = new BehaviorSubject<string>('');\n    private filterChanges$ = new BehaviorSubject<ConfigurableOperationInput[]>([]);\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.contentsCurrentPage$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('contentsPage')),\n            map(page => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.contentsItemsPerPage$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('contentsPerPage')),\n            map(perPage => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        const filterChanges$ = this.filterChanges$.asObservable().pipe(\n            filter(() => this.previewUpdatedFilters),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith([]),\n        );\n\n        const fetchUpdate$ = combineLatest(\n            this.collectionIdChange$,\n            this.parentIdChange$,\n            this.contentsCurrentPage$,\n            this.contentsItemsPerPage$,\n            filterTerm$,\n            filterChanges$,\n            this.refresh$,\n        );\n\n        const collection$ = fetchUpdate$.pipe(\n            takeUntil(this.destroy$),\n            tap(() => (this.isLoading = true)),\n            debounceTime(50),\n            switchMap(([id, parentId, currentPage, itemsPerPage, filterTerm, filters]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                if (filters.length && this.previewUpdatedFilters) {\n                    const filterClause = filterTerm\n                        ? ({ name: { contains: filterTerm } } as CollectionFilterParameter)\n                        : undefined;\n                    return this.dataService.collection\n                        .previewCollectionVariants(\n                            {\n                                parentId,\n                                filters,\n                            },\n                            {\n                                take,\n                                skip,\n                                filter: filterClause,\n                            },\n                        )\n                        .mapSingle(data => data.previewCollectionVariants)\n                        .pipe(catchError(() => of({ items: [], totalItems: 0 })));\n                } else if (id) {\n                    return this.dataService.collection\n                        .getCollectionContents(id, take, skip, filterTerm)\n                        .mapSingle(data => data.collection?.productVariants);\n                } else {\n                    return of(null);\n                }\n            }),\n            tap(() => (this.isLoading = false)),\n            finalize(() => (this.isLoading = false)),\n        );\n\n        this.contents$ = collection$.pipe(map(result => (result ? result.items : [])));\n        this.contentsTotalItems$ = collection$.pipe(map(result => (result ? result.totalItems : 0)));\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('collectionId' in changes) {\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\n        }\n        if ('parentId' in changes) {\n            this.parentIdChange$.next(changes.parentId.currentValue);\n        }\n        if ('updatedFilters' in changes) {\n            if (this.updatedFilters) {\n                this.filterChanges$.next(this.updatedFilters);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('contentsPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('contentsPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./'], {\n            relativeTo: this.route,\n            queryParams: {\n                [key]: value,\n            },\n            queryParamsHandling: 'merge',\n            replaceUrl: true,\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"collection-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as collection\">\n\n    <nav role=\"navigation\">\n        <ul class=\"collection-breadcrumbs\">\n            <li *ngFor=\"let breadcrumb of collection.breadcrumbs; let isFirst = first; let isLast = last\">\n                <a [routerLink]=\"['/catalog/collections']\" *ngIf=\"isFirst\">{{ 'catalog.root-collection' | translate }}</a>\n                <a [routerLink]=\"['/catalog/collections', breadcrumb.id]\" *ngIf=\"!isFirst && !isLast\">{{ breadcrumb.name | translate }}</a>\n                <ng-container *ngIf=\"isLast\">{{ breadcrumb.name | translate }}</ng-container>\n            </li>\n        </ul>\n    </nav>\n    <div class=\"clr-row\">\n        <div class=\"clr-col\">\n            <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                <clr-toggle-wrapper>\n                    <input\n                        type=\"checkbox\"\n                        clrToggle\n                        formControlName=\"visible\"\n                        id=\"visibility\"\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    />\n                    <label class=\"visible-toggle\">\n                        <ng-container *ngIf=\"detailForm.value.visible; else private\">{{\n                            'catalog.public' | translate\n                            }}</ng-container>\n                        <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                    </label>\n                </clr-toggle-wrapper>\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                <input\n                    id=\"name\"\n                    type=\"text\"\n                    formControlName=\"name\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (input)=\"updateSlug($event.target.value)\"\n                />\n            </vdr-form-field>\n            <vdr-form-field\n                [label]=\"'catalog.slug' | translate\"\n                for=\"slug\"\n                [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\n            >\n                <input\n                    id=\"slug\"\n                    type=\"text\"\n                    formControlName=\"slug\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                />\n            </vdr-form-field>\n            <vdr-rich-text-editor\n                formControlName=\"description\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                [label]=\"'common.description' | translate\"\n            ></vdr-rich-text-editor>\n\n            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                <label>{{ 'common.custom-fields' | translate }}</label>\n                <vdr-tabbed-custom-fields\n                    entityName=\"Collection\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get(['customFields'])\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </section>\n            <vdr-custom-detail-component-host\n                locationId=\"collection-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </div>\n        <div class=\"clr-col-md-auto\">\n            <vdr-assets\n                [assets]=\"collection.assets\"\n                [featuredAsset]=\"collection.featuredAsset\"\n                [updatePermissions]=\"updatePermission\"\n                (change)=\"assetChanges = $event\"\n            ></vdr-assets>\n        </div>\n    </div>\n    <div class=\"clr-row\" formArrayName=\"filters\">\n        <div class=\"clr-col\">\n            <label>{{ 'catalog.filters' | translate }}</label>\n            <ng-container *ngFor=\"let filter of filters; index as i; trackBy:trackByFn\">\n                <vdr-configurable-input\n                    (remove)=\"removeFilter(i)\"\n                    [position]=\"i\"\n                    [operation]=\"filter\"\n                    [operationDefinition]=\"getFilterDefinition(filter)\"\n                    [formControlName]=\"i\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-configurable-input>\n            </ng-container>\n\n            <div *vdrIfPermissions=\"updatePermission\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-condition' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let filter of allFilters\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"addFilter(filter)\"\n                        >\n                            {{ filter.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <vdr-collection-contents\n                [collectionId]=\"id\"\n                [parentId]=\"parentId$ | async\"\n                [updatedFilters]=\"updatedFilters$ | async\"\n                [previewUpdatedFilters]=\"livePreview\"\n                #collectionContents\n            >\n                <ng-template let-count>\n                    <div class=\"contents-title\">\n                        {{ 'catalog.collection-contents' | translate }} ({{\n                        'common.results-count' | translate: {count: count}\n                        }})\n                    </div>\n                    <clr-checkbox-wrapper [class.disabled]=\"detailForm.get('filters')?.pristine\">\n                        <input\n                            type=\"checkbox\"\n                            clrCheckbox\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [disabled]=\"detailForm.get('filters')?.pristine\"\n                            [ngModel]=\"livePreview\"\n                            (ngModelChange)=\"toggleLivePreview()\"\n                        />\n                        <label>{{ 'catalog.live-preview-contents' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                </ng-template>\n            </vdr-collection-contents>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    Collection,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreateCollectionInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    LanguageCode,\n    LocalStorageService,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    unicodePatternValidator,\n    UpdateCollectionInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport { debounceTime, filter, map, mergeMap, switchMap, take } from 'rxjs/operators';\n\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\n\n@Component({\n    selector: 'vdr-collection-detail',\n    templateUrl: './collection-detail.component.html',\n    styleUrls: ['./collection-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDetailComponent\n    extends BaseDetailComponent<Collection.Fragment>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\n    filters: ConfigurableOperation[] = [];\n    allFilters: ConfigurableOperationDefinition[] = [];\n    updatedFilters$: Observable<ConfigurableOperationInput[]>;\n    livePreview = false;\n    parentId$: Observable<string | undefined>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    private filterRemoved$ = new Subject<void>();\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private localStorageService: LocalStorageService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Collection');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\n            description: '',\n            visible: false,\n            filters: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        this.livePreview = this.localStorageService.get('livePreviewCollectionContents') ?? false;\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\n            this.allFilters = res.collectionFilters;\n        });\n        const filtersFormArray = this.detailForm.get('filters') as FormArray;\n        this.updatedFilters$ = merge(filtersFormArray.statusChanges, this.filterRemoved$).pipe(\n            debounceTime(200),\n            filter(() => filtersFormArray.touched),\n            map(() =>\n                this.mapOperationsToInputs(this.filters, filtersFormArray.value).filter(_filter => {\n                    // ensure all the arguments have valid values. E.g. a newly-added\n                    // filter will not yet have valid values\n                    for (const arg of _filter.arguments) {\n                        if (arg.value === '') {\n                            return false;\n                        }\n                    }\n                    return true;\n                }),\n            ),\n        );\n        this.parentId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('parentId') || undefined),\n            switchMap(parentId => {\n                if (parentId) {\n                    return of(parentId);\n                } else {\n                    return this.entity$.pipe(map(collection => collection.parent?.id));\n                }\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getFilterDefinition(_filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allFilters.find(f => f.code === _filter.code);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    /**\n     * If creating a new Collection, automatically generate the slug based on the collection name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    addFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const argsHash = collectionFilter.args.reduce(\n            (output, arg) => ({\n                ...output,\n                [arg.name]: getConfigArgValue(arg.value),\n            }),\n            {},\n        );\n        filtersArray.push(\n            this.formBuilder.control({\n                code: collectionFilter.code,\n                args: argsHash,\n            }),\n        );\n        this.filters.push({\n            code: collectionFilter.code,\n            args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n        });\n    }\n\n    removeFilter(index: number) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        if (index !== -1) {\n            filtersArray.removeAt(index);\n            filtersArray.markAsDirty();\n            filtersArray.markAsTouched();\n            this.filters.splice(index, 1);\n            this.filterRemoved$.next();\n        }\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as CreateCollectionInput;\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\n                    if (parentId) {\n                        input.parentId = parentId;\n                    }\n                    return this.dataService.collection.createCollection(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Collection',\n                    });\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdateCollectionInput;\n                    return this.dataService.collection.updateCollection(input);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Collection',\n                    });\n                    this.contentsComponent.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    toggleLivePreview() {\n        this.livePreview = !this.livePreview;\n        this.localStorageService.set('livePreviewCollectionContents', this.livePreview);\n    }\n\n    trackByFn(index: number, item: ConfigurableOperation) {\n        return JSON.stringify(item);\n    }\n\n    /**\n     * Sets the values of the form on changes to the category or current language.\n     */\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(entity, languageCode);\n\n        this.detailForm.patchValue({\n            name: currentTranslation ? currentTranslation.name : '',\n            slug: currentTranslation ? currentTranslation.slug : '',\n            description: currentTranslation ? currentTranslation.description : '',\n            visible: !entity.isPrivate,\n        });\n\n        const formArray = this.detailForm.get('filters') as FormArray;\n        if (formArray.length !== entity.filters.length) {\n            formArray.clear();\n            this.filters = [];\n            entity.filters.forEach(f => this.addFilter(f));\n        }\n\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['customFields']),\n                entity,\n                currentTranslation,\n            );\n        }\n    }\n\n    /**\n     * Given a category and the value of the form, this method creates an updated copy of the category which\n     * can then be persisted to the API.\n     */\n    private getUpdatedCollection(\n        category: Collection.Fragment,\n        form: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateCollectionInput | UpdateCollectionInput {\n        const updatedCategory = createUpdatedTranslatable({\n            translatable: category,\n            updatedFields: form.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: category.name || '',\n                slug: category.slug || '',\n                description: category.description || '',\n            },\n        });\n        return {\n            ...updatedCategory,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            isPrivate: !form.value.visible,\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\n        };\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.entries(formValueOperations[i].args).map(([name, value], j) => {\n                    return {\n                        name,\n                        value: encodeConfigArgValue(value),\n                    };\n                }),\n            };\n        });\n    }\n}\n","export type HasParent = { id: string; parent?: { id: string } | null };\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(\n    nodes: T[],\n    currentState?: RootNode<T>,\n    expandedIds: string[] = [],\n): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n    const currentStateMap = treeToMap(currentState);\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map(n => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? expandedIds.includes(id);\n            const parent = mappedElem.parent;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parent.id];\n            if (!parentIsRoot) {\n                if (mappedArr[parent.id]) {\n                    mappedArr[parent.id].children.push(mappedElem);\n                } else {\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n\n/**\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n */\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\n    const nodeMap = new Map<string, TreeNode<T>>();\n    function visit(node: TreeNode<T>) {\n        nodeMap.set(node.id, node);\n        node.children.forEach(visit);\n    }\n    if (tree) {\n        visit(tree as TreeNode<T>);\n    }\n    return nodeMap;\n}\n","<vdr-collection-tree-node\n    *ngIf=\"collectionTree\"\n    cdkDropListGroup\n    [expandAll]=\"expandAll\"\n    [collectionTree]=\"collectionTree\"\n    [selectionManager]=\"selectionManager\"\n    [activeCollectionId]=\"activeCollectionId\"\n></vdr-collection-tree-node>\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { Collection, SelectionManager } from '@vendure/admin-ui/core';\n\nimport { arrayToTree, HasParent, RootNode, TreeNode } from './array-to-tree';\n\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\n\n@Component({\n    selector: 'vdr-collection-tree',\n    templateUrl: 'collection-tree.component.html',\n    styleUrls: ['./collection-tree.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeComponent implements OnChanges {\n    @Input() collections: CollectionPartial[];\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    @Input() expandedIds: string[] = [];\n    @Input() selectionManager: SelectionManager<CollectionPartial>;\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\n    @Output() deleteCollection = new EventEmitter<string>();\n    collectionTree: RootNode<CollectionPartial>;\n    private allMoveListItems: Array<{ path: string; id: string; ancestorIdPath: Set<string> }> = [];\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('collections' in changes && this.collections) {\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree, this.expandedIds);\n            this.allMoveListItems = [];\n        }\n    }\n\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        const item = event.item.data as CollectionPartial;\n        const newParent = event.container.data;\n        const newParentId = newParent.id;\n        if (newParentId == null) {\n            throw new Error(`Could not determine the ID of the root Collection`);\n        }\n        this.rearrange.emit({\n            collectionId: item.id,\n            parentId: newParentId,\n            index: event.currentIndex,\n        });\n    }\n\n    onMove(event: RearrangeEvent) {\n        this.rearrange.emit(event);\n    }\n\n    onDelete(id: string) {\n        this.deleteCollection.emit(id);\n    }\n\n    getMoveListItems(collection: CollectionPartial) {\n        if (this.allMoveListItems.length === 0) {\n            this.allMoveListItems = this.calculateAllMoveListItems();\n        }\n        return this.allMoveListItems.filter(\n            item =>\n                item.id !== collection.id &&\n                !item.ancestorIdPath.has(collection.id) &&\n                item.id !== collection.parent?.id,\n        );\n    }\n\n    calculateAllMoveListItems() {\n        const visit = (\n            node: TreeNode<any>,\n            parentPath: string[],\n            ancestorIdPath: Set<string>,\n            output: Array<{ path: string; id: string; ancestorIdPath: Set<string> }>,\n        ) => {\n            const path = parentPath.concat(node.name);\n            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });\n            node.children.forEach(child =>\n                visit(child, path, new Set<string>([...ancestorIdPath, node.id]), output),\n            );\n            return output;\n        };\n        return visit(this.collectionTree, [], new Set<string>(), []);\n    }\n\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\n        return !node.hasOwnProperty('parent');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"\">\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"filterTermControl\"\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\n                class=\"clr-input search-input\"\n            />\n            <div class=\"flex center\">\n                <clr-toggle-wrapper\n                    class=\"expand-all-toggle mt2\"\n                >\n                    <input type=\"checkbox\" clrToggle [(ngModel)]=\"expandAll\" (change)=\"toggleExpandAll()\" />\n                    <label>\n                        {{ 'catalog.expand-all-collections' | translate }}\n                    </label>\n                </clr-toggle-wrapper>\n                <vdr-language-selector\n                    class=\"mt2\"\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"contentLanguage$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"collection-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n            [routerLink]=\"['./create']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-collection' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"bulk-select-controls\">\n    <input\n        type=\"checkbox\"\n        clrCheckbox\n        [checked]=\"selectionManager.areAllCurrentItemsSelected()\"\n        (click)=\"selectionManager.toggleSelectAll()\"\n    />\n    <vdr-bulk-action-menu\n        class=\"ml2\"\n        locationId=\"collection-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n</div>\n<div class=\"collection-wrapper\">\n    <vdr-collection-tree\n        [collections]=\"items$ | async\"\n        [activeCollectionId]=\"activeCollectionId$ | async\"\n        [expandAll]=\"expandAll\"\n        [expandedIds]=\"expandedIds\"\n        [selectionManager]=\"selectionManager\"\n        (rearrange)=\"onRearrange($event)\"\n        (deleteCollection)=\"deleteCollection($event)\"\n    ></vdr-collection-tree>\n\n    <div class=\"collection-contents\" [class.expanded]=\"activeCollectionId$ | async\">\n        <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\">\n            <ng-template let-count>\n                <div class=\"collection-title\">\n                    {{ activeCollectionTitle$ | async }} ({{\n                        'common.results-count' | translate: { count: count }\n                    }})\n                </div>\n                <button type=\"button\" class=\"close-button\" (click)=\"closeContents()\">\n                    <clr-icon shape=\"close\"></clr-icon>\n                </button>\n            </ng-template>\n        </vdr-collection-contents>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    GetCollectionList,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    QueryResult,\n    SelectionManager,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\n\nimport { CollectionPartial, RearrangeEvent } from '../collection-tree/collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-list',\n    templateUrl: './collection-list.component.html',\n    styleUrls: ['./collection-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionListComponent implements OnInit, OnDestroy {\n    filterTermControl = new FormControl('');\n    activeCollectionId$: Observable<string | null>;\n    activeCollectionTitle$: Observable<string>;\n    items$: Observable<GetCollectionList.Items[]>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    expandAll = false;\n    expandedIds: string[] = [];\n    selectionManager: SelectionManager<CollectionPartial>;\n    private queryResult: QueryResult<any>;\n    private destroy$ = new Subject<void>();\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private router: Router,\n        private route: ActivatedRoute,\n        private serverConfigService: ServerConfigService,\n        private changeDetectorRef: ChangeDetectorRef,\n    ) {\n        this.selectionManager = new SelectionManager({\n            additiveMode: true,\n            multiSelect: true,\n            itemsAreEqual: (a, b) => a.id === b.id,\n        });\n    }\n\n    ngOnInit() {\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\n        this.items$ = this.queryResult\n            .mapStream(data => data.collections.items)\n            .pipe(\n                tap(items => this.selectionManager.setCurrentItems(items)),\n                shareReplay(1),\n            );\n        this.activeCollectionId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n        );\n        this.expandedIds = this.route.snapshot.queryParamMap.get('expanded')?.split(',') ?? [];\n        this.expandAll = this.route.snapshot.queryParamMap.get('expanded') === 'all';\n\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\n            map(([id, collections]) => {\n                if (id) {\n                    const match = collections.find(c => c.id === id);\n                    return match ? match.name : '';\n                }\n                return '';\n            }),\n        );\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n\n        this.filterTermControl.valueChanges\n            .pipe(debounceTime(250), takeUntil(this.destroy$))\n            .subscribe(term => {\n                this.router.navigate(['./'], {\n                    queryParams: {\n                        q: term || undefined,\n                    },\n                    queryParamsHandling: 'merge',\n                    relativeTo: this.route,\n                });\n            });\n\n        this.route.queryParamMap\n            .pipe(\n                map(qpm => qpm.get('q')),\n                distinctUntilChanged(),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n        this.filterTermControl.patchValue(this.route.snapshot.queryParamMap.get('q'));\n    }\n\n    ngOnDestroy() {\n        this.queryResult.completed$.next();\n        this.destroy$.next(undefined);\n        this.destroy$.complete();\n    }\n\n    toggleExpandAll() {\n        this.router.navigate(['./'], {\n            queryParams: {\n                expanded: this.expandAll ? 'all' : undefined,\n            },\n            queryParamsHandling: 'merge',\n            relativeTo: this.route,\n        });\n    }\n\n    onRearrange(event: RearrangeEvent) {\n        this.dataService.collection.moveCollection([event]).subscribe({\n            next: () => {\n                this.notificationService.success(_('common.notify-saved-changes'));\n                this.refresh();\n            },\n            error: err => {\n                this.notificationService.error(_('common.notify-save-changes-error'));\n            },\n        });\n    }\n\n    deleteCollection(id: string) {\n        this.items$\n            .pipe(\n                take(1),\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\n                switchMap(hasChildren => {\n                    return this.modalService.dialog({\n                        title: _('catalog.confirm-delete-collection'),\n                        body: hasChildren\n                            ? _('catalog.confirm-delete-collection-and-children-body')\n                            : undefined,\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\n                        ],\n                    });\n                }),\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Collection',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    closeContents() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    refresh() {\n        const filterTerm = this.route.snapshot.queryParamMap.get('q');\n        this.queryResult.ref.refetch({\n            options: {\n                skip: 0,\n                take: 1000,\n                ...(filterTerm\n                    ? {\n                          filter: {\n                              name: {\n                                  contains: filterTerm,\n                              },\n                          },\n                      }\n                    : {}),\n            },\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as facet\">\n    <section class=\"form-block\" formGroupName=\"facet\">\n        <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n            <clr-toggle-wrapper>\n                <input\n                    type=\"checkbox\"\n                    clrToggle\n                    [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    formControlName=\"visible\"\n                    id=\"visibility\"\n                />\n                <label class=\"visible-toggle\">\n                    <ng-container *ngIf=\"detailForm.value.facet.visible; else private\">{{\n                        'catalog.public' | translate\n                    }}</ng-container>\n                    <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                </label>\n            </clr-toggle-wrapper>\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n            <input\n                id=\"name\"\n                type=\"text\"\n                formControlName=\"name\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (input)=\"updateCode(facet.code, $event.target.value)\"\n            />\n        </vdr-form-field>\n        <vdr-form-field\n            [label]=\"'common.code' | translate\"\n            for=\"code\"\n            [readOnlyToggle]=\"updatePermission | hasPermission\"\n        >\n            <input\n                id=\"code\"\n                type=\"text\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"code\"\n            />\n        </vdr-form-field>\n\n        <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n            <label>{{ 'common.custom-fields' | translate }}</label>\n            <vdr-tabbed-custom-fields\n                entityName=\"Facet\"\n                [customFields]=\"customFields\"\n                [customFieldsFormGroup]=\"detailForm.get(['facet', 'customFields'])\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n            ></vdr-tabbed-custom-fields>\n        </section>\n        <vdr-custom-detail-component-host\n            locationId=\"facet-detail\"\n            [entity$]=\"entity$\"\n            [detailForm]=\"detailForm\"\n        ></vdr-custom-detail-component-host>\n    </section>\n\n    <section class=\"form-block\" *ngIf=\"!(isNew$ | async)\">\n        <label>{{ 'catalog.facet-values' | translate }}</label>\n\n        <table class=\"facet-values-list table\" formArrayName=\"values\" *ngIf=\"0 < getValuesFormArray().length\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'common.name' | translate }}</th>\n                    <th>{{ 'common.code' | translate }}</th>\n                    <ng-container *ngIf=\"customValueFields.length\">\n                        <th>{{ 'common.custom-fields' | translate }}</th>\n                    </ng-container>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"facet-value\" *ngFor=\"let value of values; let i = index\" [formGroupName]=\"i\">\n                    <td class=\"align-middle\">\n                        <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\n                    </td>\n                    <td class=\"align-middle\">\n                        <input\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateValueCode(facet.values[i]?.code, $event.target.value, i)\"\n                        />\n                    </td>\n                    <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" readonly /></td>\n                    <td class=\"\" *ngIf=\"customValueFields.length\">\n                        <vdr-tabbed-custom-fields\n                            entityName=\"FacetValue\"\n                            [customFields]=\"customValueFields\"\n                            [compact]=\"true\"\n                            [customFieldsFormGroup]=\"detailForm.get(['values', i, 'customFields'])\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-tabbed-custom-fields>\n                    </td>\n                    <td class=\"align-middle\">\n                        <vdr-dropdown>\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                                {{ 'common.actions' | translate }}\n                                <clr-icon shape=\"caret down\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                <button\n                                    type=\"button\"\n                                    class=\"delete-button\"\n                                    (click)=\"deleteFacetValue(facet.values[i]?.id, i)\"\n                                    [disabled]=\"!(updatePermission | hasPermission)\"\n                                    vdrDropdownItem\n                                >\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                    {{ 'common.delete' | translate }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n\n        <div>\n            <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n                (click)=\"addFacetValue()\"\n            >\n                <clr-icon shape=\"add\"></clr-icon>\n                {{ 'catalog.add-facet-value' | translate }}\n            </button>\n        </div>\n    </section>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    CreateFacetValueInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateFacetValueInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-detail',\n    templateUrl: './facet-detail.component.html',\n    styleUrls: ['./facet-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetDetailComponent\n    extends BaseDetailComponent<FacetWithValues.Fragment>\n    implements OnInit, OnDestroy\n{\n    customFields: CustomFieldConfig[];\n    customValueFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Facet');\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\n        this.detailForm = this.formBuilder.group({\n            facet: this.formBuilder.group({\n                code: ['', Validators.required],\n                name: '',\n                visible: true,\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            values: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['facet', 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['values', index, 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    customValueFieldIsSet(index: number, name: string): boolean {\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\n    }\n\n    getValuesFormArray(): FormArray {\n        return this.detailForm.get('values') as FormArray;\n    }\n\n    addFacetValue() {\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n        if (valuesFormArray) {\n            const valueGroup = this.formBuilder.group({\n                id: '',\n                name: ['', Validators.required],\n                code: '',\n            });\n            const newValue: any = { name: '', code: '' };\n            if (this.customValueFields.length) {\n                const customValueFieldsGroup = new FormGroup({});\n                newValue.customFields = {};\n\n                for (const fieldDef of this.customValueFields) {\n                    const key = fieldDef.name;\n                    customValueFieldsGroup.addControl(key, new FormControl());\n                }\n\n                valueGroup.addControl('customFields', customValueFieldsGroup);\n            }\n            valuesFormArray.insert(valuesFormArray.length, valueGroup);\n            this.values.push(newValue);\n        }\n    }\n\n    create() {\n        const facetForm = this.detailForm.get('facet');\n        if (!facetForm || !facetForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const newFacet = this.getUpdatedFacet(\n                        facet,\n                        facetForm as FormGroup,\n                        languageCode,\n                    ) as CreateFacetInput;\n                    return this.dataService.facet.createFacet(newFacet);\n                }),\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const facetGroup = this.detailForm.get('facet');\n                    const updateOperations: Array<Observable<any>> = [];\n\n                    if (facetGroup && facetGroup.dirty) {\n                        const newFacet = this.getUpdatedFacet(\n                            facet,\n                            facetGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateFacetInput;\n                        if (newFacet) {\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\n                        }\n                    }\n                    const valuesArray = this.detailForm.get('values');\n                    if (valuesArray && valuesArray.dirty) {\n                        const createdValues = this.getCreatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (createdValues.length) {\n                            updateOperations.push(\n                                this.dataService.facet\n                                    .createFacetValues(createdValues)\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\n                            );\n                        }\n                        const updatedValues = this.getUpdatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (updatedValues.length) {\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\n                        }\n                    }\n\n                    return forkJoin(updateOperations);\n                }),\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\n        if (!facetValueId) {\n            // deleting a newly-added (not persisted) FacetValue\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n            if (valuesFormArray) {\n                valuesFormArray.removeAt(index);\n            }\n            this.values.splice(index, 1);\n            return;\n        }\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetValueId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet-value'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\n                ),\n                map(result => result.deleteFacetValues[0]),\n            );\n    }\n\n    /**\n     * Sets the values of the form on changes to the facet or current language.\n     */\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(facet, languageCode);\n\n        this.detailForm.patchValue({\n            facet: {\n                code: facet.code,\n                visible: !facet.isPrivate,\n                name: currentTranslation?.name ?? '',\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['facet', 'customFields']),\n                facet,\n                currentTranslation,\n            );\n        }\n\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\n        this.values = [...facet.values];\n        facet.values.forEach((value, i) => {\n            const valueTranslation = findTranslation(value, languageCode);\n            const group = {\n                id: value.id,\n                code: value.code,\n                name: valueTranslation ? valueTranslation.name : '',\n            };\n            const valueControl = currentValuesFormArray.at(i);\n            if (valueControl) {\n                valueControl.get('id')?.setValue(group.id);\n                valueControl.get('code')?.setValue(group.code);\n                valueControl.get('name')?.setValue(group.name);\n            } else {\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\n            }\n            if (this.customValueFields.length) {\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\n                if (!customValueFieldsGroup) {\n                    customValueFieldsGroup = new FormGroup({});\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\n                        'customFields',\n                        customValueFieldsGroup,\n                    );\n                }\n\n                if (customValueFieldsGroup) {\n                    for (const fieldDef of this.customValueFields) {\n                        const key = fieldDef.name;\n                        const fieldValue =\n                            fieldDef.type === 'localeString'\n                                ? (valueTranslation as any | undefined)?.customFields?.[key]\n                                : (value as any).customFields[key];\n                        const control = customValueFieldsGroup.get(key);\n                        if (control) {\n                            control.setValue(fieldValue);\n                        } else {\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\n     * can then be persisted to the API.\n     */\n    private getUpdatedFacet(\n        facet: FacetWithValues.Fragment,\n        facetFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateFacetInput | UpdateFacetInput {\n        const input = createUpdatedTranslatable({\n            translatable: facet,\n            updatedFields: facetFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: facet.name || '',\n            },\n        });\n        input.isPrivate = !facetFormGroup.value.visible;\n        return input;\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\n     * which can be persisted to the API via a createFacetValues mutation.\n     */\n    private getCreatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): CreateFacetValueInput[] {\n        return valuesFormArray.controls\n            .filter(c => !c.value.id)\n            .map(c => c.value)\n            .map(value =>\n                createUpdatedTranslatable({\n                    translatable: { ...value, translations: [] as any },\n                    updatedFields: value,\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                }),\n            )\n            .map(input => ({\n                facetId: facet.id,\n                ...input,\n            }));\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\n     * which can be persisted to the API via an updateFacetValues mutation.\n     */\n    private getUpdatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): UpdateFacetValueInput[] {\n        const dirtyValues = facet.values.filter((v, i) => {\n            const formRow = valuesFormArray.get(i.toString());\n            return formRow && formRow.dirty && formRow.value.id;\n        });\n        const dirtyValueValues = valuesFormArray.controls\n            .filter(c => c.dirty && c.value.id)\n            .map(c => c.value);\n\n        if (dirtyValues.length !== dirtyValueValues.length) {\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\n        }\n        return dirtyValues\n            .map((value, i) => {\n                return createUpdatedTranslatable({\n                    translatable: value,\n                    updatedFields: dirtyValueValues[i],\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n            })\n            .filter(notNullOrUndefined);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"\">\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"filterTermControl\"\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\n                class=\"clr-input search-input\"\n            />\n            <div>\n                <vdr-language-selector\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"contentLanguage$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"facet-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n            [routerLink]=\"['./create']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-facet' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    [selectionManager]=\"selectionManager\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"facet-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'catalog.values' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'catalog.visibility' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-facet=\"item\">\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.code }}</td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.name }}</td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-facet-value-chip\n                *ngFor=\"let value of facet.values | slice: 0:displayLimit[facet.id] || 3\"\n                [facetValue]=\"value\"\n                [removable]=\"false\"\n                [displayFacetName]=\"false\"\n            ></vdr-facet-value-chip>\n            <button\n                class=\"btn btn-sm btn-secondary btn-icon\"\n                *ngIf=\"facet.values.length > initialLimit\"\n                (click)=\"toggleDisplayLimit(facet)\"\n            >\n                <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.values.length; else collapse\">\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ facet.values.length - initialLimit }}\n                </ng-container>\n                <ng-template #collapse>\n                    <clr-icon shape=\"minus\"></clr-icon>\n                </ng-template>\n            </button>\n        </td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-chip>\n                <ng-container *ngIf=\"!facet.isPrivate; else private\">{{\n                    'catalog.public' | translate\n                }}</ng-container>\n                <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n            </vdr-chip>\n        </td>\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', facet.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteFacet(facet.id)\"\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteFacet'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetFacetList,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    SelectionManager,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\nimport { EMPTY, Observable } from 'rxjs';\nimport { debounceTime, filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-list',\n    templateUrl: './facet-list.component.html',\n    styleUrls: ['./facet-list.component.scss'],\n})\nexport class FacetListComponent\n    extends BaseListComponent<GetFacetList.Query, GetFacetList.Items>\n    implements OnInit\n{\n    filterTermControl = new FormControl('');\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    selectionManager: SelectionManager<GetFacetList.Items>;\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private serverConfigService: ServerConfigService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\n            data => data.facets,\n            (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        name: {\n                            contains: this.filterTermControl.value,\n                        },\n                    },\n                    sort: {\n                        createdAt: SortOrder.DESC,\n                    },\n                },\n            }),\n        );\n        this.selectionManager = new SelectionManager<GetFacetList.Items>({\n            multiSelect: true,\n            itemsAreEqual: (a, b) => a.id === b.id,\n            additiveMode: true,\n        });\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n        this.filterTermControl.valueChanges\n            .pipe(\n                filter(value => 2 <= value.length || value.length === 0),\n                debounceTime(250),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n    }\n\n    toggleDisplayLimit(facet: GetFacetList.Items) {\n        if (this.displayLimit[facet.id] === facet.values.length) {\n            this.displayLimit[facet.id] = this.initialLimit;\n        } else {\n            this.displayLimit[facet.id] = facet.values.length;\n        }\n    }\n\n    deleteFacet(facetValueId: string) {\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    private showModalAndDelete(facetId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    {\n                        type: 'danger',\n                        label: message ? _('common.force-delete') : _('common.delete'),\n                        returnValue: true,\n                    },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\n                map(res => res.deleteFacet),\n            );\n    }\n}\n","import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n    return (source) => source.lift(new SkipUntilOperator(notifier));\n}\nclass SkipUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    }\n}\nclass SkipUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier) {\n        super(destination);\n        this.hasValue = false;\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        this.add(innerSubscriber);\n        this.innerSubscription = innerSubscriber;\n        const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            this.add(innerSubscription);\n            this.innerSubscription = innerSubscription;\n        }\n    }\n    _next(value) {\n        if (this.hasValue) {\n            super._next(value);\n        }\n    }\n    notifyNext() {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    }\n    notifyComplete() {\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\n\n<vdr-facet-value-selector\n    [facets]=\"facets\"\n    (selectedValuesChange)=\"selectedValues = $event\"\n></vdr-facet-value-selector>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"selectValues()\"\n        [disabled]=\"selectedValues.length === 0\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.add-facets' | translate }}\n    </button>\n</ng-template>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n} from '@angular/core';\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-apply-facet-dialog',\n    templateUrl: './apply-facet-dialog.component.html',\n    styleUrls: ['./apply-facet-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\n    resolveWith: (result?: FacetValue[]) => void;\n    selectedValues: FacetValue[] = [];\n    // Provided by caller\n    facets: FacetWithValues.Fragment[];\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngAfterViewInit() {\n        setTimeout(() => this.selector.focus(), 0);\n    }\n\n    selectValues() {\n        this.resolveWith(this.selectedValues);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<ng-template vdrDialogTitle>\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\n        'catalog.assign-variants-to-channel' | translate\n    }}</ng-container>\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\n</ng-template>\n\n<div class=\"flex\">\n    <clr-input-container>\n        <label>{{ 'common.channel' | translate }}</label>\n        <vdr-channel-assignment-control\n            clrInput\n            [multiple]=\"false\"\n            [includeDefaultChannel]=\"false\"\n            [disableChannelIds]=\"currentChannelIds\"\n            [formControl]=\"selectedChannelIdControl\"\n        ></vdr-channel-assignment-control>\n    </clr-input-container>\n    <div class=\"flex-spacer\"></div>\n    <clr-input-container>\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\n    </clr-input-container>\n</div>\n\n<div class=\"channel-price-preview\">\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>{{ 'common.name' | translate }}</th>\n                <th>\n                    {{\n                        'catalog.price-in-channel'\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\n                    }}\n                </th>\n                <th>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\n                    </ng-template>\n                    <ng-template #noSelection>\n                        {{ 'catalog.no-channel-selected' | translate }}\n                    </ng-template>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\n                <td>{{ row.name }}</td>\n                <td>{{ row.price | localeCurrency: currentChannel?.currencyCode }}</td>\n                <td>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.currencyCode }}\n                    </ng-template>\n                    <ng-template #noChannelSelected> - </ng-template>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { combineLatest, from, Observable } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-assign-products-to-channel-dialog',\n    templateUrl: './assign-products-to-channel-dialog.component.html',\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: any) => void;\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\n    priceFactorControl = new FormControl(1);\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n    productIds: string[];\n    productVariantIds: string[] | undefined;\n    currentChannelIds: string[];\n\n    get isProductVariantMode(): boolean {\n        return this.productVariantIds != null;\n    }\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n\n        this.variantsPreview$ = combineLatest(\n            from(this.getTopVariants(10)),\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\n        ).pipe(\n            map(([variants, factor]) => {\n                return variants.map(v => ({\n                    id: v.id,\n                    name: v.name,\n                    price: v.price,\n                    pricePreview: v.price * +factor,\n                }));\n            }),\n        );\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            if (!this.isProductVariantMode) {\n                this.dataService.product\n                    .assignProductsToChannel({\n                        channelId: selectedChannel.id,\n                        productIds: this.productIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\n                            channel: selectedChannel.code,\n                            count: this.productIds.length,\n                        });\n                        this.resolveWith(true);\n                    });\n            } else if (this.productVariantIds) {\n                this.dataService.product\n                    .assignVariantsToChannel({\n                        channelId: selectedChannel.id,\n                        productVariantIds: this.productVariantIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\n                            channel: selectedChannel.code,\n                            // tslint:disable-next-line:no-non-null-assertion\n                            count: this.productVariantIds!.length,\n                        });\n                        this.resolveWith(true);\n                    });\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\n        const variants: ProductVariantFragment[] = [];\n\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\n            const productVariants = await this.dataService.product\n                .getProduct(this.productIds[i], { take: this.isProductVariantMode ? undefined : take })\n                .mapSingle(({ product }) => {\n                    const _variants = product ? product.variantList.items : [];\n                    return _variants.filter(v =>\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\n                    );\n                })\n                .toPromise();\n            variants.push(...(productVariants || []));\n        }\n        return variants.slice(0, take);\n    }\n}\n","/**\n * @description\n * Like String.prototype.replace(), but replaces the last instance\n * rather than the first.\n */\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\n    if (!target) {\n        return '';\n    }\n    const lastIndex = target.lastIndexOf(search);\n    if (lastIndex === -1) {\n        return target;\n    }\n    const head = target.substr(0, lastIndex);\n    const tail = target.substr(lastIndex).replace(search, replace);\n    return head + tail;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    CreateProductInput,\n    CreateProductVariantInput,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    GetProductWithVariants,\n    LanguageCode,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\n\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\n\nimport { replaceLast } from './replace-last';\n\n/**\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductDetailService {\n    constructor(private dataService: DataService) {}\n\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\n    }\n\n    getTaxCategories() {\n        return this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories)\n            .pipe(shareReplay(1));\n    }\n\n    createProductWithVariants(\n        input: CreateProductInput,\n        createVariantsConfig: CreateProductVariantsConfig,\n        languageCode: LanguageCode,\n    ) {\n        const createProduct$ = this.dataService.product.createProduct(input);\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\n\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\n            mergeMap(([{ createProduct }, optionGroups]) => {\n                const addOptionsToProduct$ = optionGroups.length\n                    ? forkJoin(\n                          optionGroups.map(optionGroup => {\n                              return this.dataService.product.addOptionGroupToProduct({\n                                  productId: createProduct.id,\n                                  optionGroupId: optionGroup.id,\n                              });\n                          }),\n                      )\n                    : of([]);\n                return addOptionsToProduct$.pipe(\n                    map(() => {\n                        return { createProduct, optionGroups };\n                    }),\n                );\n            }),\n            mergeMap(({ createProduct, optionGroups }) => {\n                const variants = createVariantsConfig.variants.map(v => {\n                    const optionIds = optionGroups.length\n                        ? v.optionValues.map((optionName, index) => {\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\n                              if (!option) {\n                                  throw new Error(\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\n                                  );\n                              }\n                              return option.id;\n                          })\n                        : [];\n                    return {\n                        ...v,\n                        optionIds,\n                    };\n                });\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\n                return this.createProductVariants(createProduct, variants, options, languageCode);\n            }),\n        );\n    }\n\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\n        return groups.length\n            ? forkJoin(\n                  groups.map(c => {\n                      return this.dataService.product\n                          .createProductOptionGroups({\n                              code: normalizeString(c.name, '-'),\n                              translations: [{ languageCode, name: c.name }],\n                              options: c.values.map(v => ({\n                                  code: normalizeString(v, '-'),\n                                  translations: [{ languageCode, name: v }],\n                              })),\n                          })\n                          .pipe(map(data => data.createProductOptionGroup));\n                  }),\n              )\n            : of([]);\n    }\n\n    createProductVariants(\n        product: { name: string; id: string },\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\n        options: Array<{ id: string; name: string }>,\n        languageCode: LanguageCode,\n    ) {\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\n            const name = options.length\n                ? `${product.name} ${v.optionIds\n                      .map(id => options.find(o => o.id === id))\n                      .filter(notNullOrUndefined)\n                      .map(o => o.name)\n                      .join(' ')}`\n                : product.name;\n            return {\n                productId: product.id,\n                price: v.price,\n                sku: v.sku,\n                stockOnHand: v.stock,\n                translations: [\n                    {\n                        languageCode,\n                        name,\n                    },\n                ],\n                optionIds: v.optionIds,\n            };\n        });\n        return this.dataService.product.createProductVariants(variants).pipe(\n            map(({ createProductVariants }) => ({\n                createProductVariants,\n                productId: product.id,\n            })),\n        );\n    }\n\n    updateProduct(updateOptions: {\n        product: GetProductWithVariants.Product;\n        languageCode: LanguageCode;\n        autoUpdate: boolean;\n        productInput?: UpdateProductInput;\n        variantsInput?: UpdateProductVariantInput[];\n    }) {\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\n        const updateVariantsInput = variantsInput || [];\n\n        const variants$ = autoUpdate\n            ? this.dataService.product\n                  .getProductVariants({}, product.id)\n                  .mapSingle(({ productVariants }) => productVariants.items)\n            : of([]);\n\n        return variants$.pipe(\n            mergeMap(variants => {\n                if (productInput) {\n                    updateOperations.push(this.dataService.product.updateProduct(productInput));\n                    const productOldName = findTranslation(product, languageCode)?.name ?? '';\n                    const productNewName = findTranslation(productInput, languageCode)?.name;\n                    if (productNewName && productOldName !== productNewName && autoUpdate) {\n                        for (const variant of variants) {\n                            const currentVariantName = findTranslation(variant, languageCode)?.name || '';\n                            let variantInput: UpdateProductVariantInput;\n                            const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\n                            if (existingVariantInput) {\n                                variantInput = existingVariantInput;\n                            } else {\n                                variantInput = {\n                                    id: variant.id,\n                                    translations: [{ languageCode, name: currentVariantName }],\n                                };\n                                updateVariantsInput.push(variantInput);\n                            }\n                            const variantTranslation = findTranslation(variantInput, languageCode);\n                            if (variantTranslation) {\n                                if (variantTranslation.name) {\n                                    variantTranslation.name = replaceLast(\n                                        variantTranslation.name,\n                                        productOldName,\n                                        productNewName,\n                                    );\n                                } else {\n                                    // The variant translation was falsy, which occurs\n                                    // when defining the product name for a new translation\n                                    // language that had not yet been defined.\n                                    variantTranslation.name = [\n                                        productNewName,\n                                        ...variant.options.map(o => o.name),\n                                    ].join(' ');\n                                }\n                            }\n                        }\n                    }\n                }\n                if (updateVariantsInput.length) {\n                    updateOperations.push(\n                        this.dataService.product.updateProductVariants(updateVariantsInput),\n                    );\n                }\n                return forkJoin(updateOperations);\n            }),\n        );\n    }\n\n    updateProductOption(\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\n        product: GetProductWithVariants.Product,\n        languageCode: LanguageCode,\n    ) {\n        const variants$ = input.autoUpdate\n            ? this.dataService.product\n                  .getProductVariants({}, product.id)\n                  .mapSingle(({ productVariants }) => productVariants.items)\n            : of([]);\n\n        return variants$.pipe(\n            mergeMap(variants => {\n                let updateProductVariantNames$: Observable<any> = of([]);\n                if (input.autoUpdate) {\n                    // Update any ProductVariants' names which include the option name\n                    let oldOptionName: string | undefined;\n                    const newOptionName = findTranslation(input, languageCode)?.name;\n                    if (!newOptionName) {\n                        updateProductVariantNames$ = of([]);\n                    }\n                    const variantsToUpdate: UpdateProductVariantInput[] = [];\n                    for (const variant of variants) {\n                        if (variant.options.map(o => o.id).includes(input.id)) {\n                            if (!oldOptionName) {\n                                oldOptionName = findTranslation(\n                                    variant.options.find(o => o.id === input.id),\n                                    languageCode,\n                                )?.name;\n                            }\n                            const variantName = findTranslation(variant, languageCode)?.name || '';\n                            if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\n                                variantsToUpdate.push({\n                                    id: variant.id,\n                                    translations: [\n                                        {\n                                            languageCode,\n                                            name: replaceLast(variantName, oldOptionName, newOptionName),\n                                        },\n                                    ],\n                                });\n                            }\n                        }\n                    }\n                    if (variantsToUpdate.length) {\n                        updateProductVariantNames$ =\n                            this.dataService.product.updateProductVariants(variantsToUpdate);\n                    }\n                }\n                return this.dataService.product\n                    .updateProductOption(input)\n                    .pipe(mergeMap(() => updateProductVariantNames$));\n            }),\n        );\n    }\n\n    deleteProductVariant(id: string, productId: string) {\n        return this.dataService.product.deleteProductVariant(id).pipe(\n            switchMap(result => {\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\n                    return this.dataService.product.getProduct(productId).single$;\n                } else {\n                    return throwError(result.deleteProductVariant.message);\n                }\n            }),\n        );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"flex clr-flex-row\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\n                <input\n                    type=\"checkbox\"\n                    clrToggle\n                    name=\"enabled\"\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\n                />\n                <label>{{ 'common.enabled' | translate }}</label>\n            </clr-toggle-wrapper>\n        </div>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"product$ | async as product\">\n    <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\n    <clr-tabs>\n        <clr-tab>\n            <button clrTabLink (click)=\"navigateToTab('details')\">\n                {{ 'catalog.product-details' | translate }}\n            </button>\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <section class=\"form-block\" formGroupName=\"product\">\n                            <ng-container *ngIf=\"!(isNew$ | async)\">\n                                <ng-container *vdrIfMultichannel>\n                                    <vdr-form-item\n                                        [label]=\"'common.channels' | translate\"\n                                        *vdrIfDefaultChannelActive\n                                    >\n                                        <div class=\"flex channel-assignment\">\n                                            <ng-container *ngFor=\"let channel of productChannels$ | async\">\n                                                <vdr-chip\n                                                    *ngIf=\"!isDefaultChannel(channel.code)\"\n                                                    icon=\"times-circle\"\n                                                    (iconClick)=\"removeFromChannel(channel.id)\"\n                                                >\n                                                    <vdr-channel-badge\n                                                        [channelCode]=\"channel.code\"\n                                                    ></vdr-channel-badge>\n                                                    {{ channel.code | channelCodeToLabel }}\n                                                </vdr-chip>\n                                            </ng-container>\n                                            <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\n                                                <clr-icon shape=\"layers\"></clr-icon>\n                                                {{ 'catalog.assign-to-channel' | translate }}\n                                            </button>\n                                        </div>\n                                    </vdr-form-item>\n                                </ng-container>\n                            </ng-container>\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\n                                <input\n                                    id=\"name\"\n                                    type=\"text\"\n                                    formControlName=\"name\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                    (input)=\"updateSlug($event.target.value)\"\n                                />\n                            </vdr-form-field>\n                            <div\n                                class=\"auto-rename-wrapper\"\n                                [class.visible]=\"\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\n                                \"\n                            >\n                                <clr-checkbox-wrapper>\n                                    <input\n                                        clrCheckbox\n                                        type=\"checkbox\"\n                                        id=\"auto-update\"\n                                        formControlName=\"autoUpdateVariantNames\"\n                                    />\n                                    <label>{{\n                                        'catalog.auto-update-product-variant-name' | translate\n                                    }}</label>\n                                </clr-checkbox-wrapper>\n                            </div>\n                            <vdr-form-field\n                                [label]=\"'catalog.slug' | translate\"\n                                for=\"slug\"\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                            >\n                                <input\n                                    id=\"slug\"\n                                    type=\"text\"\n                                    formControlName=\"slug\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                />\n                            </vdr-form-field>\n                            <vdr-form-field\n                                [label]=\"'common.description' | translate\"\n                                for=\"description\"\n                                [errors]=\"{ pattern: 'catalog.description-pattern-error' | translate }\"\n                            >\n                                <textarea\n                                    rows=\"9\"\n                                    id=\"slug\"\n                                    type=\"text\"\n                                    formControlName=\"description\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                ></textarea>\n                            </vdr-form-field>\n\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                                <label>{{ 'common.custom-fields' | translate }}</label>\n                                <vdr-tabbed-custom-fields\n                                    entityName=\"Product\"\n                                    [customFields]=\"customFields\"\n                                    [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                ></vdr-tabbed-custom-fields>\n                            </section>\n                            <vdr-custom-detail-component-host\n                                locationId=\"product-detail\"\n                                [entity$]=\"entity$\"\n                                [detailForm]=\"detailForm\"\n                            ></vdr-custom-detail-component-host>\n                        </section>\n                    </div>\n                    <div class=\"clr-col-md-auto\">\n                        <vdr-assets\n                            [assets]=\"assetChanges.assets || product.assets\"\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\n                            [updatePermissions]=\"updatePermissions\"\n                            (change)=\"assetChanges = $event\"\n                        ></vdr-assets>\n                        <div class=\"facets\">\n                            <vdr-facet-value-chip\n                                *ngFor=\"let facetValue of facetValues$ | async\"\n                                [facetValue]=\"facetValue\"\n                                [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\n                                (remove)=\"removeProductFacetValue(facetValue.id)\"\n                            ></vdr-facet-value-chip>\n                            <button\n                                class=\"btn btn-sm btn-secondary\"\n                                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                                (click)=\"selectProductFacetValue()\"\n                            >\n                                <clr-icon shape=\"plus\"></clr-icon>\n                                {{ 'catalog.add-facets' | translate }}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"isNew$ | async\">\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\n                    <vdr-generate-product-variants\n                        (variantsChange)=\"createVariantsConfig = $event\"\n                    ></vdr-generate-product-variants>\n                </div>\n            </clr-tab-content>\n        </clr-tab>\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\n                {{ 'catalog.product-variants' | translate }}\n            </button>\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\n                <section class=\"form-block\">\n                    <div class=\"view-mode\">\n                        <div class=\"btn-group\">\n                            <button\n                                class=\"btn btn-secondary-outline\"\n                                (click)=\"variantDisplayMode = 'card'\"\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\n                            >\n                                <clr-icon shape=\"list\"></clr-icon>\n                                <span class=\"full-label\">{{\n                                    'catalog.display-variant-cards' | translate\n                                }}</span>\n                            </button>\n                            <button\n                                class=\"btn\"\n                                (click)=\"variantDisplayMode = 'table'\"\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\n                            >\n                                <clr-icon shape=\"table\"></clr-icon>\n                                <span class=\"full-label\">{{\n                                    'catalog.display-variant-table' | translate\n                                }}</span>\n                            </button>\n                        </div>\n                        <div class=\"variant-filter\">\n                            <input\n                                [formControl]=\"filterInput\"\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\n                            />\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\n                                <clr-icon shape=\"times\"></clr-icon>\n                            </button>\n                        </div>\n                        <div class=\"flex-spacer\"></div>\n                        <a\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                            [routerLink]=\"['./', 'manage-variants']\"\n                            class=\"btn btn-secondary edit-variants-btn mb0 mr0\"\n                        >\n                            <clr-icon shape=\"add-text\"></clr-icon>\n                            {{ 'catalog.manage-variants' | translate }}\n                        </a>\n                    </div>\n\n                    <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\n                        <vdr-items-per-page-controls\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n                        ></vdr-items-per-page-controls>\n\n                        <vdr-pagination-controls\n                            [id]=\"(paginationConfig$ | async)?.id\"\n                            [currentPage]=\"currentPage$ | async\"\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\n                            (pageChange)=\"setPage($event)\"\n                        ></vdr-pagination-controls>\n                    </div>\n\n                    <vdr-product-variants-table\n                        *ngIf=\"variantDisplayMode === 'table'\"\n                        [variants]=\"variants$ | async\"\n                        [paginationConfig]=\"paginationConfig$ | async\"\n                        [optionGroups]=\"product.optionGroups\"\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\n                        [pendingAssetChanges]=\"variantAssetChanges\"\n                    ></vdr-product-variants-table>\n                    <vdr-product-variants-list\n                        *ngIf=\"variantDisplayMode === 'card'\"\n                        [variants]=\"variants$ | async\"\n                        [paginationConfig]=\"paginationConfig$ | async\"\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [facets]=\"facets$ | async\"\n                        [optionGroups]=\"product.optionGroups\"\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\n                        [taxCategories]=\"taxCategories$ | async\"\n                        [customFields]=\"customVariantFields\"\n                        [customOptionFields]=\"customOptionFields\"\n                        [activeLanguage]=\"languageCode$ | async\"\n                        [pendingAssetChanges]=\"variantAssetChanges\"\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\n                        (assetChange)=\"variantAssetChange($event)\"\n                        (updateProductOption)=\"updateProductOption($event)\"\n                        (selectionChange)=\"selectedVariantIds = $event\"\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\n                    ></vdr-product-variants-list>\n                </section>\n                <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\n                    <vdr-items-per-page-controls\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\n                        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n                    ></vdr-items-per-page-controls>\n\n                    <vdr-pagination-controls\n                        [id]=\"(paginationConfig$ | async)?.id\"\n                        [currentPage]=\"currentPage$ | async\"\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\n                        (pageChange)=\"setPage($event)\"\n                    ></vdr-pagination-controls>\n                </div>\n            </clr-tab-content>\n        </clr-tab>\n    </clr-tabs>\n</form>\n","import { Location } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CreateProductInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    FacetWithValues,\n    findTranslation,\n    flattenFacetValues,\n    getChannelCodeFromUserStatus,\n    GetProductWithVariants,\n    GlobalFlag,\n    LanguageCode,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    Permission,\n    ProductDetail,\n    ProductVariant,\n    ServerConfigService,\n    TaxCategory,\n    unicodePatternValidator,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { unique } from '@vendure/common/lib/unique';\nimport { BehaviorSubject, combineLatest, EMPTY, from, merge, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    mergeMap,\n    shareReplay,\n    skip,\n    skipUntil,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    tap,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\n\nexport type TabName = 'details' | 'variants';\n\nexport interface VariantFormValue {\n    id: string;\n    enabled: boolean;\n    sku: string;\n    name: string;\n    price: number;\n    priceWithTax: number;\n    taxCategoryId: string;\n    stockOnHand: number;\n    useGlobalOutOfStockThreshold: boolean;\n    outOfStockThreshold: number;\n    trackInventory: GlobalFlag;\n    facetValueIds: string[];\n    customFields?: any;\n}\n\nexport interface SelectedAssets {\n    assets?: Asset[];\n    featuredAsset?: Asset;\n}\n\nexport interface PaginationConfig {\n    totalItems: number;\n    currentPage: number;\n    itemsPerPage: number;\n}\n\n@Component({\n    selector: 'vdr-product-detail',\n    templateUrl: './product-detail.component.html',\n    styleUrls: ['./product-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailComponent\n    extends BaseDetailComponent<GetProductWithVariants.Product>\n    implements OnInit, OnDestroy\n{\n    activeTab$: Observable<TabName>;\n    product$: Observable<GetProductWithVariants.Product>;\n    variants$: Observable<ProductVariant.Fragment[]>;\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    customFields: CustomFieldConfig[];\n    customVariantFields: CustomFieldConfig[];\n    customOptionGroupFields: CustomFieldConfig[];\n    customOptionFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    filterInput = new FormControl('');\n    assetChanges: SelectedAssets = {};\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\n    variantFacetValueChanges: { [variantId: string]: string[] } = {};\n    productChannels$: Observable<ProductDetail.Channels[]>;\n    facetValues$: Observable<ProductDetail.FacetValues[]>;\n    facets$: Observable<FacetWithValues.Fragment[]>;\n    totalItems$: Observable<number>;\n    currentPage$ = new BehaviorSubject(1);\n    itemsPerPage$ = new BehaviorSubject(10);\n    paginationConfig$: Observable<PaginationConfig>;\n    selectedVariantIds: string[] = [];\n    variantDisplayMode: 'card' | 'table' = 'card';\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\n    channelPriceIncludesTax$: Observable<boolean>;\n    // Used to store all ProductVariants which have been loaded.\n    // It is needed when saving changes to variants.\n    private productVariantMap = new Map<string, ProductVariant.Fragment>();\n    public readonly updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private productDetailService: ProductDetailService,\n        private formBuilder: FormBuilder,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private location: Location,\n        private changeDetector: ChangeDetectorRef,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Product');\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\n        this.detailForm = this.formBuilder.group({\n            product: this.formBuilder.group({\n                enabled: true,\n                name: ['', Validators.required],\n                autoUpdateVariantNames: true,\n                slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\n                description: '',\n                facetValueIds: [[]],\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            variants: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.product$ = this.entity$;\n        this.totalItems$ = this.product$.pipe(map(product => product.variantList.totalItems));\n        this.paginationConfig$ = combineLatest(this.totalItems$, this.itemsPerPage$, this.currentPage$).pipe(\n            map(([totalItems, itemsPerPage, currentPage]) => ({\n                totalItems,\n                itemsPerPage,\n                currentPage,\n            })),\n        );\n        const variants$ = this.product$.pipe(map(product => product.variantList.items));\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\n            startWith(''),\n            debounceTime(200),\n            shareReplay(),\n        );\n        const initialVariants$ = this.product$.pipe(map(p => p.variantList.items));\n        const updatedVariants$ = combineLatest(filterTerm$, this.currentPage$, this.itemsPerPage$).pipe(\n            skipUntil(initialVariants$),\n            skip(1),\n            switchMap(([term, currentPage, itemsPerPage]) => {\n                return this.dataService.product\n                    .getProductVariants(\n                        {\n                            skip: (currentPage - 1) * itemsPerPage,\n                            take: itemsPerPage,\n                            ...(term\n                                ? { filter: { name: { contains: term }, sku: { contains: term } } }\n                                : {}),\n                            filterOperator: LogicalOperator.OR,\n                        },\n                        this.id,\n                    )\n                    .mapStream(({ productVariants }) => productVariants.items);\n            }),\n            shareReplay({ bufferSize: 1, refCount: true }),\n        );\n        this.variants$ = merge(initialVariants$, updatedVariants$).pipe(\n            tap(variants => {\n                for (const variant of variants) {\n                    this.productVariantMap.set(variant.id, variant);\n                }\n            }),\n        );\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\n\n        combineLatest(updatedVariants$, this.languageCode$)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(([variants, languageCode]) => {\n                this.buildVariantFormArray(variants, languageCode);\n            });\n\n        // FacetValues are provided initially by the nested array of the\n        // Product entity, but once a fetch to get all Facets is made (as when\n        // opening the FacetValue selector modal), then these additional values\n        // are concatenated onto the initial array.\n        this.facets$ = this.productDetailService.getFacets();\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\n        const productGroup = this.getProductFormGroup();\n\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\n            map(val => val.facetValueIds as string[]),\n            distinctUntilChanged(),\n        );\n        const formChangeFacetValues$ = combineLatest(\n            formFacetValueIdChanges$,\n            productFacetValues$,\n            allFacetValues$,\n        ).pipe(\n            map(([ids, productFacetValues, allFacetValues]) => {\n                const combined = [...productFacetValues, ...allFacetValues];\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\n            }),\n        );\n\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\n        this.channelPriceIncludesTax$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\n            .pipe(shareReplay(1));\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    navigateToTab(tabName: TabName) {\n        this.location.replaceState(\n            this.router\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\n                    queryParamsHandling: 'merge',\n                    relativeTo: this.route,\n                })\n                .toString(),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    setPage(page: number) {\n        this.currentPage$.next(page);\n    }\n\n    setItemsPerPage(value: string) {\n        this.itemsPerPage$.next(+value);\n        this.currentPage$.next(1);\n    }\n\n    assignToChannel() {\n        this.productChannels$\n            .pipe(\n                take(1),\n                switchMap(channels => {\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\n                        size: 'lg',\n                        locals: {\n                            productIds: [this.id],\n                            currentChannelIds: channels.map(c => c.id),\n                        },\n                    });\n                }),\n            )\n            .subscribe();\n    }\n\n    removeFromChannel(channelId: string) {\n        from(getChannelCodeFromUserStatus(this.dataService, channelId))\n            .pipe(\n                switchMap(({ channelCode }) => {\n                    return this.modalService.dialog({\n                        title: _('catalog.remove-product-from-channel'),\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            {\n                                type: 'danger',\n                                label: _('catalog.remove-from-channel'),\n                                translationVars: { channelCode },\n                                returnValue: true,\n                            },\n                        ],\n                    });\n                }),\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeProductsFromChannel({\n                              channelId,\n                              productIds: [this.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\n                },\n            );\n    }\n\n    assignVariantToChannel(variant: ProductVariant.Fragment) {\n        return this.modalService\n            .fromComponent(AssignProductsToChannelDialogComponent, {\n                size: 'lg',\n                locals: {\n                    productIds: [this.id],\n                    productVariantIds: [variant.id],\n                    currentChannelIds: variant.channels.map(c => c.id),\n                },\n            })\n            .subscribe();\n    }\n\n    removeVariantFromChannel({\n        channelId,\n        variant,\n    }: {\n        channelId: string;\n        variant: ProductVariant.Fragment;\n    }) {\n        from(getChannelCodeFromUserStatus(this.dataService, channelId))\n            .pipe(\n                switchMap(({ channelCode }) => {\n                    return this.modalService.dialog({\n                        title: _('catalog.remove-product-variant-from-channel'),\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            {\n                                type: 'danger',\n                                label: _('catalog.remove-from-channel'),\n                                translationVars: { channelCode },\n                                returnValue: true,\n                            },\n                        ],\n                    });\n                }),\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeVariantsFromChannel({\n                              channelId,\n                              productVariantIds: [variant.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\n                },\n            );\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    variantAssetsChanged(): boolean {\n        return !!Object.keys(this.variantAssetChanges).length;\n    }\n\n    variantAssetChange(event: VariantAssetChange) {\n        this.variantAssetChanges[event.variantId] = event;\n    }\n\n    /**\n     * If creating a new product, automatically generate the slug based on the product name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['product', 'slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    selectProductFacetValue() {\n        this.displayFacetValueModal().subscribe(facetValueIds => {\n            if (facetValueIds) {\n                const productGroup = this.getProductFormGroup();\n                const currentFacetValueIds = productGroup.value.facetValueIds;\n                productGroup.patchValue({\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\n                });\n                productGroup.markAsDirty();\n            }\n        });\n    }\n\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) =>\n                    this.productDetailService.updateProductOption(input, product, languageCode),\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ProductOption',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ProductOption',\n                    });\n                },\n            );\n    }\n\n    removeProductFacetValue(facetValueId: string) {\n        const productGroup = this.getProductFormGroup();\n        const currentFacetValueIds = productGroup.value.facetValueIds;\n        productGroup.patchValue({\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\n        });\n        productGroup.markAsDirty();\n    }\n\n    /**\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\n     */\n    selectVariantFacetValue(selectedVariantIds: string[]) {\n        this.displayFacetValueModal()\n            .pipe(withLatestFrom(this.variants$))\n            .subscribe(([facetValueIds, variants]) => {\n                if (facetValueIds) {\n                    for (const variantId of selectedVariantIds) {\n                        const index = variants.findIndex(v => v.id === variantId);\n                        const variant = variants[index];\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\n                        const variantFormGroup = (this.detailForm.get('variants') as FormArray).controls.find(\n                            c => c.value.id === variantId,\n                        );\n                        if (variantFormGroup) {\n                            const uniqueFacetValueIds = unique([...existingFacetValueIds, ...facetValueIds]);\n                            variantFormGroup.patchValue({\n                                facetValueIds: uniqueFacetValueIds,\n                            });\n                            variantFormGroup.markAsDirty();\n                            this.variantFacetValueChanges[variantId] = uniqueFacetValueIds;\n                        }\n                    }\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    variantsToCreateAreValid(): boolean {\n        return (\n            0 < this.createVariantsConfig.variants.length &&\n            this.createVariantsConfig.variants.every(v => {\n                return v.sku !== '';\n            })\n        );\n    }\n\n    private displayFacetValueModal(): Observable<string[] | undefined> {\n        return this.productDetailService.getFacets().pipe(\n            mergeMap(facets =>\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\n                    size: 'md',\n                    closable: true,\n                    locals: { facets },\n                }),\n            ),\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\n        );\n    }\n\n    create() {\n        const productGroup = this.getProductFormGroup();\n        if (!productGroup.dirty) {\n            return;\n        }\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) => {\n                    const newProduct = this.getUpdatedProduct(\n                        product,\n                        productGroup as FormGroup,\n                        languageCode,\n                    ) as CreateProductInput;\n                    return this.productDetailService.createProductWithVariants(\n                        newProduct,\n                        this.createVariantsConfig,\n                        languageCode,\n                    );\n                }),\n            )\n            .subscribe(\n                ({ createProductVariants, productId }) => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Product',\n                    });\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\n                },\n                err => {\n                    // tslint:disable-next-line:no-console\n                    console.error(err);\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\n                    const productGroup = this.getProductFormGroup();\n                    let productInput: UpdateProductInput | undefined;\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\n\n                    if (productGroup.dirty || this.assetsChanged()) {\n                        productInput = this.getUpdatedProduct(\n                            product,\n                            productGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateProductInput;\n                    }\n                    const variantsArray = this.detailForm.get('variants');\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\n                        variantsInput = this.getUpdatedProductVariants(\n                            product,\n                            variantsArray as FormArray,\n                            languageCode,\n                            priceIncludesTax,\n                        );\n                    }\n\n                    return this.productDetailService.updateProduct({\n                        product,\n                        languageCode,\n                        autoUpdate:\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\n                        productInput,\n                        variantsInput,\n                    });\n                }),\n            )\n            .subscribe(\n                result => {\n                    this.updateSlugAfterSave(result);\n                    this.detailForm.markAsPristine();\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Product',\n                    });\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the product or current language.\n     */\n    protected setFormValues(product: GetProductWithVariants.Product, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(product, languageCode);\n        this.detailForm.patchValue({\n            product: {\n                enabled: product.enabled,\n                name: currentTranslation ? currentTranslation.name : '',\n                slug: currentTranslation ? currentTranslation.slug : '',\n                description: currentTranslation ? currentTranslation.description : '',\n                facetValueIds: product.facetValues.map(fv => fv.id),\n            },\n        });\n\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get(['product', 'customFields']),\n                product,\n                currentTranslation,\n            );\n        }\n        this.buildVariantFormArray(product.variantList.items, languageCode);\n    }\n\n    private buildVariantFormArray(variants: ProductVariant.Fragment[], languageCode: LanguageCode) {\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\n        variants.forEach((variant, i) => {\n            const variantTranslation = findTranslation(variant, languageCode);\n            const pendingFacetValueChanges = this.variantFacetValueChanges[variant.id];\n            const facetValueIds = pendingFacetValueChanges\n                ? pendingFacetValueChanges\n                : variant.facetValues.map(fv => fv.id);\n            const group: VariantFormValue = {\n                id: variant.id,\n                enabled: variant.enabled,\n                sku: variant.sku,\n                name: variantTranslation ? variantTranslation.name : '',\n                price: variant.price,\n                priceWithTax: variant.priceWithTax,\n                taxCategoryId: variant.taxCategory.id,\n                stockOnHand: variant.stockOnHand,\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\n                outOfStockThreshold: variant.outOfStockThreshold,\n                trackInventory: variant.trackInventory,\n                facetValueIds,\n            };\n\n            let variantFormGroup = variantsFormArray.controls.find(c => c.value.id === variant.id) as\n                | FormGroup\n                | undefined;\n            if (variantFormGroup) {\n                if (variantFormGroup.pristine) {\n                    variantFormGroup.patchValue(group);\n                }\n            } else {\n                variantFormGroup = this.formBuilder.group({\n                    ...group,\n                    facetValueIds: this.formBuilder.control(facetValueIds),\n                });\n                variantsFormArray.insert(i, variantFormGroup);\n            }\n            if (this.customVariantFields.length) {\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\n\n                if (!customFieldsGroup) {\n                    customFieldsGroup = this.formBuilder.group(\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                    );\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\n                }\n                this.setCustomFieldFormValues(\n                    this.customVariantFields,\n                    customFieldsGroup,\n                    variant,\n                    variantTranslation,\n                );\n            }\n        });\n    }\n\n    /**\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\n     * can then be persisted to the API.\n     */\n    private getUpdatedProduct(\n        product: GetProductWithVariants.Product,\n        productFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductInput | CreateProductInput {\n        const updatedProduct = createUpdatedTranslatable({\n            translatable: product,\n            updatedFields: productFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: product.name || '',\n                slug: product.slug || '',\n                description: product.description || '',\n            },\n        });\n        return {\n            ...updatedProduct,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            facetValueIds: productFormGroup.value.facetValueIds,\n        } as UpdateProductInput | CreateProductInput;\n    }\n\n    /**\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedProductVariants(\n        product: GetProductWithVariants.Product,\n        variantsFormArray: FormArray,\n        languageCode: LanguageCode,\n        priceIncludesTax: boolean,\n    ): UpdateProductVariantInput[] {\n        const dirtyFormControls = variantsFormArray.controls.filter(c => c.dirty);\n        const dirtyVariants = dirtyFormControls\n            .map(c => this.productVariantMap.get(c.value.id))\n            .filter(notNullOrUndefined);\n        const dirtyVariantValues = dirtyFormControls.map(c => c.value);\n\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\n        }\n        return dirtyVariants\n            .map((variant, i) => {\n                const formValue: VariantFormValue = dirtyVariantValues.find(value => value.id === variant.id);\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\n                    translatable: variant,\n                    updatedFields: formValue,\n                    customFieldConfig: this.customVariantFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n                result.taxCategoryId = formValue.taxCategoryId;\n                result.facetValueIds = formValue.facetValueIds;\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\n                const assetChanges = this.variantAssetChanges[variant.id];\n                if (assetChanges) {\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\n                }\n                return result;\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    private getProductFormGroup(): FormGroup {\n        return this.detailForm.get('product') as FormGroup;\n    }\n\n    /**\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\n     */\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\n        const firstResult = results[0];\n        const slugControl = this.detailForm.get(['product', 'slug']);\n\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\n            return input.hasOwnProperty('updateProduct');\n        }\n\n        if (slugControl && isUpdateMutation(firstResult)) {\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left [grow]=\"true\">\n        <div class=\"search-form\">\n            <vdr-product-search-input\n                #productSearchInputComponent\n                [facetValueResults]=\"facetValues$ | async\"\n                (searchTermChange)=\"setSearchTerm($event)\"\n                (facetValueChange)=\"setFacetValueIds($event)\"\n            ></vdr-product-search-input>\n            <vdr-dropdown class=\"search-settings-menu mr3\">\n                <button\n                    type=\"button\"\n                    class=\"icon-button search-index-button\"\n                    [title]=\"\n                        (pendingSearchIndexUpdates\n                            ? 'catalog.pending-search-index-updates'\n                            : 'catalog.search-index-controls'\n                        ) | translate\n                    \"\n                    vdrDropdownTrigger\n                >\n                    <clr-icon shape=\"cog\"></clr-icon>\n                    <vdr-status-badge *ngIf=\"pendingSearchIndexUpdates\" type=\"warning\"></vdr-status-badge>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <h4 class=\"dropdown-header\">{{ 'catalog.search-index-controls' | translate }}</h4>\n                    <ng-container *ngIf=\"pendingSearchIndexUpdates\">\n                        <button\n                            type=\"button\"\n                            class=\"run-updates-button\"\n                            vdrDropdownItem\n                            (click)=\"runPendingSearchIndexUpdates()\"\n                            [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                        >\n                            <vdr-status-badge type=\"warning\"></vdr-status-badge>\n                            {{\n                                'catalog.run-pending-search-index-updates'\n                                    | translate: { count: pendingSearchIndexUpdates }\n                            }}\n                        </button>\n                        <div class=\"dropdown-divider\"></div>\n                    </ng-container>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        (click)=\"rebuildSearchIndex()\"\n                        [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                    >\n                        {{ 'catalog.rebuild-search-index' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <div class=\"flex wrap\">\n            <clr-toggle-wrapper class=\"mt2\">\n                <input type=\"checkbox\" clrToggle [(ngModel)]=\"groupByProduct\" (ngModelChange)=\"refresh()\" />\n                <label>\n                    {{ 'catalog.group-by-product' | translate }}\n                </label>\n            </clr-toggle-wrapper>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"product-list\"></vdr-action-bar-items>\n        <a\n            class=\"btn btn-primary\"\n            [routerLink]=\"['./create']\"\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\n        >\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-product' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    [selectionManager]=\"selectionManager\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"product-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt-column> </vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-result=\"item\">\n        <td class=\"left align-middle image-col\" [class.disabled]=\"!result.enabled\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"\n                        groupByProduct\n                            ? result.productAsset\n                            : result.productVariantAsset || result.productAsset as asset;\n                        else imagePlaceholder\n                    \"\n                    [src]=\"asset | assetPreview: 'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\">\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                    </div>\n                </ng-template>\n            </div>\n        </td>\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\n            <div>{{ groupByProduct ? result.productName : result.productVariantName }}</div>\n            <div *ngIf=\"!groupByProduct\" class=\"sku\">{{ result.sku }}</div>\n        </td>\n        <td class=\"align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-chip *ngIf=\"!result.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-table-row-action\n                class=\"edit-button\"\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', result.productId]\"\n            ></vdr-table-row-action>\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteProduct(result.productId)\"\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteProduct'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    JobQueueService,\n    JobState,\n    LanguageCode,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    ProductSearchInputComponent,\n    SearchInput,\n    SearchProducts,\n    SelectionManager,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { delay, map, switchMap, take, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-products-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.scss'],\n})\nexport class ProductListComponent\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\n    implements OnInit, AfterViewInit\n{\n    searchTerm = '';\n    facetValueIds: string[] = [];\n    groupByProduct = true;\n    selectedFacetValueIds$: Observable<string[]>;\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    pendingSearchIndexUpdates = 0;\n    selectionManager: SelectionManager<SearchProducts.Items>;\n\n    @ViewChild('productSearchInputComponent', { static: true })\n    private productSearchInput: ProductSearchInputComponent;\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private jobQueueService: JobQueueService,\n        private serverConfigService: ServerConfigService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        this.route.queryParamMap\n            .pipe(\n                map(qpm => qpm.get('q')),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(term => {\n                this.searchTerm = term || '';\n                if (this.productSearchInput) {\n                    this.productSearchInput.setSearchTerm(term);\n                }\n            });\n        this.selectedFacetValueIds$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\n\n        this.selectedFacetValueIds$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\n            this.facetValueIds = ids;\n            if (this.productSearchInput) {\n                this.productSearchInput.setFacetValues(ids);\n            }\n        });\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\n            data => data.search,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) => ({\n                input: {\n                    skip,\n                    take,\n                    term: this.searchTerm,\n                    facetValueIds: this.facetValueIds,\n                    facetValueOperator: LogicalOperator.AND,\n                    groupByProduct: this.groupByProduct,\n                } as SearchInput,\n            }),\n        );\n        this.selectionManager = new SelectionManager<SearchProducts.Items>({\n            multiSelect: true,\n            itemsAreEqual: (a, b) =>\n                this.groupByProduct ? a.productId === b.productId : a.productVariantId === b.productVariantId,\n            additiveMode: true,\n        });\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\n\n        this.facetValues$\n            .pipe(take(1), delay(100), withLatestFrom(this.selectedFacetValueIds$))\n            .subscribe(([__, ids]) => {\n                this.productSearchInput.setFacetValues(ids);\n            });\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\n        this.contentLanguage$ = this.dataService.client\n            .uiState()\n            .mapStream(({ uiState }) => uiState.contentLanguage)\n            .pipe(tap(() => this.refresh()));\n\n        this.dataService.product\n            .getPendingSearchIndexUpdates()\n            .mapSingle(({ pendingSearchIndexUpdates }) => pendingSearchIndexUpdates)\n            .subscribe(value => (this.pendingSearchIndexUpdates = value));\n    }\n\n    ngAfterViewInit() {\n        if (this.productSearchInput && this.searchTerm) {\n            setTimeout(() => this.productSearchInput.setSearchTerm(this.searchTerm));\n        }\n    }\n\n    setSearchTerm(term: string) {\n        this.searchTerm = term;\n        this.setQueryParam({ q: term || null, page: 1 });\n        this.refresh();\n    }\n\n    setFacetValueIds(ids: string[]) {\n        this.facetValueIds = ids;\n        this.setQueryParam({ fvids: ids, page: 1 });\n        this.refresh();\n    }\n\n    rebuildSearchIndex() {\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\n            this.notificationService.info(_('catalog.reindexing'));\n            this.jobQueueService.addJob(reindex.id, job => {\n                if (job.state === JobState.COMPLETED) {\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\n                    this.notificationService.success(_('catalog.reindex-successful'), {\n                        count: job.result.indexedItemCount,\n                        time,\n                    });\n                    this.refresh();\n                } else {\n                    this.notificationService.error(_('catalog.reindex-error'));\n                }\n            });\n        });\n    }\n\n    runPendingSearchIndexUpdates() {\n        this.dataService.product.runPendingSearchIndexUpdates().subscribe(value => {\n            this.notificationService.info(_('catalog.running-search-index-updates'), {\n                count: this.pendingSearchIndexUpdates,\n            });\n            this.pendingSearchIndexUpdates = 0;\n        });\n    }\n\n    deleteProduct(productId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\n                // Short delay to allow the product to be removed from the search index before\n                // refreshing.\n                delay(500),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Product',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-language-selector\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <div class=\"flex center\">\n            <div class=\"mr2\">\n                <clr-checkbox-wrapper>\n                    <input\n                        clrCheckbox\n                        type=\"checkbox\"\n                        id=\"auto-update\"\n                        [(ngModel)]=\"autoUpdateVariantNames\"\n                    />\n                    <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\n                </clr-checkbox-wrapper>\n            </div>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </div>\n    </vdr-ab-right>\n</vdr-action-bar>\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\n    <div formGroupName=\"optionGroups\" class=\"clr-row\">\n        <div class=\"clr-col-12 clr-col-xl-6\" *ngFor=\"let optionGroup of getOptionGroups(); index as i\">\n            <section class=\"card\" [formArrayName]=\"i\">\n                <div class=\"card-header option-group-header\">\n                    <vdr-entity-info [entity]=\"optionGroup.value\"></vdr-entity-info>\n                    <div class=\"ml2\">{{ optionGroup.value.code }}</div>\n                </div>\n                <div class=\"card-block\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            [id]=\"'name-' + i\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                        <input\n                            [id]=\"'code-' + i\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"code\"\n                        />\n                    </vdr-form-field>\n                </div>\n                <section class=\"card-block\">\n                    <table class=\"facet-values-list table mt2 mb4\" formGroupName=\"options\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>{{ 'common.name' | translate }}</th>\n                                <th>{{ 'common.code' | translate }}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr\n                                class=\"facet-value\"\n                                *ngFor=\"let option of getOptions(optionGroup); let i = index\"\n                                [formGroupName]=\"i\"\n                            >\n                                <td class=\"align-middle\">\n                                    <vdr-entity-info [entity]=\"option.value\"></vdr-entity-info>\n                                </td>\n                                <td class=\"align-middle\">\n                                    <input\n                                        type=\"text\"\n                                        formControlName=\"name\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                    />\n                                </td>\n                                <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" /></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </section>\n            </section>\n        </div>\n    </div>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    FacetWithValues,\n    findTranslation,\n    GetProductVariantOptions,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ProductOption,\n    ProductOptionGroup,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateProductOptionGroupInput,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, forkJoin, Observable } from 'rxjs';\nimport { map, mergeMap, take } from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\n\n@Component({\n    selector: 'vdr-product-options-editor',\n    templateUrl: './product-options-editor.component.html',\n    styleUrls: ['./product-options-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductOptionsEditorComponent\n    extends BaseDetailComponent<GetProductVariantOptions.Product>\n    implements OnInit\n{\n    detailForm: FormGroup;\n    optionGroups$: Observable<GetProductVariantOptions.OptionGroups[]>;\n    languageCode$: Observable<LanguageCode>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    optionGroupCustomFields: CustomFieldConfig[];\n    optionCustomFields: CustomFieldConfig[];\n    autoUpdateVariantNames = true;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n\n    constructor(\n        protected route: ActivatedRoute,\n        protected router: Router,\n        protected serverConfigService: ServerConfigService,\n        protected dataService: DataService,\n        private productDetailService: ProductDetailService,\n        private formBuilder: FormBuilder,\n        private changeDetector: ChangeDetectorRef,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');\n        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');\n    }\n\n    ngOnInit(): void {\n        this.optionGroups$ = this.route.snapshot.data.entity.pipe(\n            map((product: GetProductVariantOptions.Product) => product.optionGroups),\n        );\n        this.detailForm = new FormGroup({\n            optionGroups: new FormArray([]),\n        });\n        super.init();\n    }\n\n    getOptionGroups(): FormGroup[] {\n        const optionGroups = this.detailForm.get('optionGroups');\n        return (optionGroups as FormArray).controls as FormGroup[];\n    }\n\n    getOptions(optionGroup: FormGroup): FormGroup[] {\n        const options = optionGroup.get('options');\n        return (options as FormArray).controls as FormGroup[];\n    }\n\n    save() {\n        if (this.detailForm.invalid || this.detailForm.pristine) {\n            return;\n        }\n        // tslint:disable-next-line:no-non-null-assertion\n        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product!);\n        combineLatest(this.entity$, this.languageCode$, $product)\n            .pipe(\n                take(1),\n                mergeMap(([{ optionGroups }, languageCode, product]) => {\n                    const updateOperations: Array<Observable<any>> = [];\n                    for (const optionGroupForm of this.getOptionGroups()) {\n                        if (optionGroupForm.get('name')?.dirty || optionGroupForm.get('code')?.dirty) {\n                            const optionGroupEntity = optionGroups.find(\n                                og => og.id === optionGroupForm.value.id,\n                            );\n                            if (optionGroupEntity) {\n                                const input = this.getUpdatedOptionGroup(\n                                    optionGroupEntity,\n                                    optionGroupForm,\n                                    languageCode,\n                                );\n                                updateOperations.push(\n                                    this.dataService.product.updateProductOptionGroup(input),\n                                );\n                            }\n                        }\n\n                        for (const optionForm of this.getOptions(optionGroupForm)) {\n                            if (optionForm.get('name')?.dirty || optionForm.get('code')?.dirty) {\n                                const optionGroup = optionGroups\n                                    .find(og => og.id === optionGroupForm.value.id)\n                                    ?.options.find(o => o.id === optionForm.value.id);\n                                if (optionGroup) {\n                                    const input = this.getUpdatedOption(\n                                        optionGroup,\n                                        optionForm,\n                                        languageCode,\n                                    );\n                                    updateOperations.push(\n                                        this.productDetailService.updateProductOption(\n                                            { ...input, autoUpdate: this.autoUpdateVariantNames },\n                                            product,\n                                            languageCode,\n                                        ),\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    return forkJoin(updateOperations);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ProductOptionGroup',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ProductOptionGroup',\n                    });\n                },\n            );\n    }\n\n    private getUpdatedOptionGroup(\n        optionGroup: ProductOptionGroup.Fragment,\n        optionGroupFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductOptionGroupInput {\n        const input = createUpdatedTranslatable({\n            translatable: optionGroup,\n            updatedFields: optionGroupFormGroup.value,\n            customFieldConfig: this.optionGroupCustomFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: optionGroup.name || '',\n            },\n        });\n        return input;\n    }\n\n    private getUpdatedOption(\n        option: ProductOption.Fragment,\n        optionFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductOptionInput {\n        const input = createUpdatedTranslatable({\n            translatable: option,\n            updatedFields: optionFormGroup.value,\n            customFieldConfig: this.optionGroupCustomFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: option.name || '',\n            },\n        });\n        return input;\n    }\n\n    protected setFormValues(entity: GetProductVariantOptions.Product, languageCode: LanguageCode): void {\n        const groupsFormArray = new FormArray([]);\n        for (const optionGroup of entity.optionGroups) {\n            const groupTranslation = findTranslation(optionGroup, languageCode);\n            const group = {\n                id: optionGroup.id,\n                createdAt: optionGroup.createdAt,\n                updatedAt: optionGroup.updatedAt,\n                code: optionGroup.code,\n                name: groupTranslation ? groupTranslation.name : '',\n            };\n            const optionsFormArray = new FormArray([]);\n\n            for (const option of optionGroup.options) {\n                const optionTranslation = findTranslation(option, languageCode);\n                const optionControl = this.formBuilder.group({\n                    id: option.id,\n                    createdAt: option.createdAt,\n                    updatedAt: option.updatedAt,\n                    code: option.code,\n                    name: optionTranslation ? optionTranslation.name : '',\n                });\n                optionsFormArray.push(optionControl);\n            }\n\n            const groupControl = this.formBuilder.group(group);\n            groupControl.addControl('options', optionsFormArray);\n            groupsFormArray.push(groupControl);\n        }\n        this.detailForm.setControl('optionGroups', groupsFormArray);\n    }\n}\n","<ng-template vdrDialogTitle>\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\n</ng-template>\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\n<ul>\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\n</ul>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog, GetProductVariantOptions } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-confirm-variant-deletion-dialog',\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\n    resolveWith: (result?: boolean) => void;\n    variants: GetProductVariantOptions.Variants[] = [];\n\n    confirm() {\n        this.resolveWith(true);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\n    <div class=\"chips\" *ngIf=\"0 < optionValues.length\">\n        <vdr-chip\n            *ngFor=\"let option of optionValues; last as isLast; index as i\"\n            [icon]=\"option.locked ? 'lock' : 'times'\"\n            [class.selected]=\"isLast && lastSelected\"\n            [class.locked]=\"option.locked\"\n            [colorFrom]=\"groupName\"\n            (iconClick)=\"removeOption(option)\"\n        >\n            <span [hidden]=\"editingIndex !== i\">\n                <input\n                    #editNameInput\n                    type=\"text\"\n                    [ngModel]=\"option.name\"\n                    (blur)=\"updateOption(i, $event)\"\n                    (click)=\"$event.cancelBubble = true\"\n                />\n            </span>\n            <span\n                class=\"option-name\"\n                [class.editable]=\"!option.locked && !option.id\"\n                (click)=\"editName(i, $event)\" [hidden]=\"editingIndex === i\">{{ option.name }}</span>\n        </vdr-chip>\n    </div>\n    <textarea\n        #textArea\n        (keyup)=\"handleKey($event)\"\n        (focus)=\"isFocussed = true\"\n        (blur)=\"handleBlur()\"\n        [(ngModel)]=\"input\"\n        [disabled]=\"disabled\"\n    ></textarea>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    Provider,\n    QueryList,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => OptionValueInputComponent),\n    multi: true,\n};\n\ninterface Option {\n    id?: string;\n    name: string;\n    locked: boolean;\n}\n\n@Component({\n    selector: 'vdr-option-value-input',\n    templateUrl: './option-value-input.component.html',\n    styleUrls: ['./option-value-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\n})\nexport class OptionValueInputComponent implements ControlValueAccessor {\n    @Input() groupName = '';\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\n    @ViewChildren('editNameInput', { read: ElementRef }) nameInputs: QueryList<ElementRef>;\n    @Input() options: Option[];\n    @Output() add = new EventEmitter<Option>();\n    @Output() remove = new EventEmitter<Option>();\n    @Output() edit = new EventEmitter<{ index: number; option: Option }>();\n    @Input() disabled = false;\n    input = '';\n    isFocussed = false;\n    lastSelected = false;\n    formValue: Option[];\n    editingIndex = -1;\n    onChangeFn: (value: any) => void;\n    onTouchFn: (value: any) => void;\n\n    get optionValues(): Option[] {\n        return this.formValue ?? this.options ?? [];\n    }\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    registerOnChange(fn: any): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchFn = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    }\n\n    writeValue(obj: any): void {\n        this.formValue = obj || [];\n    }\n\n    focus() {\n        this.textArea.nativeElement.focus();\n    }\n\n    editName(index: number, event: MouseEvent) {\n        const optionValue = this.optionValues[index];\n        if (!optionValue.locked && !optionValue.id) {\n            event.cancelBubble = true;\n            this.editingIndex = index;\n            const input = this.nameInputs.get(index)?.nativeElement;\n            setTimeout(() => input?.focus());\n        }\n    }\n\n    updateOption(index: number, event: InputEvent) {\n        const optionValue = this.optionValues[index];\n        const newName = (event.target as HTMLInputElement).value;\n        if (optionValue) {\n            if (newName) {\n                optionValue.name = newName;\n                this.edit.emit({ index, option: optionValue });\n            }\n            this.editingIndex = -1;\n        }\n    }\n\n    removeOption(option: Option) {\n        if (!option.locked) {\n            if (this.formValue) {\n                this.formValue = this.formValue?.filter(o => o.name !== option.name);\n                this.onChangeFn(this.formValue);\n            } else {\n                this.remove.emit(option);\n            }\n        }\n    }\n\n    handleKey(event: KeyboardEvent) {\n        switch (event.key) {\n            case ',':\n            case 'Enter':\n                this.addOptionValue();\n                event.preventDefault();\n                break;\n            case 'Backspace':\n                if (this.lastSelected) {\n                    this.removeLastOption();\n                    this.lastSelected = false;\n                } else if (this.input === '') {\n                    this.lastSelected = true;\n                }\n                break;\n            default:\n                this.lastSelected = false;\n        }\n    }\n\n    handleBlur() {\n        this.isFocussed = false;\n        this.addOptionValue();\n    }\n\n    private addOptionValue() {\n        const options = this.parseInputIntoOptions(this.input).filter(option => {\n            // do not add an option with the same name\n            // as an existing option\n            const existing = this.options ?? this.formValue;\n            return !existing?.find(o => o?.name === option.name);\n        });\n        if (!this.formValue && this.options) {\n            for (const option of options) {\n                this.add.emit(option);\n            }\n        } else {\n            this.formValue = unique([...this.formValue, ...options]);\n            this.onChangeFn(this.formValue);\n        }\n        this.input = '';\n    }\n\n    private parseInputIntoOptions(input: string): Option[] {\n        return input\n            .split(/[,\\n]/)\n            .map(s => s.trim())\n            .filter(s => s !== '')\n            .map(s => ({ name: s, locked: false }));\n    }\n\n    private removeLastOption() {\n        if (this.optionValues.length) {\n            const option = this.optionValues[this.optionValues.length - 1];\n            this.removeOption(option);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"(!formValueChanged && !optionsChanged) || getVariantsToAdd().length === 0\"\n        >\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngFor=\"let group of optionGroups; index as i\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [options]=\"group.values\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n            (add)=\"addOption(i, $event.name)\"\n            (remove)=\"removeOption(i, $event)\"\n        ></vdr-option-value-input>\n    </div>\n    <div>\n        <button\n            [disabled]=\"group.locked\"\n            class=\"btn btn-icon btn-danger-outline mt5\" (click)=\"removeOptionGroup(group)\">\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOptionGroup()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th></th>\n                <th>{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                <th></th>\n            </tr>\n        </thead>\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\n            <td class=\"left\">\n                <clr-checkbox-wrapper *ngIf=\"!variant.existing\">\n                    <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"variant.enabled\"\n                        name=\"enabled\"\n                        clrCheckbox\n                        (ngModelChange)=\"formValueChanged = true\"\n                    />\n                    <label>{{ 'common.create' | translate }}</label>\n                </clr-checkbox-wrapper>\n            </td>\n            <td>\n                {{ getVariantName(variant) | translate }}\n            </td>\n            <td>\n                <div class=\"flex center\">\n                    <clr-input-container *ngIf=\"!variant.existing\">\n                        <input\n                            clrInput\n                            type=\"text\"\n                            [(ngModel)]=\"variant.sku\"\n                            [placeholder]=\"'catalog.sku' | translate\"\n                            name=\"sku\"\n                            required\n                            (ngModelChange)=\"onFormChanged(variant)\"\n                        />\n                    </clr-input-container>\n                    <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\n                </div>\n            </td>\n            <td>\n                <div class=\"flex center\">\n                    <clr-input-container *ngIf=\"!variant.existing\">\n                        <vdr-currency-input\n                            clrInput\n                            [(ngModel)]=\"variant.price\"\n                            name=\"price\"\n                            [currencyCode]=\"currencyCode\"\n                            (ngModelChange)=\"onFormChanged(variant)\"\n                        ></vdr-currency-input>\n                    </clr-input-container>\n                    <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\n                </div>\n            </td>\n            <td>\n                <div class=\"flex center\">\n                    <clr-input-container *ngIf=\"!variant.existing\">\n                        <input\n                            clrInput\n                            type=\"number\"\n                            [(ngModel)]=\"variant.stock\"\n                            name=\"stock\"\n                            min=\"0\"\n                            step=\"1\"\n                            (ngModelChange)=\"onFormChanged(variant)\"\n                        />\n                    </clr-input-container>\n                    <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\n                </div>\n            </td>\n            <td>\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\n                    <button class=\"icon-button\" vdrDropdownTrigger>\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                        <button\n                            type=\"button\"\n                            class=\"delete-button\"\n                            (click)=\"deleteVariant(productVariantId, variant.options)\"\n                            vdrDropdownItem\n                        >\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'common.delete' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </td>\n        </tr>\n    </table>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CreateProductOptionGroup,\n    CreateProductOptionInput,\n    CurrencyCode,\n    DataService,\n    DeactivateAware,\n    DeletionResult,\n    getDefaultUiLanguage,\n    GetProductVariantOptions,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ProductOptionGroupWithOptionsFragment,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { pick } from '@vendure/common/lib/pick';\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\nimport { defaultIfEmpty, filter, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\nimport { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\n\nexport class GeneratedVariant {\n    isDefault: boolean;\n    options: Array<{ name: string; id?: string }>;\n    productVariantId?: string;\n    enabled: boolean;\n    existing: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n\n    constructor(config: Partial<GeneratedVariant>) {\n        for (const key of Object.keys(config)) {\n            this[key] = config[key];\n        }\n    }\n}\n\ninterface OptionGroupUiModel {\n    id?: string;\n    isNew: boolean;\n    name: string;\n    locked: boolean;\n    values: Array<{\n        id?: string;\n        name: string;\n        locked: boolean;\n    }>;\n}\n\n@Component({\n    selector: 'vdr-product-variants-editor',\n    templateUrl: './product-variants-editor.component.html',\n    styleUrls: ['./product-variants-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\n    formValueChanged = false;\n    optionsChanged = false;\n    generatedVariants: GeneratedVariant[] = [];\n    optionGroups: OptionGroupUiModel[];\n    product: GetProductVariantOptions.Product;\n    currencyCode: CurrencyCode;\n    private languageCode: LanguageCode;\n\n    constructor(\n        private route: ActivatedRoute,\n        private dataService: DataService,\n        private productDetailService: ProductDetailService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {}\n\n    ngOnInit() {\n        this.initOptionsAndVariants();\n        this.languageCode =\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n    }\n\n    onFormChanged(variantInfo: GeneratedVariant) {\n        this.formValueChanged = true;\n        variantInfo.enabled = true;\n    }\n\n    canDeactivate(): boolean {\n        return !this.formValueChanged;\n    }\n\n    getVariantsToAdd() {\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\n    }\n\n    getVariantName(variant: GeneratedVariant) {\n        return variant.options.length === 0\n            ? _('catalog.default-variant')\n            : variant.options.map(o => o.name).join(' ');\n    }\n\n    addOptionGroup() {\n        this.optionGroups.push({\n            isNew: true,\n            locked: false,\n            name: '',\n            values: [],\n        });\n        this.optionsChanged = true;\n    }\n\n    removeOptionGroup(optionGroup: OptionGroupUiModel) {\n        const id = optionGroup.id;\n        if (optionGroup.isNew) {\n            this.optionGroups = this.optionGroups.filter(og => og !== optionGroup);\n            this.generateVariants();\n            this.optionsChanged = true;\n        } else if (id) {\n            this.modalService\n                .dialog({\n                    title: _('catalog.confirm-delete-product-option-group'),\n                    translationVars: { name: optionGroup.name },\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        { type: 'danger', label: _('common.delete'), returnValue: true },\n                    ],\n                })\n                .pipe(\n                    switchMap(val => {\n                        if (val) {\n                            return this.dataService.product.removeOptionGroupFromProduct({\n                                optionGroupId: id,\n                                productId: this.product.id,\n                            });\n                        } else {\n                            return EMPTY;\n                        }\n                    }),\n                )\n                .subscribe(({ removeOptionGroupFromProduct }) => {\n                    if (removeOptionGroupFromProduct.__typename === 'Product') {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'ProductOptionGroup',\n                        });\n                        this.initOptionsAndVariants();\n                        this.optionsChanged = true;\n                    } else if (removeOptionGroupFromProduct.__typename === 'ProductOptionInUseError') {\n                        this.notificationService.error(removeOptionGroupFromProduct.message ?? '');\n                    }\n                });\n        }\n    }\n\n    addOption(index: number, optionName: string) {\n        const group = this.optionGroups[index];\n        if (group) {\n            group.values.push({ name: optionName, locked: false });\n            this.generateVariants();\n            this.optionsChanged = true;\n        }\n    }\n\n    removeOption(index: number, { id, name }: { id?: string; name: string }) {\n        const optionGroup = this.optionGroups[index];\n        if (optionGroup) {\n            if (!id) {\n                optionGroup.values = optionGroup.values.filter(v => v.name !== name);\n                this.generateVariants();\n            } else {\n                this.modalService\n                    .dialog({\n                        title: _('catalog.confirm-delete-product-option'),\n                        translationVars: { name },\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\n                        ],\n                    })\n                    .pipe(\n                        switchMap(val => {\n                            if (val) {\n                                return this.dataService.product.deleteProductOption(id);\n                            } else {\n                                return EMPTY;\n                            }\n                        }),\n                    )\n                    .subscribe(({ deleteProductOption }) => {\n                        if (deleteProductOption.result === DeletionResult.DELETED) {\n                            this.notificationService.success(_('common.notify-delete-success'), {\n                                entity: 'ProductOption',\n                            });\n                            optionGroup.values = optionGroup.values.filter(v => v.id !== id);\n                            this.generateVariants();\n                            this.optionsChanged = true;\n                        } else {\n                            this.notificationService.error(deleteProductOption.message ?? '');\n                        }\n                    });\n            }\n        }\n    }\n\n    generateVariants() {\n        const groups = this.optionGroups.map(g => g.values);\n        const previousVariants = this.generatedVariants;\n        const generatedVariantFactory = (\n            isDefault: boolean,\n            options: GeneratedVariant['options'],\n            existingVariant?: GetProductVariantOptions.Variants,\n            prototypeVariant?: GetProductVariantOptions.Variants,\n        ): GeneratedVariant => {\n            const prototype = this.getVariantPrototype(options, previousVariants);\n            return new GeneratedVariant({\n                enabled: true,\n                existing: !!existingVariant,\n                productVariantId: existingVariant?.id,\n                isDefault,\n                options,\n                price: existingVariant?.price ?? prototypeVariant?.price ?? prototype.price,\n                sku: existingVariant?.sku ?? prototypeVariant?.sku ?? prototype.sku,\n                stock: existingVariant?.stockOnHand ?? prototypeVariant?.stockOnHand ?? prototype.stock,\n            });\n        };\n        this.generatedVariants = groups.length\n            ? generateAllCombinations(groups).map(options => {\n                  const existingVariant = this.product.variants.find(v =>\n                      this.optionsAreEqual(v.options, options),\n                  );\n                  const prototypeVariant = this.product.variants.find(v =>\n                      this.optionsAreSubset(v.options, options),\n                  );\n                  return generatedVariantFactory(false, options, existingVariant, prototypeVariant);\n              })\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\n    }\n\n    /**\n     * Returns one of the existing variants to base the newly-generated variant's\n     * details off.\n     */\n    private getVariantPrototype(\n        options: GeneratedVariant['options'],\n        previousVariants: GeneratedVariant[],\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\n        );\n        if (variantsWithSimilarOptions.length) {\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\n        }\n        return {\n            sku: '',\n            price: 0,\n            stock: 0,\n        };\n    }\n\n    deleteVariant(id: string, options: GeneratedVariant['options']) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product-variant'),\n                translationVars: { name: options.map(o => o.name).join(' ') },\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\n                ),\n                switchMap(() => this.reFetchProduct(null)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ProductVariant',\n                    });\n                    this.initOptionsAndVariants();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ProductVariant',\n                    });\n                },\n            );\n    }\n\n    save() {\n        this.optionGroups = this.optionGroups.filter(g => g.values.length);\n        const newOptionGroups = this.optionGroups\n            .filter(og => og.isNew)\n            .map(og => ({\n                name: og.name,\n                values: [],\n            }));\n\n        this.checkUniqueSkus()\n            .pipe(\n                mergeMap(() => this.confirmDeletionOfObsoleteVariants()),\n                mergeMap(() =>\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\n                ),\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\n                mergeMap(groups => this.createNewProductVariants(groups)),\n                mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)),\n                mergeMap(variants => this.reFetchProduct(variants)),\n            )\n            .subscribe({\n                next: variants => {\n                    this.formValueChanged = false;\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\n                        count: variants.length,\n                    });\n                    this.initOptionsAndVariants();\n                    this.optionsChanged = false;\n                },\n            });\n    }\n\n    private checkUniqueSkus() {\n        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {\n            return (\n                variant.enabled &&\n                this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant)\n            );\n        });\n        if (withDuplicateSkus.length) {\n            return this.modalService\n                .dialog({\n                    title: _('catalog.duplicate-sku-warning'),\n                    body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),\n                    buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],\n                })\n                .pipe(mergeMap(res => EMPTY));\n        } else {\n            return of(true);\n        }\n    }\n\n    private confirmDeletionOfObsoleteVariants(): Observable<boolean> {\n        const obsoleteVariants = this.getObsoleteVariants();\n        if (obsoleteVariants.length) {\n            return this.modalService\n                .fromComponent(ConfirmVariantDeletionDialogComponent, {\n                    locals: {\n                        variants: obsoleteVariants,\n                    },\n                })\n                .pipe(\n                    mergeMap(res => {\n                        return res === true ? of(true) : EMPTY;\n                    }),\n                );\n        } else {\n            return of(true);\n        }\n    }\n\n    private getObsoleteVariants() {\n        return this.product.variants.filter(\n            variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id),\n        );\n    }\n\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\n        return product.variants.length === 1 && product.optionGroups.length === 0;\n    }\n\n    private addOptionGroupsToProduct(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\n        if (createdOptionGroups.length) {\n            return forkJoin(\n                createdOptionGroups.map(optionGroup => {\n                    return this.dataService.product.addOptionGroupToProduct({\n                        productId: this.product.id,\n                        optionGroupId: optionGroup.id,\n                    });\n                }),\n            ).pipe(map(() => createdOptionGroups));\n        } else {\n            return of([]);\n        }\n    }\n\n    private addNewOptionsToGroups(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<string[]> {\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\n            .map(og => {\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\n                if (!productOptionGroupId) {\n                    throw new Error('Could not get a productOptionGroupId');\n                }\n                return og.values\n                    .filter(v => !v.locked)\n                    .map(v => ({\n                        productOptionGroupId,\n                        code: normalizeString(v.name, '-'),\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\n                    }));\n            })\n            .reduce((flat, options) => [...flat, ...options], []);\n\n        const allGroupIds = [\n            ...createdOptionGroups.map(g => g.id),\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\n        ];\n\n        if (newOptions.length) {\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\n                map(() => allGroupIds),\n            );\n        } else {\n            return of(allGroupIds);\n        }\n    }\n\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\n        return forkJoin(\n            groupsIds.map(id =>\n                this.dataService.product\n                    .getProductOptionGroup(id)\n                    .mapSingle(data => data.productOptionGroup)\n                    .pipe(filter(notNullOrUndefined)),\n            ),\n        ).pipe(defaultIfEmpty([] as ProductOptionGroupWithOptionsFragment[]));\n    }\n\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\n        const options = groups\n            .filter(notNullOrUndefined)\n            .map(og => og.options)\n            .reduce((flat, o) => [...flat, ...o], []);\n        const variants = this.generatedVariants\n            .filter(v => v.enabled && !v.existing)\n            .map(v => {\n                const optionIds = groups.map((group, index) => {\n                    const option = group.options.find(o => o.name === v.options[index].name);\n                    if (option) {\n                        return option.id;\n                    } else {\n                        throw new Error(`Could not find a matching option for group ${group.name}`);\n                    }\n                });\n                return {\n                    price: v.price,\n                    sku: v.sku,\n                    stock: v.stock,\n                    optionIds,\n                };\n            });\n        return this.productDetailService.createProductVariants(\n            this.product,\n            variants,\n            options,\n            this.languageCode,\n        );\n    }\n\n    private deleteObsoleteVariants<T>(input: T): Observable<T> {\n        const obsoleteVariants = this.getObsoleteVariants();\n        if (obsoleteVariants.length) {\n            const deleteOperations = obsoleteVariants.map(v =>\n                this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)),\n            );\n            return forkJoin(...deleteOperations);\n        } else {\n            return of(input);\n        }\n    }\n\n    private reFetchProduct<T>(input: T): Observable<T> {\n        // Re-fetch the Product to force an update to the view.\n        const id = this.route.snapshot.paramMap.get('id');\n        if (id) {\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\n        } else {\n            return of(input);\n        }\n    }\n\n    initOptionsAndVariants() {\n        this.dataService.product\n            // tslint:disable-next-line:no-non-null-assertion\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\n            // tslint:disable-next-line:no-non-null-assertion\n            .mapSingle(({ product }) => product!)\n            .subscribe(p => {\n                this.product = p;\n                const allUsedOptionIds = p.variants.map(v => v.options.map(option => option.id)).flat();\n                const allUsedOptionGroupIds = p.variants\n                    .map(v => v.options.map(option => option.groupId))\n                    .flat();\n                this.optionGroups = p.optionGroups.map(og => {\n                    return {\n                        id: og.id,\n                        isNew: false,\n                        name: og.name,\n                        locked: allUsedOptionGroupIds.includes(og.id),\n                        values: og.options.map(o => ({\n                            id: o.id,\n                            name: o.name,\n                            locked: allUsedOptionIds.includes(o.id),\n                        })),\n                    };\n                });\n                this.generateVariants();\n            });\n    }\n\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\n        return this.toOptionString(a) === this.toOptionString(b);\n    }\n\n    private optionsAreSubset(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\n        return this.toOptionString(b).includes(this.toOptionString(a));\n    }\n\n    private toOptionString(o: Array<{ name: string }>): string {\n        return o\n            .map(x => x.name)\n            .sort()\n            .join('|');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Asset' as const,\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                type: AssetType.IMAGE,\n                fileSize: 0,\n                mimeType: '',\n                width: 0,\n                height: 0,\n                source: '',\n                preview: '',\n                focalPoint: null,\n            },\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, Collection, DataService, getDefaultUiLanguage } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Collection' as 'Collection',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                isPrivate: false,\n                breadcrumbs: [],\n                description: '',\n                featuredAsset: null,\n                assets: [],\n                translations: [],\n                filters: [],\n                parent: {} as any,\n                children: null,\n            },\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { FacetWithValues } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Facet' as 'Facet',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                isPrivate: false,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                code: '',\n                translations: [],\n                values: [],\n            },\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    BaseEntityResolver,\n    DataService,\n    getDefaultUiLanguage,\n    GetProductWithVariants,\n} from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductResolver extends BaseEntityResolver<GetProductWithVariants.Product> {\n    constructor(dataService: DataService, router: Router) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                enabled: true,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                featuredAsset: null,\n                assets: [],\n                description: '',\n                translations: [],\n                optionGroups: [],\n                facetValues: [],\n                variantList: { items: [], totalItems: 0 },\n                channels: [],\n            },\n            id =>\n                dataService.product\n                    .getProduct(id, { take: 10 })\n                    .refetchOnChannelChange()\n                    .mapStream(data => data.product),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                optionGroups: [],\n                variants: [],\n            },\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    CanDeactivateDetailGuard,\n    Collection,\n    createResolveData,\n    detailBreadcrumb,\n    FacetWithValues,\n    GetProductWithVariants,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { AssetResolver } from './providers/routing/asset-resolver';\nimport { CollectionResolver } from './providers/routing/collection-resolver';\nimport { FacetResolver } from './providers/routing/facet-resolver';\nimport { ProductResolver } from './providers/routing/product-resolver';\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\n\nexport const catalogRoutes: Route[] = [\n    {\n        path: 'products',\n        component: ProductListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.products'),\n        },\n    },\n    {\n        path: 'products/:id',\n        component: ProductDetailComponent,\n        resolve: createResolveData(ProductResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productBreadcrumb,\n        },\n    },\n    {\n        path: 'products/:id/manage-variants',\n        component: ProductVariantsEditorComponent,\n        resolve: createResolveData(ProductVariantsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productVariantEditorBreadcrumb,\n        },\n    },\n    {\n        path: 'products/:id/options',\n        component: ProductOptionsEditorComponent,\n        resolve: createResolveData(ProductVariantsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productOptionsEditorBreadcrumb,\n        },\n    },\n    {\n        path: 'facets',\n        component: FacetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.facets'),\n        },\n    },\n    {\n        path: 'facets/:id',\n        component: FacetDetailComponent,\n        resolve: createResolveData(FacetResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: facetBreadcrumb,\n        },\n    },\n    {\n        path: 'collections',\n        component: CollectionListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.collections'),\n        },\n    },\n    {\n        path: 'collections/:id',\n        component: CollectionDetailComponent,\n        resolve: createResolveData(CollectionResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: collectionBreadcrumb,\n        },\n    },\n    {\n        path: 'assets',\n        component: AssetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.assets'),\n        },\n    },\n    {\n        path: 'assets/:id',\n        component: AssetDetailComponent,\n        resolve: createResolveData(AssetResolver),\n        data: {\n            breadcrumb: assetBreadcrumb,\n        },\n    },\n];\n\nexport function productBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<GetProductWithVariants.Product>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.products',\n        getName: product => product.name,\n        route: 'products',\n    });\n}\n\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\n    return data.entity.pipe(\n        map((entity: any) => {\n            return [\n                {\n                    label: _('breadcrumb.products'),\n                    link: ['../', 'products'],\n                },\n                {\n                    label: `${entity.name}`,\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\n                },\n                {\n                    label: _('breadcrumb.manage-variants'),\n                    link: ['manage-variants'],\n                },\n            ];\n        }),\n    );\n}\n\nexport function productOptionsEditorBreadcrumb(data: any, params: any) {\n    return data.entity.pipe(\n        map((entity: any) => {\n            return [\n                {\n                    label: _('breadcrumb.products'),\n                    link: ['../', 'products'],\n                },\n                {\n                    label: `${entity.name}`,\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\n                },\n                {\n                    label: _('breadcrumb.product-options'),\n                    link: ['options'],\n                },\n            ];\n        }),\n    );\n}\n\nexport function facetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<FacetWithValues.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.facets',\n        getName: facet => facet.name,\n        route: 'facets',\n    });\n}\n\nexport function collectionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Collection.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.collections',\n        getName: collection => collection.name,\n        route: 'collections',\n    });\n}\n\nexport function assetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Asset.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.assets',\n        getName: asset => asset.name,\n        route: 'assets',\n    });\n}\n","<ng-template vdrDialogTitle>\n    {{ 'catalog.assign-to-channel' | translate }}\n</ng-template>\n<clr-input-container class=\"mb4\">\n    <label>{{ 'common.channel' | translate }}</label>\n    <vdr-channel-assignment-control\n        clrInput\n        [multiple]=\"false\"\n        [includeDefaultChannel]=\"false\"\n        [formControl]=\"selectedChannelIdControl\"\n    ></vdr-channel-assignment-control>\n</clr-input-container>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DataService, Dialog, GetChannels, NotificationService } from '@vendure/admin-ui/core';\nimport { combineLatest } from 'rxjs';\n\n@Component({\n    selector: 'vdr-assign-to-channel-dialog',\n    templateUrl: './assign-to-channel-dialog.component.html',\n    styleUrls: ['./assign-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignToChannelDialogComponent implements OnInit, Dialog<GetChannels.Channels> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: GetChannels.Channels) => void;\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            this.resolveWith(selectedChannel);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { gql } from 'apollo-angular';\n\nexport const GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS = gql`\n    query GetProductsWithFacetValuesByIds($ids: [String!]!) {\n        products(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_VARIANTS_WITH_FACET_VALUES_BY_IDS = gql`\n    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {\n        productVariants(options: { filter: { id: { in: $ids } } }) {\n            items {\n                id\n                name\n                sku\n                facetValues {\n                    id\n                    name\n                    code\n                    facet {\n                        id\n                        name\n                        code\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport const UPDATE_PRODUCTS_BULK = gql`\n    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {\n        updateProducts(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n`;\n\nexport const UPDATE_VARIANTS_BULK = gql`\n    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {\n        updateProductVariants(input: $input) {\n            id\n            name\n            facetValues {\n                id\n                name\n                code\n            }\n        }\n    }\n`;\n","<ng-template vdrDialogTitle>\n    {{ 'catalog.edit-facet-values' | translate }}\n</ng-template>\n\n<div class=\"flex\">\n    <div class=\"flex center\">\n        <div class=\"mr2\">\n            {{ 'catalog.add-facet-value' | translate }}\n        </div>\n        <vdr-facet-value-selector\n            [facets]=\"facets\"\n            (selectedValuesChange)=\"selectedValues = $event\"\n        ></vdr-facet-value-selector>\n    </div>\n</div>\n\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\n    <tbody>\n        <tr *ngFor=\"let item of items\">\n            <td class=\"left align-middle\">\n                <div>{{ item.name }}</div>\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\n            </td>\n            <td class=\"left\">\n                <vdr-facet-value-chip\n                    *ngFor=\"let facetValue of item.facetValues\"\n                    [facetValue]=\"facetValue\"\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\n                ></vdr-facet-value-chip>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<ng-template #placeholder>\n    <div class=\"loading\">\n    <clr-spinner></clr-spinner>\n    </div>\n</ng-template>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"addFacetValues()\"\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n    DataService,\n    Dialog,\n    FacetWithValuesFragment,\n    GetProductsWithFacetValuesByIdsQuery,\n    GetProductsWithFacetValuesByIdsQueryVariables,\n    GetVariantsWithFacetValuesByIdsQuery,\n    UpdateProductsBulkMutation,\n    UpdateProductsBulkMutationVariables,\n    UpdateVariantsBulkMutation,\n    UpdateVariantsBulkMutationVariables,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable, Subscription } from 'rxjs';\nimport { shareReplay, switchMap } from 'rxjs/operators';\n\nimport {\n    GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS,\n    GET_VARIANTS_WITH_FACET_VALUES_BY_IDS,\n    UPDATE_PRODUCTS_BULK,\n    UPDATE_VARIANTS_BULK,\n} from './bulk-add-facet-values-dialog.graphql';\n\ninterface ProductOrVariant {\n    id: string;\n    name: string;\n    sku?: string;\n    facetValues: Array<{\n        id: string;\n        name: string;\n        code: string;\n        facet: Array<{\n            id: string;\n            name: string;\n            code: string;\n        }>;\n    }>;\n}\n\n@Component({\n    selector: 'vdr-bulk-add-facet-values-dialog',\n    templateUrl: './bulk-add-facet-values-dialog.component.html',\n    styleUrls: ['./bulk-add-facet-values-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BulkAddFacetValuesDialogComponent\n    implements OnInit, OnDestroy, Dialog<FacetWithValuesFragment[]>\n{\n    resolveWith: (result?: FacetWithValuesFragment[]) => void;\n    /* provided by call to ModalService */\n    mode: 'product' | 'variant' = 'product';\n    ids?: string[];\n    facets: FacetWithValuesFragment[] = [];\n    state: 'loading' | 'ready' | 'saving' = 'loading';\n\n    selectedValues: FacetWithValuesFragment[] = [];\n    items: ProductOrVariant[] = [];\n    facetValuesRemoved = false;\n    private subscription: Subscription;\n    constructor(private dataService: DataService, private changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        const fetchData$: Observable<any> =\n            this.mode === 'product'\n                ? this.dataService\n                      .query<\n                          GetProductsWithFacetValuesByIdsQuery,\n                          GetProductsWithFacetValuesByIdsQueryVariables\n                      >(GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, {\n                          ids: this.ids ?? [],\n                      })\n                      .mapSingle(({ products }) =>\n                          products.items.map(p => ({ ...p, facetValues: [...p.facetValues] })),\n                      )\n                : this.dataService\n                      .query<\n                          GetVariantsWithFacetValuesByIdsQuery,\n                          GetProductsWithFacetValuesByIdsQueryVariables\n                      >(GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, {\n                          ids: this.ids ?? [],\n                      })\n                      .mapSingle(({ productVariants }) =>\n                          productVariants.items.map(p => ({ ...p, facetValues: [...p.facetValues] })),\n                      );\n        this.subscription = fetchData$.subscribe({\n            next: items => {\n                this.items = items;\n                this.state = 'ready';\n                this.changeDetectorRef.markForCheck();\n            },\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    removeFacetValue(item: ProductOrVariant, facetValueId: string) {\n        item.facetValues = item.facetValues.filter(fv => fv.id !== facetValueId);\n        this.facetValuesRemoved = true;\n    }\n\n    addFacetValues() {\n        const selectedFacetValueIds = this.selectedValues.map(sv => sv.id);\n        this.state = 'saving';\n        const save$: Observable<any> =\n            this.mode === 'product'\n                ? this.dataService.mutate<UpdateProductsBulkMutation, UpdateProductsBulkMutationVariables>(\n                      UPDATE_PRODUCTS_BULK,\n                      {\n                          input: this.items?.map(product => ({\n                              id: product.id,\n                              facetValueIds: unique([\n                                  ...product.facetValues.map(fv => fv.id),\n                                  ...selectedFacetValueIds,\n                              ]),\n                          })),\n                      },\n                  )\n                : this.dataService.mutate<UpdateVariantsBulkMutation, UpdateVariantsBulkMutationVariables>(\n                      UPDATE_VARIANTS_BULK,\n                      {\n                          input: this.items?.map(product => ({\n                              id: product.id,\n                              facetValueIds: unique([\n                                  ...product.facetValues.map(fv => fv.id),\n                                  ...selectedFacetValueIds,\n                              ]),\n                          })),\n                      },\n                  );\n        return save$.subscribe(result => {\n            this.resolveWith(this.selectedValues);\n        });\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkAction,\n    currentChannelIsNotDefault,\n    DataService,\n    DeletionResult,\n    getChannelCodeFromUserStatus,\n    isMultiChannel,\n    ModalService,\n    NotificationService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, from, of } from 'rxjs';\nimport { mapTo, switchMap } from 'rxjs/operators';\n\nimport { AssignToChannelDialogComponent } from '../assign-to-channel-dialog/assign-to-channel-dialog.component';\nimport { CollectionPartial } from '../collection-tree/collection-tree.component';\n\nimport { CollectionListComponent } from './collection-list.component';\n\nexport const deleteCollectionsBulkAction: BulkAction<CollectionPartial, CollectionListComponent> = {\n    location: 'collection-list',\n    label: _('common.delete'),\n    icon: 'trash',\n    iconClass: 'is-danger',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.DeleteCollection) ||\n        userPermissions.includes(Permission.DeleteCatalog),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n\n        modalService\n            .dialog({\n                title: _('catalog.confirm-bulk-delete-collections'),\n                translationVars: {\n                    count: selection.length,\n                },\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? dataService.collection.deleteCollections(unique(selection.map(c => c.id)))\n                        : EMPTY,\n                ),\n            )\n            .subscribe(result => {\n                let deleted = 0;\n                const errors: string[] = [];\n                for (const item of result.deleteCollections) {\n                    if (item.result === DeletionResult.DELETED) {\n                        deleted++;\n                    } else if (item.message) {\n                        errors.push(item.message);\n                    }\n                }\n                if (0 < deleted) {\n                    notificationService.success(_('catalog.notify-bulk-delete-collections-success'), {\n                        count: deleted,\n                    });\n                }\n                if (0 < errors.length) {\n                    notificationService.error(errors.join('\\n'));\n                }\n                hostComponent.refresh();\n                clearSelection();\n            });\n    },\n};\n\nexport const assignCollectionsToChannelBulkAction: BulkAction<CollectionPartial, CollectionListComponent> = {\n    location: 'collection-list',\n    label: _('catalog.assign-to-channel'),\n    icon: 'layers',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateCatalog) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .fromComponent(AssignToChannelDialogComponent, {\n                size: 'md',\n                locals: {},\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return dataService.collection\n                            .assignCollectionsToChannel({\n                                collectionIds: selection.map(c => c.id),\n                                channelId: result.id,\n                            })\n                            .pipe(mapTo(result));\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                notificationService.success(_('catalog.assign-collections-to-channel-success'), {\n                    count: selection.length,\n                    channelCode: result.code,\n                });\n                clearSelection();\n            });\n    },\n};\n\nexport const removeCollectionsFromChannelBulkAction: BulkAction<CollectionPartial, CollectionListComponent> =\n    {\n        location: 'collection-list',\n        label: _('catalog.remove-from-channel'),\n        requiresPermission: userPermissions =>\n            userPermissions.includes(Permission.UpdateChannel) ||\n            userPermissions.includes(Permission.UpdateProduct),\n        getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\n        icon: 'layers',\n        iconClass: 'is-warning',\n        isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\n        onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n            const modalService = injector.get(ModalService);\n            const dataService = injector.get(DataService);\n            const notificationService = injector.get(NotificationService);\n            const activeChannelId$ = dataService.client\n                .userStatus()\n                .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n\n            from(getChannelCodeFromUserStatus(injector.get(DataService)))\n                .pipe(\n                    switchMap(({ channelCode }) =>\n                        modalService.dialog({\n                            title: _('catalog.remove-from-channel'),\n                            translationVars: {\n                                channelCode,\n                            },\n                            buttons: [\n                                { type: 'secondary', label: _('common.cancel') },\n                                {\n                                    type: 'danger',\n                                    label: _('common.remove'),\n                                    returnValue: true,\n                                },\n                            ],\n                        }),\n                    ),\n                    switchMap(res =>\n                        res\n                            ? activeChannelId$.pipe(\n                                  switchMap(activeChannelId =>\n                                      activeChannelId\n                                          ? dataService.collection.removeCollectionsFromChannel({\n                                                channelId: activeChannelId,\n                                                collectionIds: selection.map(c => c.id),\n                                            })\n                                          : EMPTY,\n                                  ),\n                                  mapTo(true),\n                              )\n                            : of(false),\n                    ),\n                )\n                .subscribe(removed => {\n                    if (removed) {\n                        clearSelection();\n                        notificationService.success(\n                            _('catalog.notify-remove-collections-from-channel-success'),\n                            {\n                                count: selection.length,\n                            },\n                        );\n                        hostComponent.refresh();\n                    }\n                });\n        },\n    };\n","<div\n    cdkDropList\n    class=\"tree-node\"\n    #dropList\n    [cdkDropListData]=\"collectionTree\"\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\n    (cdkDropListDropped)=\"drop($event)\"\n>\n    <div\n        class=\"collection\"\n        [class.private]=\"collection.isPrivate\"\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\n        cdkDrag\n        [cdkDragData]=\"collection\"\n    >\n        <div\n            class=\"collection-detail\"\n            [ngClass]=\"'depth-' + depth\"\n            [class.active]=\"collection.id === activeCollectionId\"\n        >\n            <div>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [checked]=\"selectionManager.isSelected(collection)\"\n                    (click)=\"selectionManager.toggleSelection(collection, $event)\"\n                />\n            </div>\n            <div class=\"name\">\n                <button\n                    class=\"icon-button folder-button\"\n                    [disabled]=\"expandAll\"\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\n                    (click)=\"toggleExpanded(collection)\"\n                >\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\n                </button>\n                <ng-template #folderSpacer>\n                    <div class=\"folder-button-spacer\"></div>\n                </ng-template>\n                {{ collection.name }}\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\n            <a\n                class=\"btn btn-link btn-sm\"\n                [routerLink]=\"['./', { contents: collection.id }]\"\n                queryParamsHandling=\"preserve\"\n            >\n                <clr-icon shape=\"view-list\"></clr-icon>\n                {{ 'catalog.view-contents' | translate }}\n            </a>\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\n                <clr-icon shape=\"edit\"></clr-icon>\n                {{ 'common.edit' | translate }}\n            </a>\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\n            </div>\n            <vdr-dropdown>\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <a\n                        class=\"dropdown-item\"\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.create-new-collection' | translate }}\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\n                        (click)=\"moveUp(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret up\"></clr-icon>\n                        {{ 'catalog.move-up' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\n                        \"\n                        (click)=\"moveDown(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                        {{ 'catalog.move-down' | translate }}\n                    </button>\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        *ngFor=\"let item of moveListItems\"\n                        (click)=\"move(collection, item.id)\"\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\n                    >\n                        <div class=\"move-to-item\">\n                            <div class=\"move-icon\">\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\n                            </div>\n                            <div class=\"path\">\n                                {{ item.path }}\n                            </div>\n                        </div>\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        class=\"button\"\n                        vdrDropdownItem\n                        (click)=\"delete(collection.id)\"\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <vdr-collection-tree-node\n            *ngIf=\"collection.expanded || expandAll\"\n            [expandAll]=\"expandAll\"\n            [collectionTree]=\"collection\"\n            [activeCollectionId]=\"activeCollectionId\"\n            [selectionManager]=\"selectionManager\"\n        ></vdr-collection-tree-node>\n    </div>\n</div>\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    SimpleChanges,\n    SkipSelf,\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService, Permission, SelectionManager } from '@vendure/admin-ui/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { RootNode, TreeNode } from './array-to-tree';\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-tree-node',\n    templateUrl: './collection-tree-node.component.html',\n    styleUrls: ['./collection-tree-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges, OnDestroy {\n    depth = 0;\n    parentName: string;\n    @Input() collectionTree: TreeNode<CollectionPartial>;\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    @Input() selectionManager: SelectionManager<CollectionPartial>;\n    hasUpdatePermission$: Observable<boolean>;\n    hasDeletePermission$: Observable<boolean>;\n    moveListItems: Array<{ path: string; id: string }> = [];\n    private subscription: Subscription;\n\n    constructor(\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\n        private root: CollectionTreeComponent,\n        private dataService: DataService,\n        private router: Router,\n        private route: ActivatedRoute,\n        private changeDetectorRef: ChangeDetectorRef,\n    ) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    ngOnInit() {\n        this.parentName = this.collectionTree.name || '<root>';\n        const permissions$ = this.dataService.client\n            .userStatus()\n            .mapStream(data => data.userStatus.permissions)\n            .pipe(shareReplay(1));\n        this.hasUpdatePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\n            ),\n        );\n        this.hasDeletePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\n            ),\n        );\n        this.subscription = this.selectionManager?.selectionChanges$.subscribe(() =>\n            this.changeDetectorRef.markForCheck(),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const expandAllChange = changes['expandAll'];\n        if (expandAllChange) {\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\n                this.collectionTree.children.forEach(c => (c.expanded = false));\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n    }\n\n    trackByFn(index: number, item: CollectionPartial) {\n        return item.id;\n    }\n\n    toggleExpanded(collection: TreeNode<CollectionPartial>) {\n        collection.expanded = !collection.expanded;\n        let expandedIds = this.route.snapshot.queryParamMap.get('expanded')?.split(',') ?? [];\n        if (collection.expanded) {\n            expandedIds.push(collection.id);\n        } else {\n            expandedIds = expandedIds.filter(id => id !== collection.id);\n        }\n        this.router.navigate(['./'], {\n            queryParams: {\n                expanded: expandedIds.filter(id => !!id).join(','),\n            },\n            queryParamsHandling: 'merge',\n            relativeTo: this.route,\n        });\n    }\n\n    getMoveListItems(collection: CollectionPartial) {\n        this.moveListItems = this.root.getMoveListItems(collection);\n    }\n\n    move(collection: CollectionPartial, parentId: string) {\n        this.root.onMove({\n            index: 0,\n            parentId,\n            collectionId: collection.id,\n        });\n    }\n\n    moveUp(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex - 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    moveDown(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex + 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\n        this.root.onDrop(event);\n    }\n\n    delete(id: string) {\n        this.root.onDelete(id);\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkAction,\n    currentChannelIsNotDefault,\n    DataService,\n    DeletionResult,\n    getChannelCodeFromUserStatus,\n    GetFacetList,\n    isMultiChannel,\n    ModalService,\n    NotificationService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, of } from 'rxjs';\nimport { map, mapTo, switchMap } from 'rxjs/operators';\n\nimport { AssignToChannelDialogComponent } from '../assign-to-channel-dialog/assign-to-channel-dialog.component';\n\nimport { FacetListComponent } from './facet-list.component';\n\nexport const deleteFacetsBulkAction: BulkAction<GetFacetList.Items, FacetListComponent> = {\n    location: 'facet-list',\n    label: _('common.delete'),\n    icon: 'trash',\n    iconClass: 'is-danger',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.DeleteFacet) ||\n        userPermissions.includes(Permission.DeleteCatalog),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n\n        function showModalAndDelete(facetIds: string[], message?: string) {\n            return modalService\n                .dialog({\n                    title: _('catalog.confirm-bulk-delete-facets'),\n                    translationVars: {\n                        count: selection.length,\n                    },\n                    size: message ? 'lg' : 'md',\n                    body: message,\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        {\n                            type: 'danger',\n                            label: message ? _('common.force-delete') : _('common.delete'),\n                            returnValue: true,\n                        },\n                    ],\n                })\n                .pipe(\n                    switchMap(res =>\n                        res\n                            ? dataService.facet\n                                  .deleteFacets(facetIds, !!message)\n                                  .pipe(map(res2 => res2.deleteFacets))\n                            : of([]),\n                    ),\n                );\n        }\n\n        showModalAndDelete(unique(selection.map(f => f.id)))\n            .pipe(\n                switchMap(result => {\n                    let deletedCount = 0;\n                    const errors: string[] = [];\n                    const errorIds: string[] = [];\n                    let i = 0;\n                    for (const item of result) {\n                        if (item.result === DeletionResult.DELETED) {\n                            deletedCount++;\n                        } else if (item.message) {\n                            errors.push(item.message);\n                            errorIds.push(selection[i]?.id);\n                        }\n                        i++;\n                    }\n                    if (0 < errorIds.length) {\n                        return showModalAndDelete(errorIds, errors.join('\\n')).pipe(\n                            map(result2 => {\n                                const deletedCount2 = result2.filter(\n                                    r => r.result === DeletionResult.DELETED,\n                                ).length;\n                                return deletedCount + deletedCount2;\n                            }),\n                        );\n                    } else {\n                        return of(deletedCount);\n                    }\n                }),\n            )\n            .subscribe(deletedCount => {\n                if (deletedCount) {\n                    hostComponent.refresh();\n                    clearSelection();\n                    notificationService.success(_('catalog.notify-bulk-delete-facets-success'), {\n                        count: deletedCount,\n                    });\n                }\n            });\n    },\n};\n\nexport const assignFacetsToChannelBulkAction: BulkAction<GetFacetList.Items, FacetListComponent> = {\n    location: 'facet-list',\n    label: _('catalog.assign-to-channel'),\n    icon: 'layers',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateFacet) ||\n        userPermissions.includes(Permission.UpdateCatalog),\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .fromComponent(AssignToChannelDialogComponent, {\n                size: 'md',\n                locals: {},\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return dataService.facet\n                            .assignFacetsToChannel({\n                                facetIds: selection.map(f => f.id),\n                                channelId: result.id,\n                            })\n                            .pipe(mapTo(result));\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                notificationService.success(_('catalog.assign-facets-to-channel-success'), {\n                    count: selection.length,\n                    channelCode: result.code,\n                });\n                clearSelection();\n            });\n    },\n};\n\nexport const removeFacetsFromChannelBulkAction: BulkAction<GetFacetList.Items, FacetListComponent> = {\n    location: 'facet-list',\n    label: _('catalog.remove-from-channel'),\n    getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\n    icon: 'layers',\n    iconClass: 'is-warning',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateFacet) ||\n        userPermissions.includes(Permission.UpdateCatalog),\n    isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n\n        const activeChannelId$ = dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n\n        function showModalAndDelete(facetIds: string[], message?: string) {\n            return modalService\n                .dialog({\n                    title: _('catalog.remove-from-channel'),\n                    translationVars: {\n                        count: selection.length,\n                    },\n                    size: message ? 'lg' : 'md',\n                    body: message,\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        {\n                            type: 'danger',\n                            label: message ? _('common.force-remove') : _('common.remove'),\n                            returnValue: true,\n                        },\n                    ],\n                })\n                .pipe(\n                    switchMap(res =>\n                        res\n                            ? activeChannelId$.pipe(\n                                  switchMap(activeChannelId =>\n                                      activeChannelId\n                                          ? dataService.facet.removeFacetsFromChannel({\n                                                channelId: activeChannelId,\n                                                facetIds,\n                                                force: !!message,\n                                            })\n                                          : EMPTY,\n                                  ),\n                                  map(res2 => res2.removeFacetsFromChannel),\n                              )\n                            : EMPTY,\n                    ),\n                );\n        }\n\n        showModalAndDelete(unique(selection.map(f => f.id)))\n            .pipe(\n                switchMap(result => {\n                    let removedCount = selection.length;\n                    const errors: string[] = [];\n                    const errorIds: string[] = [];\n                    let i = 0;\n                    for (const item of result) {\n                        if (item.__typename === 'FacetInUseError') {\n                            errors.push(item.message);\n                            errorIds.push(selection[i]?.id);\n                            removedCount--;\n                        }\n                        i++;\n                    }\n                    if (0 < errorIds.length) {\n                        return showModalAndDelete(errorIds, errors.join('\\n')).pipe(\n                            map(result2 => {\n                                const notRemovedCount = result2.filter(\n                                    r => r.__typename === 'FacetInUseError',\n                                ).length;\n                                return selection.length - notRemovedCount;\n                            }),\n                        );\n                    } else {\n                        return of(removedCount);\n                    }\n                }),\n                switchMap(removedCount =>\n                    removedCount\n                        ? getChannelCodeFromUserStatus(dataService).then(({ channelCode }) => ({\n                              channelCode,\n                              removedCount,\n                          }))\n                        : EMPTY,\n                ),\n            )\n            .subscribe(({ removedCount, channelCode }) => {\n                if (removedCount) {\n                    hostComponent.refresh();\n                    clearSelection();\n                    notificationService.success(_('catalog.notify-remove-facets-from-channel-success'), {\n                        count: removedCount,\n                        channelCode,\n                    });\n                }\n            });\n    },\n};\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input\n            #optionGroupName\n            placeholder=\"e.g. Size\"\n            clrInput\n            [(ngModel)]=\"group.name\"\n            name=\"name\"\n            required\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\n        />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            (edit)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n    <div class=\"remove-group\">\n        <button\n            class=\"btn btn-icon btn-warning-outline\"\n            [title]=\"'catalog.remove-option' | translate\"\n            (click)=\"removeOption(group.name)\"\n        >\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            </tr>\n        </thead>\n        <tr\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\n        >\n            <td *ngIf=\"1 < variants.length\">\n                <input\n                    type=\"checkbox\"\n                    (change)=\"onFormChange()\"\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\n                    clrCheckbox\n                />\n            </td>\n            <td *ngIf=\"1 < variants.length\">\n                {{ variant.values.join(' ') }}\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"text\"\n                        (change)=\"onFormChange()\"\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\n                        [placeholder]=\"'catalog.sku' | translate\"\n                    />\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <vdr-currency-input\n                        clrInput\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\n                        (ngModelChange)=\"onFormChange()\"\n                        [currencyCode]=\"currencyCode\"\n                    ></vdr-currency-input>\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"number\"\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\n                        (change)=\"onFormChange()\"\n                        min=\"0\"\n                        step=\"1\"\n                    />\n                </clr-input-container>\n            </td>\n        </tr>\n    </table>\n</div>\n","import { Component, ElementRef, EventEmitter, OnInit, Output, QueryList, ViewChildren } from '@angular/core';\nimport { CurrencyCode, DataService } from '@vendure/admin-ui/core';\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\n\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\n\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\nexport type CreateVariantValues = {\n    optionValues: string[];\n    enabled: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n};\nexport type CreateProductVariantsConfig = {\n    groups: Array<{ name: string; values: string[] }>;\n    variants: CreateVariantValues[];\n};\n\n@Component({\n    selector: 'vdr-generate-product-variants',\n    templateUrl: './generate-product-variants.component.html',\n    styleUrls: ['./generate-product-variants.component.scss'],\n})\nexport class GenerateProductVariantsComponent implements OnInit {\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\n    @ViewChildren('optionGroupName', { read: ElementRef }) groupNameInputs: QueryList<ElementRef>;\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\n    currencyCode: CurrencyCode;\n    variants: Array<{ id: string; values: string[] }>;\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n\n        this.generateVariants();\n    }\n\n    addOption() {\n        this.optionGroups.push({ name: '', values: [] });\n        const index = this.optionGroups.length - 1;\n        setTimeout(() => {\n            const input = this.groupNameInputs.get(index)?.nativeElement;\n            input?.focus();\n        });\n    }\n\n    removeOption(name: string) {\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\n        this.generateVariants();\n    }\n\n    generateVariants() {\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\n        const groups = totalValuesCount\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\n            : [[DEFAULT_VARIANT_CODE]];\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\n\n        this.variants.forEach(variant => {\n            if (!this.variantFormValues[variant.id]) {\n                this.variantFormValues[variant.id] = {\n                    optionValues: variant.values,\n                    enabled: true,\n                    price: this.copyFromDefault(variant.id, 'price', 0),\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\n                };\n            }\n        });\n        this.onFormChange();\n    }\n\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\n        return variant.values.join('|');\n    }\n\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\n        event.preventDefault();\n        event.stopPropagation();\n        optionValueInputComponent.focus();\n    }\n\n    onFormChange() {\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\n        this.variantsChange.emit({\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\n            variants: variantsToCreate,\n        });\n    }\n\n    private copyFromDefault<T extends keyof CreateVariantValues>(\n        variantId: string,\n        prop: T,\n        value: CreateVariantValues[T],\n    ): CreateVariantValues[T] {\n        return variantId !== DEFAULT_VARIANT_CODE\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\n            : value;\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkAction,\n    currentChannelIsNotDefault,\n    DataService,\n    DeletionResult,\n    getChannelCodeFromUserStatus,\n    isMultiChannel,\n    ModalService,\n    NotificationService,\n    Permission,\n    SearchProducts,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\nimport { EMPTY, from, of } from 'rxjs';\nimport { mapTo, switchMap } from 'rxjs/operators';\n\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { BulkAddFacetValuesDialogComponent } from '../bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\n\nimport { ProductListComponent } from './product-list.component';\n\nexport const deleteProductsBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('common.delete'),\n    icon: 'trash',\n    iconClass: 'is-danger',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.DeleteProduct) ||\n        userPermissions.includes(Permission.DeleteCatalog),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .dialog({\n                title: _('catalog.confirm-bulk-delete-products'),\n                translationVars: {\n                    count: selection.length,\n                },\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? dataService.product.deleteProducts(unique(selection.map(p => p.productId)))\n                        : EMPTY,\n                ),\n            )\n            .subscribe(result => {\n                let deleted = 0;\n                const errors: string[] = [];\n                for (const item of result.deleteProducts) {\n                    if (item.result === DeletionResult.DELETED) {\n                        deleted++;\n                    } else if (item.message) {\n                        errors.push(item.message);\n                    }\n                }\n                if (0 < deleted) {\n                    notificationService.success(_('catalog.notify-bulk-delete-products-success'), {\n                        count: deleted,\n                    });\n                }\n                if (0 < errors.length) {\n                    notificationService.error(errors.join('\\n'));\n                }\n                hostComponent.refresh();\n                clearSelection();\n            });\n    },\n};\n\nexport const assignProductsToChannelBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('catalog.assign-to-channel'),\n    icon: 'layers',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateCatalog) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        modalService\n            .fromComponent(AssignProductsToChannelDialogComponent, {\n                size: 'lg',\n                locals: {\n                    productIds: unique(selection.map(p => p.productId)),\n                    currentChannelIds: [],\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    clearSelection();\n                }\n            });\n    },\n};\n\nexport const removeProductsFromChannelBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('catalog.remove-from-channel'),\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateChannel) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\n    icon: 'layers',\n    iconClass: 'is-warning',\n    isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        const activeChannelId$ = dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n\n        from(getChannelCodeFromUserStatus(injector.get(DataService)))\n            .pipe(\n                switchMap(({ channelCode }) =>\n                    modalService.dialog({\n                        title: _('catalog.remove-from-channel'),\n                        translationVars: {\n                            channelCode,\n                        },\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            {\n                                type: 'danger',\n                                label: _('common.remove'),\n                                returnValue: true,\n                            },\n                        ],\n                    }),\n                ),\n                switchMap(res =>\n                    res\n                        ? activeChannelId$.pipe(\n                              switchMap(activeChannelId =>\n                                  activeChannelId\n                                      ? dataService.product.removeProductsFromChannel({\n                                            channelId: activeChannelId,\n                                            productIds: selection.map(p => p.productId),\n                                        })\n                                      : EMPTY,\n                              ),\n                              mapTo(true),\n                          )\n                        : of(false),\n                ),\n            )\n            .subscribe(removed => {\n                if (removed) {\n                    clearSelection();\n                    notificationService.success(_('common.notify-remove-products-from-channel-success'), {\n                        count: selection.length,\n                    });\n                    setTimeout(() => hostComponent.refresh(), 1000);\n                }\n            });\n    },\n};\n\nexport const assignFacetValuesToProductsBulkAction: BulkAction<SearchProducts.Items, ProductListComponent> = {\n    location: 'product-list',\n    label: _('catalog.edit-facet-values'),\n    icon: 'tag',\n    requiresPermission: userPermissions =>\n        userPermissions.includes(Permission.UpdateCatalog) ||\n        userPermissions.includes(Permission.UpdateProduct),\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        const dataService = injector.get(DataService);\n        const notificationService = injector.get(NotificationService);\n        const mode: 'product' | 'variant' = hostComponent.groupByProduct ? 'product' : 'variant';\n        const ids =\n            mode === 'product'\n                ? unique(selection.map(p => p.productId))\n                : unique(selection.map(p => p.productVariantId));\n        return dataService.facet\n            .getAllFacets()\n            .mapSingle(data => data.facets.items)\n            .pipe(\n                switchMap(facets =>\n                    modalService.fromComponent(BulkAddFacetValuesDialogComponent, {\n                        size: 'xl',\n                        locals: {\n                            facets,\n                            mode,\n                            ids,\n                        },\n                    }),\n                ),\n            )\n            .subscribe(result => {\n                if (result) {\n                    notificationService.success(_('common.notify-bulk-update-success'), {\n                        count: selection.length,\n                        entity: mode === 'product' ? 'Products' : 'ProductVariants',\n                    });\n                    clearSelection();\n                }\n            });\n    },\n};\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\n    <input\n        id=\"name\"\n        type=\"text\"\n        #nameInput=\"ngModel\"\n        [(ngModel)]=\"name\"\n        required\n        (input)=\"updateCode($event.target.value)\"\n    />\n</vdr-form-field>\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\n</vdr-form-field>\n<clr-checkbox-wrapper>\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\n</clr-checkbox-wrapper>\n<section *ngIf=\"customFields.length\">\n    <label>{{ 'common.custom-fields' | translate }}</label>\n    <vdr-tabbed-custom-fields\n        entityName=\"ProductOption\"\n        [customFields]=\"customFields\"\n        [customFieldsFormGroup]=\"customFieldsForm\"\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n    ></vdr-tabbed-custom-fields>\n</section>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"update()\"\n        [disabled]=\"\n            nameInput.invalid ||\n            codeInput.invalid ||\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\n        \"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.update-product-option' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    LanguageCode,\n    ProductVariant,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\n\n@Component({\n    selector: 'vdr-update-product-option-dialog',\n    templateUrl: './update-product-option-dialog.component.html',\n    styleUrls: ['./update-product-option-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpdateProductOptionDialogComponent\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\n    updateVariantName = true;\n    // Provided by caller\n    productOption: ProductVariant.Options;\n    activeLanguage: LanguageCode;\n    name: string;\n    code: string;\n    customFields: CustomFieldConfig[];\n    codeInputTouched = false;\n    customFieldsForm: FormGroup;\n\n    ngOnInit(): void {\n        const currentTranslation = this.productOption.translations.find(\n            t => t.languageCode === this.activeLanguage,\n        );\n        this.name = currentTranslation?.name ?? '';\n        this.code = this.productOption.code;\n        this.customFieldsForm = new FormGroup({});\n        if (this.customFields) {\n            const cfCurrentTranslation =\n                (currentTranslation && (currentTranslation as any).customFields) || {};\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? cfCurrentTranslation[key]\n                        : (this.productOption as any).customFields[key];\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\n            }\n        }\n    }\n\n    update() {\n        const result = createUpdatedTranslatable({\n            translatable: this.productOption,\n            languageCode: this.activeLanguage,\n            updatedFields: {\n                code: this.code,\n                name: this.name,\n                customFields: this.customFieldsForm.value,\n            },\n            customFieldConfig: this.customFields,\n            defaultTranslation: {\n                languageCode: this.activeLanguage,\n                name: '',\n            },\n        });\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    updateCode(nameValue: string) {\n        if (!this.codeInputTouched && !this.productOption.code) {\n            this.code = normalizeString(nameValue, '-');\n        }\n    }\n}\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\n</div>\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\n    {{\n        'catalog.price-with-tax-in-default-zone'\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\n    }}\n</div>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-variant-price-detail',\n    templateUrl: './variant-price-detail.component.html',\n    styleUrls: ['./variant-price-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\n    @Input() priceIncludesTax: boolean;\n    @Input() price: number;\n    @Input() currencyCode: string;\n    @Input() taxCategoryId: string;\n\n    grossPrice$: Observable<number>;\n    taxRate$: Observable<number>;\n\n    private priceChange$ = new BehaviorSubject<number>(0);\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const taxRates$ = this.dataService.settings\n            .getTaxRatesSimple(999, 0, 'cache-first')\n            .mapStream(data => data.taxRates.items);\n        const activeChannel$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel);\n\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\n            map(([channel, taxRates, taxCategoryId]) => {\n                const defaultTaxZone = channel.defaultTaxZone;\n                if (!defaultTaxZone) {\n                    return 0;\n                }\n                const applicableRate = taxRates.find(\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\n                );\n\n                if (!applicableRate) {\n                    return 0;\n                }\n                return applicableRate.value;\n            }),\n        );\n\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\n            map(([taxRate, price]) => {\n                return Math.round(price * ((100 + taxRate) / 100));\n            }),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('price' in changes) {\n            this.priceChange$.next(changes.price.currentValue);\n        }\n        if ('taxCategoryId' in changes) {\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\n        }\n    }\n}\n","<div class=\"variants-list\">\n    <div\n        class=\"variant-container card\"\n        *ngFor=\"\n            let variant of variants | paginate: paginationConfig || { itemsPerPage: 10, currentPage: 1 };\n            trackBy: trackById;\n            let i = index\n        \"\n        [class.disabled]=\"!formGroupMap.get(variant.id)?.get('enabled')?.value\"\n    >\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n            <div class=\"card-block header-row\">\n                <div class=\"details\">\n                    <vdr-title-input class=\"sku\" [readonly]=\"!(updatePermission | hasPermission)\">\n                        <clr-input-container>\n                            <input\n                                clrInput\n                                type=\"text\"\n                                formControlName=\"sku\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                [placeholder]=\"'catalog.sku' | translate\"\n                            />\n                        </clr-input-container>\n                    </vdr-title-input>\n                    <vdr-title-input class=\"name\" [readonly]=\"!(updatePermission | hasPermission)\">\n                        <clr-input-container>\n                            <input\n                                clrInput\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                [placeholder]=\"'common.name' | translate\"\n                            />\n                        </clr-input-container>\n                    </vdr-title-input>\n                </div>\n                <div class=\"right-controls\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermission\">\n                        <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </div>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"variant-body\">\n                    <div class=\"assets\">\n                        <vdr-assets\n                            [compact]=\"true\"\n                            [assets]=\"pendingAssetChanges[variant.id]?.assets || variant.assets\"\n                            [featuredAsset]=\"\n                                pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset\n                            \"\n                            [updatePermissions]=\"updatePermission\"\n                            (change)=\"onAssetChange(variant.id, $event)\"\n                        ></vdr-assets>\n                    </div>\n                    <div class=\"variant-form-inputs\">\n                        <div class=\"standard-fields\">\n                            <div class=\"variant-form-input-row\">\n                                <div class=\"tax-category\">\n                                    <clr-select-container\n                                        *vdrIfPermissions=\"updatePermission; else taxCategoryLabel\"\n                                    >\n                                        <label>{{ 'catalog.tax-category' | translate }}</label>\n                                        <select clrSelect name=\"options\" formControlName=\"taxCategoryId\">\n                                            <option\n                                                *ngFor=\"let taxCategory of taxCategories\"\n                                                [value]=\"taxCategory.id\"\n                                            >\n                                                {{ taxCategory.name }}\n                                            </option>\n                                        </select>\n                                    </clr-select-container>\n                                    <ng-template #taxCategoryLabel>\n                                        <label class=\"clr-control-label\">{{\n                                            'catalog.tax-category' | translate\n                                        }}</label>\n                                        <div class=\"tax-category-label\">\n                                            {{ getTaxCategoryName(formGroup) }}\n                                        </div>\n                                    </ng-template>\n                                </div>\n                                <div class=\"price\">\n                                    <clr-input-container>\n                                        <label>{{ 'catalog.price' | translate }}</label>\n                                        <vdr-currency-input\n                                            *ngIf=\"!channelPriceIncludesTax\"\n                                            clrInput\n                                            [currencyCode]=\"variant.currencyCode\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            formControlName=\"price\"\n                                        ></vdr-currency-input>\n                                        <vdr-currency-input\n                                            *ngIf=\"channelPriceIncludesTax\"\n                                            clrInput\n                                            [currencyCode]=\"variant.currencyCode\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            formControlName=\"priceWithTax\"\n                                        ></vdr-currency-input>\n                                    </clr-input-container>\n                                </div>\n                                <vdr-variant-price-detail\n                                    [price]=\"formGroup.get('price')!.value\"\n                                    [currencyCode]=\"variant.currencyCode\"\n                                    [priceIncludesTax]=\"channelPriceIncludesTax\"\n                                    [taxCategoryId]=\"formGroup.get('taxCategoryId')!.value\"\n                                ></vdr-variant-price-detail>\n                            </div>\n                            <div class=\"variant-form-input-row\">\n                                <clr-select-container *vdrIfPermissions=\"updatePermission\">\n                                    <label\n                                        >{{ 'catalog.track-inventory' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.track-inventory-tooltip' | translate\"\n                                        ></vdr-help-tooltip>\n                                    </label>\n                                    <select clrSelect name=\"options\" formControlName=\"trackInventory\">\n                                        <option [value]=\"GlobalFlag.TRUE\">\n                                            {{ 'catalog.track-inventory-true' | translate }}\n                                        </option>\n                                        <option [value]=\"GlobalFlag.FALSE\">\n                                            {{ 'catalog.track-inventory-false' | translate }}\n                                        </option>\n                                        <option [value]=\"GlobalFlag.INHERIT\">\n                                            {{ 'catalog.track-inventory-inherit' | translate }}\n                                        </option>\n                                    </select>\n                                </clr-select-container>\n                                <clr-input-container>\n                                    <label\n                                        >{{ 'catalog.stock-on-hand' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-on-hand-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <input\n                                        [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\n                                        clrInput\n                                        type=\"number\"\n                                        [min]=\"getStockOnHandMinValue(formGroup)\"\n                                        step=\"1\"\n                                        formControlName=\"stockOnHand\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                        [vdrDisabled]=\"inventoryIsNotTracked(formGroup)\"\n                                    />\n                                </clr-input-container>\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.stock-allocated' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-allocated-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"value\">\n                                        {{ variant.stockAllocated }}\n                                    </div>\n                                </div>\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.stock-saleable' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-saleable-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"value\">\n                                        {{ getSaleableStockLevel(variant) }}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"variant-form-input-row\">\n                                <div\n                                    class=\"out-of-stock-threshold-wrapper\"\n                                    [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\n                                >\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.out-of-stock-threshold' | translate\n                                        }}<vdr-help-tooltip\n                                            [content]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"flex\">\n                                        <clr-input-container>\n                                            <input\n                                                clrInput\n                                                type=\"number\"\n                                                [formControl]=\"formGroup.get('outOfStockThreshold')\"\n                                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                                [vdrDisabled]=\"\n                                                    formGroup.get('useGlobalOutOfStockThreshold')?.value !==\n                                                        false || inventoryIsNotTracked(formGroup)\n                                                \"\n                                            />\n                                        </clr-input-container>\n                                        <clr-toggle-wrapper>\n                                            <input\n                                                type=\"checkbox\"\n                                                clrToggle\n                                                name=\"useGlobalOutOfStockThreshold\"\n                                                formControlName=\"useGlobalOutOfStockThreshold\"\n                                                [vdrDisabled]=\"\n                                                    !(updatePermission | hasPermission) ||\n                                                    inventoryIsNotTracked(formGroup)\n                                                \"\n                                            />\n                                            <label\n                                                >{{ 'catalog.use-global-value' | translate }} ({{\n                                                    globalOutOfStockThreshold\n                                                }})</label\n                                            >\n                                        </clr-toggle-wrapper>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"custom-fields\">\n                            <div class=\"variant-form-input-row\">\n                                <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                                    <vdr-tabbed-custom-fields\n                                        entityName=\"ProductVariant\"\n                                        [customFields]=\"customFields\"\n                                        [compact]=\"true\"\n                                        [customFieldsFormGroup]=\"formGroup.get('customFields')\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                    ></vdr-tabbed-custom-fields>\n                                </section>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"options-facets\">\n                    <vdr-entity-info [entity]=\"variant\"></vdr-entity-info>\n                    <div *ngIf=\"variant.options.length\">\n                        <div class=\"options\">\n                            <vdr-chip\n                                *ngFor=\"let option of variant.options | sort: 'groupId'\"\n                                [colorFrom]=\"optionGroupName(option.groupId)\"\n                                [invert]=\"true\"\n                                (iconClick)=\"editOption(option)\"\n                                [icon]=\"(updatePermission | hasPermission) && 'pencil'\"\n                            >\n                                <span class=\"option-group-name\">{{ optionGroupName(option.groupId) }}</span>\n                                {{ optionName(option) }}\n                            </vdr-chip>\n                            <a [routerLink]=\"['./', 'options']\" class=\"btn btn-link btn-sm\"\n                                >{{ 'catalog.edit-options' | translate }}...</a\n                            >\n                        </div>\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <div class=\"facets\">\n                        <vdr-facet-value-chip\n                            *ngFor=\"let facetValue of existingFacetValues(variant)\"\n                            [facetValue]=\"facetValue\"\n                            [removable]=\"updatePermission | hasPermission\"\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\n                        ></vdr-facet-value-chip>\n                        <vdr-facet-value-chip\n                            *ngFor=\"let facetValue of pendingFacetValues(variant)\"\n                            [facetValue]=\"facetValue\"\n                            [removable]=\"updatePermission | hasPermission\"\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\n                        ></vdr-facet-value-chip>\n                        <button\n                            *vdrIfPermissions=\"updatePermission\"\n                            class=\"btn btn-sm btn-secondary\"\n                            (click)=\"selectFacetValueClick.emit([variant.id])\"\n                        >\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'catalog.add-facets' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <ng-container *vdrIfMultichannel>\n                <div class=\"card-block\" *vdrIfDefaultChannelActive>\n                    <div class=\"flex channel-assignment\">\n                        <ng-container *ngFor=\"let channel of variant.channels\">\n                            <vdr-chip\n                                *ngIf=\"!isDefaultChannel(channel.code)\"\n                                icon=\"times-circle\"\n                                [title]=\"'catalog.remove-from-channel' | translate: { channelCode: channel.code }\"\n                                (iconClick)=\"\n                                    removeFromChannel.emit({ channelId: channel.id, variant: variant })\n                                \"\n                            >\n                                <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                                {{ channel.code | channelCodeToLabel }}\n                            </vdr-chip>\n                        </ng-container>\n                        <button class=\"btn btn-sm\" (click)=\"assignToChannel.emit(variant)\">\n                            <clr-icon shape=\"layers\"></clr-icon>\n                            {{ 'catalog.assign-to-channel' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    DataService,\n    FacetValue,\n    FacetWithValues,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    Permission,\n    ProductDetail,\n    ProductOptionFragment,\n    ProductVariant,\n    TaxCategory,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AssetChange } from '../assets/assets.component';\nimport {\n    PaginationConfig,\n    SelectedAssets,\n    VariantFormValue,\n} from '../product-detail/product-detail.component';\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\n\nexport interface VariantAssetChange extends AssetChange {\n    variantId: string;\n}\n\n@Component({\n    selector: 'vdr-product-variants-list',\n    templateUrl: './product-variants-list.component.html',\n    styleUrls: ['./product-variants-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductVariant.Fragment[];\n    @Input() paginationConfig: PaginationConfig;\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() taxCategories: TaxCategory[];\n    @Input() facets: FacetWithValues.Fragment[];\n    @Input() optionGroups: ProductDetail.OptionGroups[];\n    @Input() customFields: CustomFieldConfig[];\n    @Input() customOptionFields: CustomFieldConfig[];\n    @Input() activeLanguage: LanguageCode;\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    @Output() assignToChannel = new EventEmitter<ProductVariant.Fragment>();\n    @Output() removeFromChannel = new EventEmitter<{\n        channelId: string;\n        variant: ProductVariant.Fragment;\n    }>();\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\n    selectedVariantIds: string[] = [];\n    formGroupMap = new Map<string, FormGroup>();\n    GlobalFlag = GlobalFlag;\n    globalTrackInventory: boolean;\n    globalOutOfStockThreshold: number;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private facetValues: FacetValue.Fragment[];\n    private subscription: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private modalService: ModalService,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\n            this.globalTrackInventory = globalSettings.trackInventory;\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\n            this.changeDetector.markForCheck();\n        });\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n\n        this.subscription.add(\n            this.formArray.valueChanges\n                .pipe(\n                    map(value => value.length),\n                    debounceTime(1),\n                    distinctUntilChanged(),\n                )\n                .subscribe(() => {\n                    this.buildFormGroupMap();\n                }),\n        );\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('facets' in changes && !!changes['facets'].currentValue) {\n            this.facetValues = flattenFacetValues(this.facets);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    trackById(index: number, item: ProductVariant.Fragment) {\n        return item.id;\n    }\n\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\n        const trackInventory = formGroup.get('trackInventory')?.value;\n        return (\n            trackInventory === GlobalFlag.FALSE ||\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\n        );\n    }\n\n    getTaxCategoryName(group: FormGroup): string {\n        const control = group.get(['taxCategoryId']);\n        if (control && this.taxCategories) {\n            const match = this.taxCategories.find(t => t.id === control.value);\n            return match ? match.name : '';\n        }\n        return '';\n    }\n\n    getStockOnHandMinValue(variant: FormGroup) {\n        const effectiveOutOfStockThreshold = variant.get('useGlobalOutOfStockThreshold')?.value\n            ? this.globalOutOfStockThreshold\n            : variant.get('outOfStockThreshold')?.value;\n        return effectiveOutOfStockThreshold;\n    }\n\n    getSaleableStockLevel(variant: ProductVariant.Fragment) {\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\n            ? this.globalOutOfStockThreshold\n            : variant.outOfStockThreshold;\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\n    }\n\n    areAllSelected(): boolean {\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\n    }\n\n    onAssetChange(variantId: string, event: AssetChange) {\n        this.assetChange.emit({\n            variantId,\n            ...event,\n        });\n        const index = this.variants.findIndex(v => v.id === variantId);\n        this.formArray.at(index).markAsDirty();\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectedVariantIds = [];\n        } else {\n            this.selectedVariantIds = this.variants.map(v => v.id);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    toggleSelectVariant(variantId: string) {\n        const index = this.selectedVariantIds.indexOf(variantId);\n        if (-1 < index) {\n            this.selectedVariantIds.splice(index, 1);\n        } else {\n            this.selectedVariantIds.push(variantId);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        if (group) {\n            const translation =\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\n                group.translations[0];\n            return translation.name;\n        }\n    }\n\n    optionName(option: ProductOptionFragment) {\n        const translation =\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\n        return translation.name;\n    }\n\n    pendingFacetValues(variant: ProductVariant.Fragment) {\n        if (this.facets) {\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\n            return formFacetValueIds\n                .filter(x => !variantFacetValueIds.includes(x))\n                .map(id => this.facetValues.find(fv => fv.id === id))\n                .filter(notNullOrUndefined);\n        } else {\n            return [];\n        }\n    }\n\n    existingFacetValues(variant: ProductVariant.Fragment) {\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\n        const intersection = [...formFacetValueIds].filter(x =>\n            variant.facetValues.map(fv => fv.id).includes(x),\n        );\n        return intersection\n            .map(id => variant.facetValues.find(fv => fv.id === id))\n            .filter(notNullOrUndefined);\n    }\n\n    removeFacetValue(variant: ProductVariant.Fragment, facetValueId: string) {\n        const formGroup = this.formGroupMap.get(variant.id);\n        if (formGroup) {\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\n                id => id !== facetValueId,\n            );\n            formGroup.patchValue({\n                facetValueIds: newValue,\n            });\n            formGroup.markAsDirty();\n        }\n    }\n\n    isVariantSelected(variantId: string): boolean {\n        return -1 < this.selectedVariantIds.indexOf(variantId);\n    }\n\n    editOption(option: ProductVariant.Options) {\n        this.modalService\n            .fromComponent(UpdateProductOptionDialogComponent, {\n                size: 'md',\n                locals: {\n                    productOption: option,\n                    activeLanguage: this.activeLanguage,\n                    customFields: this.customOptionFields,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    this.updateProductOption.emit(result);\n                }\n            });\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    private getFacetValueIds(id: string): string[] {\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\n        return formValue.facetValueIds;\n    }\n}\n","<table class=\"table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'common.name' | translate }}</th>\n            <th>{{ 'catalog.sku' | translate }}</th>\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\n                <th>{{ optionGroup.name }}</th>\n            </ng-container>\n            <th>{{ 'catalog.price' | translate }}</th>\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            <th>{{ 'common.enabled' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <div class=\"card-img\">\n                        <div class=\"featured-asset\">\n                            <img\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\n                            />\n                            <ng-template #placeholder>\n                                <div class=\"placeholder\">\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                                </div>\n                            </ng-template>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'common.name' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"sku\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'catalog.sku' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\n                    <td\n                        class=\"left align-middle\"\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\n                    >\n                        {{ option.name }}\n                    </td>\n                </ng-container>\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <vdr-currency-input\n                            *ngIf=\"!channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"price\"\n                        ></vdr-currency-input>\n                        <vdr-currency-input\n                            *ngIf=\"channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"priceWithTax\"\n                        ></vdr-currency-input>\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"1\"\n                            formControlName=\"stockOnHand\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </td>\n            </ng-container>\n        </tr>\n    </tbody>\n</table>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Permission, ProductDetail, ProductVariant } from '@vendure/admin-ui/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { PaginationConfig, SelectedAssets } from '../product-detail/product-detail.component';\n\n@Component({\n    selector: 'vdr-product-variants-table',\n    templateUrl: './product-variants-table.component.html',\n    styleUrls: ['./product-variants-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductVariant.Fragment[];\n    @Input() paginationConfig: PaginationConfig;\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() optionGroups: ProductDetail.OptionGroups[];\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    formGroupMap = new Map<string, FormGroup>();\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private subscription: Subscription;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.subscription = this.formArray.valueChanges\n            .pipe(\n                map(value => value.length),\n                debounceTime(1),\n                distinctUntilChanged(),\n            )\n            .subscribe(() => {\n                this.buildFormGroupMap();\n            });\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    trackByFn(index: number, item: any) {\n        if ((item as any).id != null) {\n            return (item as any).id;\n        } else {\n            return index;\n        }\n    }\n\n    getFeaturedAsset(variant: ProductVariant.Fragment) {\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        return group && group.name;\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BulkActionRegistryService, SharedModule } from '@vendure/admin-ui/core';\n\nimport { catalogRoutes } from './catalog.routes';\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { AssetsComponent } from './components/assets/assets.component';\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { AssignToChannelDialogComponent } from './components/assign-to-channel-dialog/assign-to-channel-dialog.component';\nimport { BulkAddFacetValuesDialogComponent } from './components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport {\n    assignCollectionsToChannelBulkAction,\n    deleteCollectionsBulkAction,\n    removeCollectionsFromChannelBulkAction,\n} from './components/collection-list/collection-list-bulk-actions';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport {\n    assignFacetsToChannelBulkAction,\n    deleteFacetsBulkAction,\n    removeFacetsFromChannelBulkAction,\n} from './components/facet-list/facet-list-bulk-actions';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport {\n    assignFacetValuesToProductsBulkAction,\n    assignProductsToChannelBulkAction,\n    deleteProductsBulkAction,\n    removeProductsFromChannelBulkAction,\n} from './components/product-list/product-list-bulk-actions';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\n\nconst CATALOG_COMPONENTS = [\n    ProductListComponent,\n    ProductDetailComponent,\n    FacetListComponent,\n    FacetDetailComponent,\n    GenerateProductVariantsComponent,\n    ProductVariantsListComponent,\n    ApplyFacetDialogComponent,\n    AssetListComponent,\n    AssetsComponent,\n    VariantPriceDetailComponent,\n    CollectionListComponent,\n    CollectionDetailComponent,\n    CollectionTreeComponent,\n    CollectionTreeNodeComponent,\n    CollectionContentsComponent,\n    ProductVariantsTableComponent,\n    OptionValueInputComponent,\n    UpdateProductOptionDialogComponent,\n    ProductVariantsEditorComponent,\n    AssignProductsToChannelDialogComponent,\n    AssetDetailComponent,\n    ConfirmVariantDeletionDialogComponent,\n    ProductOptionsEditorComponent,\n    BulkAddFacetValuesDialogComponent,\n    AssignToChannelDialogComponent,\n];\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\n    exports: [...CATALOG_COMPONENTS],\n    declarations: [...CATALOG_COMPONENTS],\n})\nexport class CatalogModule {\n    constructor(private bulkActionRegistryService: BulkActionRegistryService) {\n        bulkActionRegistryService.registerBulkAction(assignFacetValuesToProductsBulkAction);\n        bulkActionRegistryService.registerBulkAction(assignProductsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(removeProductsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deleteProductsBulkAction);\n\n        bulkActionRegistryService.registerBulkAction(assignFacetsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(removeFacetsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deleteFacetsBulkAction);\n\n        bulkActionRegistryService.registerBulkAction(assignCollectionsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(removeCollectionsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deleteCollectionsBulkAction);\n    }\n}\n"]}
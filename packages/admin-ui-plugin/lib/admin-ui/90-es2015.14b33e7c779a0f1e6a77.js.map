{"version":3,"mappings":"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","names":["t","constructor","o","p","selectors","e","iconShape","this","job","state","a","u","r","l","C","super","d","setQueryFn","Z","dataService","settings","getAllJobs","jobs","lt","it","queueFilter","value","queueName","eq","mt","hideSettled","options","skip","take","filter","Object","isSettled","sort","createdAt","ngOnInit","S","pipe","destroy$","Q","liveUpdate","subscribe","refresh","queues$","getJobQueues","mapStream","jobQueues","k","name","running","hasResult","result","keys","length","cancelJob","g","x","path","component","data","breadcrumb","y","h","v"],"sources":["webpack:///src/lib/system/src/components/health-check/health-check.component.html","webpack:///src/lib/system/src/components/health-check/health-check.component.ts","webpack:///src/lib/system/src/components/job-state-label/job-state-label.component.html","webpack:///src/lib/system/src/components/job-state-label/job-state-label.component.ts","webpack:///src/lib/system/src/components/job-list/job-list.component.html","webpack:///src/lib/system/src/components/job-list/job-list.component.ts","webpack:///src/lib/system/src/system.routes.ts","webpack:///src/lib/system/src/system.module.ts"],"sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\n            <div class=\"status-icon\">\n                <clr-icon\n                    [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\n                    [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\n                    size=\"48\"\n                ></clr-icon>\n            </div>\n            <div class=\"status-detail\">\n                <ng-container *ngIf=\"status === 'ok'; else error\">\n                    {{ 'system.health-all-systems-up' | translate }}\n                </ng-container>\n                <ng-template #error>\n                    {{ 'system.health-error' | translate }}\n                </ng-template>\n                <div class=\"last-checked\">\n                    {{ 'system.health-last-checked' | translate }}:\n                    {{ healthCheckService.lastCheck$ | async | localeDate: 'mediumTime' }}\n                </div>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\n        <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\n            <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th class=\"left\">\n                {{ 'common.name' | translate }}\n            </th>\n            <th class=\"left\">\n                {{ 'system.health-status' | translate }}\n            </th>\n            <th class=\"left\">\n                {{ 'system.health-message' | translate }}\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let row of healthCheckService.details$ | async\">\n            <td class=\"align-middle left\">{{ row.key }}</td>\n            <td class=\"align-middle left\">\n                <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\n                    <ng-container *ngIf=\"row.result.status === 'up'; else down\">\n                        <clr-icon shape=\"check-circle\"></clr-icon>\n                        {{ 'system.health-status-up' | translate }}\n                    </ng-container>\n                    <ng-template #down>\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\n                        {{ 'system.health-status-down' | translate }}\n                    </ng-template>\n                </vdr-chip>\n            </td>\n            <td class=\"align-middle left\">{{ row.result.message }}</td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { HealthCheckService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-health-check',\n    templateUrl: './health-check.component.html',\n    styleUrls: ['./health-check.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HealthCheckComponent {\n    constructor(public healthCheckService: HealthCheckService) {}\n}\n","<vdr-chip [colorType]=\"colorType\">\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\n    {{ job.state | titlecase }}\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\n        {{ (job.progress / 100) | percent }}\n    </span>\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { JobInfoFragment, JobState } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-job-state-label',\n    templateUrl: './job-state-label.component.html',\n    styleUrls: ['./job-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobStateLabelComponent {\n    @Input()\n    job: JobInfoFragment;\n\n    get iconShape(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'check-circle';\n            case JobState.FAILED:\n                return 'exclamation-circle';\n            case JobState.CANCELLED:\n                return 'ban';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return 'hourglass';\n            case JobState.RUNNING:\n                return 'sync';\n        }\n    }\n\n    get colorType(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'success';\n            case JobState.FAILED:\n            case JobState.CANCELLED:\n                return 'error';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return '';\n            case JobState.RUNNING:\n                return 'warning';\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <clr-checkbox-container>\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\"/>\n                <label>{{ 'common.live-update' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <clr-checkbox-wrapper>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [formControl]=\"hideSettled\"\n                    name=\"hide-settled\"\n                    (change)=\"refresh()\"\n                />\n                <label>{{ 'system.hide-settled-jobs' | translate }}</label>\n            </clr-checkbox-wrapper>\n        </clr-checkbox-container>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <ng-select\n            [addTag]=\"false\"\n            [items]=\"queues$ | async\"\n            [hideSelected]=\"true\"\n            [multiple]=\"false\"\n            [markFirst]=\"false\"\n            [clearable]=\"false\"\n            [searchable]=\"false\"\n            bindValue=\"name\"\n            [formControl]=\"queueFilter\"\n            (change)=\"refresh()\"\n        >\n            <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\n                <ng-container *ngIf=\"item.name === 'all'; else others\">\n                    {{ 'system.all-job-queues' | translate }}\n                </ng-container>\n                <ng-template #others>\n                    <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\n                </ng-template>\n            </ng-template>\n        </ng-select>\n        <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-queue-name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.created-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-state' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-duration' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-result' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-job=\"item\">\n        <td class=\"left align-middle\">\n            <vdr-entity-info [entity]=\"job\"></vdr-entity-info>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-dropdown *ngIf=\"job.data\">\n                <button\n                    class=\"btn btn-link btn-icon\"\n                    vdrDropdownTrigger\n                    [title]=\"'system.job-data' | translate\"\n                >\n                    <clr-icon shape=\"details\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu>\n                    <div class=\"result-detail\">\n                        <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n            <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\n        </td>\n\n        <td class=\"left align-middle\">{{ job.createdAt | timeAgo }}</td>\n        <td class=\"left align-middle\">\n            <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\n            <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">\n                after {{ job.attempts }} attempts\n            </div>\n            <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\"  class=\"retry-info\">\n                attempting {{ job.attempts + 1 }} of {{ job.retries }}\n            </div>\n        </td>\n        <td class=\"left align-middle\">{{ job.duration | duration }}</td>\n        <td class=\"left align-middle\">\n            <vdr-dropdown *ngIf=\"hasResult(job)\">\n                <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"details\"></clr-icon>\n                    {{ 'system.job-result' | translate }}\n                </button>\n                <vdr-dropdown-menu>\n                    <div class=\"result-detail\">\n                        <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n            <vdr-dropdown *ngIf=\"job.error\">\n                <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"exclamation-circle\"></clr-icon>\n                    {{ 'system.job-error' | translate }}\n                </button>\n                <vdr-dropdown-menu>\n                    <div class=\"result-detail\">\n                        {{ job.error }}\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\n                <button class=\"icon-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"cancelJob(job.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.cancel' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    BaseListComponent,\n    DataService,\n    GetAllJobs,\n    GetFacetList,\n    GetJobQueueList,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { Observable, timer } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-job-list',\n    templateUrl: './job-list.component.html',\n    styleUrls: ['./job-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobListComponent\n    extends BaseListComponent<GetAllJobs.Query, GetAllJobs.Items>\n    implements OnInit {\n    queues$: Observable<GetJobQueueList.JobQueues[]>;\n    liveUpdate = new FormControl(true);\n    hideSettled = new FormControl(true);\n    queueFilter = new FormControl('all');\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getAllJobs(...args),\n            data => data.jobs,\n            (skip, take) => {\n                const queueFilter =\n                    this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };\n                const hideSettled = this.hideSettled.value;\n                return {\n                    options: {\n                        skip,\n                        take,\n                        filter: {\n                            ...queueFilter,\n                            ...(hideSettled ? { isSettled: { eq: false } } : {}),\n                        },\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    },\n                };\n            },\n        );\n    }\n\n    ngOnInit(): void {\n        super.ngOnInit();\n        timer(5000, 2000)\n            .pipe(\n                takeUntil(this.destroy$),\n                filter(() => this.liveUpdate.value),\n            )\n            .subscribe(() => {\n                this.refresh();\n            });\n        this.queues$ = this.dataService.settings\n            .getJobQueues()\n            .mapStream(res => res.jobQueues)\n            .pipe(\n                map(queues => {\n                    return [{ name: 'all', running: true }, ...queues];\n                }),\n            );\n    }\n\n    hasResult(job: GetAllJobs.Items): boolean {\n        const result = job.result;\n        if (result == null) {\n            return false;\n        }\n        if (typeof result === 'object') {\n            return Object.keys(result).length > 0;\n        }\n        return true;\n    }\n\n    cancelJob(id: string) {\n        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\n\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\nimport { JobListComponent } from './components/job-list/job-list.component';\n\nexport const systemRoutes: Route[] = [\n    {\n        path: 'jobs',\n        component: JobListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.job-queue'),\n        },\n    },\n    {\n        path: 'system-status',\n        component: HealthCheckComponent,\n        data: {\n            breadcrumb: _('breadcrumb.system-status'),\n        },\n    },\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\nimport { JobListComponent } from './components/job-list/job-list.component';\nimport { JobStateLabelComponent } from './components/job-state-label/job-state-label.component';\nimport { systemRoutes } from './system.routes';\n\n@NgModule({\n    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],\n    imports: [SharedModule, RouterModule.forChild(systemRoutes)],\n})\nexport class SystemModule {}\n"]}
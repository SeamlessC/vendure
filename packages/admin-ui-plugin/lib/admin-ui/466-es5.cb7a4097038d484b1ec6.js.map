{"version":3,"mappings":"4sBAIYA,gBAAmCA,mBAAOA,+BA8CVA,gBAAmDA,aAACA,kCAApFA,gBAAoBA,SAAYA,wBAA2DA,4BAAvEA,+BAAmBA,qFACvCA,gBAAmCA,mBAAOA,kCAC1CA,gBAA2BA,SAAcA,4BAAdA,sCC3ChCC,aAUHC,WAAoBC,EAAkCC,aAAlCC,mBAAkCA,cATtDA,cAAW,GACXA,cAAW,GACXA,mBACAA,aAAUC,MAEVD,cAAQC,SAAeC,MACvBF,4BAAsBC,SAAeE,oBACrCH,oBAAcC,SAAeG,2CAI7BC,sBACIL,KAAKM,oBACLN,KAAKO,YAAYF,MAAML,KAAKQ,SAAUR,KAAKS,SAAUT,KAAKU,YAAYC,UAAUb,YAC5E,OAAQA,EAAOc,gBACN,cACD,IAAMb,EAAWC,EAAKa,mBACtBb,EAAKc,OAAOC,cAAchB,GAAsB,KAChD,UACC,8BACA,0BACDC,EAAKM,aAAeR,EAAOkB,2CAUnCH,WACJ,IAAIf,EACEC,EAAK,IAAIkB,OAAJ,UAAchB,MAAd,UACX,IACI,IAAMiB,EAAkBC,OAAOC,SAASC,OAAOC,MAAMvB,GACjDmB,GAAmB,EAAIA,EAAgBK,SACvCzB,EAAa0B,KAAKC,mBAAmBP,EAAgB,YAEpDA,IAGT,OAAOpB,iDA3CFF,GAAcD,mDAAdC,EAAc8B,qpBDT3B/B,iBACIA,kBACIA,mBACIA,iBACAA,wBACJA,QACAA,iBACIA,mBAKIA,6EALJA,QAQAA,mBAKIA,6EALJA,QAQAA,wBACIA,2BACIA,mBACIA,UACJA,QACJA,QACJA,QACAA,iCACIA,qBAKIA,0DALJA,QAOAA,kBAAOA,gCAAsCA,QACjDA,QACAA,sBAGIA,gCAASI,YAGTJ,gCACJA,QACJA,QACAA,mBACIA,yBACAA,yBACAA,yBACJA,QACJA,QACJA,eAnDmBA,8CAQHA,qCAAsB,6CAQtBA,qCAAsB,6CAGuCA,yCAAtDA,+BAAyB,uBAGxBA,uCAUJA,uCAEGA,kDAMPA,oDAEAA,oDAIGA,+BACAA,8CACAA,4hEExCZgC,aACH9B,WAAoBC,EAAwBC,aAAxBC,cAAwBA,wDAE5C4B,SAAY9B,cACR,OAAOE,KAAKO,YAAYsB,2BAA2BC,QAC/CC,KAAIhC,mBACIA,GACAC,EAAKc,OAAOkB,SAAS,CAAC,OAElBjC,oDATX4B,GAAUhC,qDAAVgC,EAAUM,QAAVN,EAAUO,qBAFP,SCLT,IAAMC,EAAsB,CAC/B,CACIC,KAAM,GACNC,UAAWzC,EACX0C,UAAW,OACXV,YAAa,CAACD,KCEfY,gEAAMA,4DAJA,CAACtC,MAAcuC,cAAsBL","names":["e","c","constructor","t","n","this","a","brand","hideVendureBranding","hideVersion","logIn","errorMessage","authService","username","password","rememberMe","subscribe","__typename","getRedirectRoute","router","navigateByUrl","message","RegExp","i","window","location","search","match","length","atob","decodeURIComponent","selectors","l","canActivate","checkAuthenticatedStatus","pipe","T","navigate","factory","Éµfac","h","path","component","pathMatch","p","m"],"sources":["webpack:///src/lib/login/src/components/login/login.component.html","webpack:///src/lib/login/src/components/login/login.component.ts","webpack:///src/lib/login/src/providers/login.guard.ts","webpack:///src/lib/login/src/login.routes.ts","webpack:///src/lib/login/src/login.module.ts"],"sourcesContent":["<div class=\"login-wrapper\">\n    <form class=\"login\">\n        <label class=\"title\">\n            <img src=\"assets/logo-300px.png\" />\n            <span *ngIf=\"!hideVendureBranding\">vendure</span>\n        </label>\n        <div class=\"login-group\">\n            <input\n                class=\"username\"\n                type=\"text\"\n                name=\"username\"\n                id=\"login_username\"\n                [(ngModel)]=\"username\"\n                [placeholder]=\"'common.username' | translate\"\n            />\n            <input\n                class=\"password\"\n                name=\"password\"\n                type=\"password\"\n                id=\"login_password\"\n                [(ngModel)]=\"password\"\n                [placeholder]=\"'common.password' | translate\"\n            />\n            <clr-alert [clrAlertType]=\"'danger'\"  [clrAlertClosable]=\"false\" [class.visible]=\"errorMessage\" class=\"login-error\">\n                <clr-alert-item>\n                    <span class=\"alert-text\">\n                        {{ errorMessage }}\n                    </span>\n                </clr-alert-item>\n            </clr-alert>\n            <clr-checkbox-wrapper>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    id=\"rememberme\"\n                    name=\"rememberme\"\n                    [(ngModel)]=\"rememberMe\"\n                />\n                <label>{{ 'common.remember-me' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <button\n                type=\"submit\"\n                class=\"btn btn-primary\"\n                (click)=\"logIn()\"\n                [disabled]=\"!username || !password\"\n            >\n                {{ 'common.login' | translate }}\n            </button>\n        </div>\n        <div class=\"version\">\n            <span *ngIf=\"brand\">{{ brand }} <span *ngIf=\"!hideVendureBranding || !hideVersion\">-</span></span>\n            <span *ngIf=\"!hideVendureBranding\">vendure</span>\n            <span *ngIf=\"!hideVersion\">v{{ version }}</span>\n        </div>\n    </form>\n</div>\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ADMIN_UI_VERSION, AuthService, AUTH_REDIRECT_PARAM, getAppConfig } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n    username = '';\n    password = '';\n    rememberMe = false;\n    version = ADMIN_UI_VERSION;\n    errorMessage: string | undefined;\n    brand = getAppConfig().brand;\n    hideVendureBranding = getAppConfig().hideVendureBranding;\n    hideVersion = getAppConfig().hideVersion;\n\n    constructor(private authService: AuthService, private router: Router) {}\n\n    logIn(): void {\n        this.errorMessage = undefined;\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\n            switch (result.__typename) {\n                case 'CurrentUser':\n                    const redirect = this.getRedirectRoute();\n                    this.router.navigateByUrl(redirect ? redirect : '/');\n                    break;\n                case 'InvalidCredentialsError':\n                case 'NativeAuthStrategyError':\n                    this.errorMessage = result.message;\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Attempts to read a redirect param from the current url and parse it into a\n     * route from which the user was redirected after a 401 error.\n     */\n    private getRedirectRoute(): string | undefined {\n        let redirectTo: string | undefined;\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\n        try {\n            const redirectToParam = window.location.search.match(re);\n            if (redirectToParam && 1 < redirectToParam.length) {\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\n            }\n        } catch (e) {\n            // ignore\n        }\n        return redirectTo;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\nimport { AuthService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * This guard prevents loggen-in users from navigating to the login screen.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoginGuard implements CanActivate {\n    constructor(private router: Router, private authService: AuthService) {}\n\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n        return this.authService.checkAuthenticatedStatus().pipe(\n            map(authenticated => {\n                if (authenticated) {\n                    this.router.navigate(['/']);\n                }\n                return !authenticated;\n            }),\n        );\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { LoginGuard } from './providers/login.guard';\n\nexport const loginRoutes: Routes = [\n    {\n        path: '',\n        component: LoginComponent,\n        pathMatch: 'full',\n        canActivate: [LoginGuard],\n    },\n];\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { loginRoutes } from './login.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\n    exports: [],\n    declarations: [LoginComponent],\n})\nexport class LoginModule {}\n"]}